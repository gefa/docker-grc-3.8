{"/usr/local/share/gnuradio/grc/blocks/analog.tree.yml": {"[Core]": [{"Level Controllers": ["analog_agc_xx", "analog_agc2_xx", "analog_agc3_xx", "analog_feedforward_agc_cc", "analog_ctcss_squelch_ff", "analog_pwr_squelch_xx", "analog_simple_squelch_cc", "analog_standard_squelch", "analog_rail_ff"]}, {"Modulators": ["analog_frequency_modulator_fc", "analog_phase_modulator_fc", "analog_quadrature_demod_cf", "analog_nbfm_tx", "analog_nbfm_rx", "analog_wfm_tx", "analog_wfm_rcv", "analog_wfm_rcv_pll", "analog_am_demod_cf", "analog_fm_demod_cf", "analog_fm_deemph", "analog_fm_preemph"]}, {"Waveform Generators": ["analog_sig_source_x", "analog_const_source_x", "analog_noise_source_x", "analog_fastnoise_source_x", "analog_random_source_x", "analog_random_uniform_source_x"]}, {"Synchronizers": ["analog_pll_carriertracking_cc", "analog_pll_freqdet_cf", "analog_pll_refout_cc"]}, {"Peak Detectors": ["analog_dpll_bb"]}, {"Measurement Tools": ["analog_probe_avg_mag_sqrd_x"]}]}, "/usr/local/share/gnuradio/grc/blocks/analog_agc2_xx.block.yml": {"id": "analog_agc2_xx", "label": "AGC2", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["complex", "float"], "option_attributes": {"fcn": ["cc", "ff"]}, "hide": "part"}, {"id": "attack_rate", "label": "Attack Rate", "dtype": "real", "default": "1e-1"}, {"id": "decay_rate", "label": "Decay Rate", "dtype": "real", "default": "1e-2"}, {"id": "reference", "label": "Reference", "dtype": "real", "default": "1.0"}, {"id": "gain", "label": "Gain", "dtype": "real", "default": "1.0"}, {"id": "max_gain", "label": "Max Gain", "dtype": "real", "default": "65536"}], "inputs": [{"domain": "stream", "dtype": "${ type }"}], "outputs": [{"domain": "stream", "dtype": "${ type }"}], "templates": {"imports": "from gnuradio import analog", "make": "analog.agc2_${type.fcn}(${attack_rate}, ${decay_rate}, ${reference}, ${gain})\nself.${id}.set_max_gain(${max_gain})", "callbacks": ["set_attack_rate(${attack_rate})", "set_decay_rate(${decay_rate})", "set_reference(${reference})", "set_gain(${gain})", "set_max_gain(${max_gain})"]}, "cpp_templates": {"includes": ["#include <gnuradio/analog/agc2_${type.fcn}.h>"], "declarations": "analog::agc2_${type.fcn}::sptr ${id};", "make": "this->${id} = analog::agc2_${type.fcn}::make(${attack_rate}, ${decay_rate}, ${reference}, ${gain});\nthis->${id}->set_max_gain(${max_gain});", "callbacks": ["set_attack_rate(${attack_rate})", "set_decay_rate(${decay_rate})", "set_reference(${reference})", "set_gain(${gain})", "set_max_gain(${max_gain})"], "link": ["gnuradio-analog"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/analog_agc3_xx.block.yml": {"id": "analog_agc3_xx", "label": "AGC3", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["complex"], "option_attributes": {"fcn": ["cc"]}, "hide": "part"}, {"id": "attack_rate", "label": "Attack Rate", "dtype": "real", "default": "1e-3"}, {"id": "decay_rate", "label": "Decay Rate", "dtype": "real", "default": "1e-4"}, {"id": "reference", "label": "Reference", "dtype": "real", "default": "1.0"}, {"id": "gain", "label": "Gain", "dtype": "real", "default": "1.0"}, {"id": "max_gain", "label": "Max Gain", "dtype": "real", "default": "65536"}, {"id": "iir_update_decim", "label": "IIR Update Decimation", "dtype": "real", "default": "1"}], "inputs": [{"domain": "stream", "dtype": "${ type }"}], "outputs": [{"domain": "stream", "dtype": "${ type }"}], "templates": {"imports": "from gnuradio import analog", "make": "analog.agc3_${type.fcn}(${attack_rate}, ${decay_rate}, ${reference}, ${gain}, ${iir_update_decim})\nself.${id}.set_max_gain(${max_gain})", "callbacks": ["set_attack_rate(${attack_rate})", "set_decay_rate(${decay_rate})", "set_reference(${reference})", "set_gain(${gain})", "set_max_gain(${max_gain})"]}, "cpp_templates": {"includes": ["#include <gnuradio/analog/agc3_${type.fcn}.h>"], "declarations": "analog::agc3_${type.fcn}::sptr ${id};", "make": "this->${id} = analog::agc3_${type.fcn}::make(${attack_rate}, ${decay_rate}, ${reference}, ${gain}, ${iir_update_decim});\nthis->${id}->set_max_gain(${max_gain});", "callbacks": ["set_attack_rate(${attack_rate})", "set_decay_rate(${decay_rate})", "set_reference(${reference})", "set_gain(${gain})", "set_max_gain(${max_gain})"], "link": ["gnuradio-analog"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/analog_agc_xx.block.yml": {"id": "analog_agc_xx", "label": "AGC", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["complex", "float"], "option_attributes": {"fcn": ["cc", "ff"]}, "hide": "part"}, {"id": "rate", "label": "Rate", "dtype": "real", "default": "1e-4"}, {"id": "reference", "label": "Reference", "dtype": "real", "default": "1.0"}, {"id": "gain", "label": "Gain", "dtype": "real", "default": "1.0"}, {"id": "max_gain", "label": "Max Gain", "dtype": "real", "default": "65536"}], "inputs": [{"domain": "stream", "dtype": "${ type }"}], "outputs": [{"domain": "stream", "dtype": "${ type }"}], "templates": {"imports": "from gnuradio import analog", "make": "analog.agc_${type.fcn}(${rate}, ${reference}, ${gain})\nself.${id}.set_max_gain(${max_gain})", "callbacks": ["set_rate(${rate})", "set_reference(${reference})", "set_gain(${gain})", "set_max_gain(${max_gain})"]}, "cpp_templates": {"includes": ["#include <gnuradio/analog/agc_${type.fcn}.h>"], "declarations": "analog::agc_${type.fcn}::sptr ${id};", "make": "this->${id} = analog::agc_${type.fcn}::make(${rate}, ${reference}, ${gain});\nthis->${id}->set_max_gain(${max_gain});", "callbacks": ["set_rate(${rate})", "set_reference(${reference})", "set_gain(${gain})", "set_max_gain(${max_gain})"], "link": ["gnuradio-analog"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/analog_am_demod_cf.block.yml": {"id": "analog_am_demod_cf", "label": "AM Demod", "flags": ["python"], "parameters": [{"id": "chan_rate", "label": "Channel Rate", "dtype": "real"}, {"id": "audio_decim", "label": "Audio Decimation", "dtype": "int"}, {"id": "audio_pass", "label": "Audio Pass", "dtype": "real", "default": "5000"}, {"id": "audio_stop", "label": "Audio Stop", "dtype": "real", "default": "5500"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "float"}], "asserts": ["${ audio_pass > 0 }", "${audio_pass < audio_stop }"], "templates": {"imports": "from gnuradio import analog", "make": "analog.am_demod_cf(\n\tchannel_rate=${chan_rate},\n\taudio_decim=${audio_decim},\n\taudio_pass=${audio_pass},\n\taudio_stop=${audio_stop},\n)"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/analog_const_source_x.block.yml": {"id": "analog_const_source_x", "label": "Constant Source", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Output Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"const_type": ["complex", "real", "int", "short", "gr.sizeof_char"], "fcn": ["c", "f", "i", "s", "b"]}, "hide": "part"}, {"id": "const", "label": "Constant", "dtype": "${ type.const_type }", "default": "0"}], "outputs": [{"domain": "stream", "dtype": "${ type }"}], "templates": {"imports": "from gnuradio import analog", "make": "analog.sig_source_${type.fcn}(0, analog.GR_CONST_WAVE, 0, 0, ${const})", "callbacks": ["set_offset(${const})"]}, "cpp_templates": {"includes": ["#include <gnuradio/analog/sig_source.h>"], "declarations": "analog::sig_source_${type.fcn}::sptr ${id};", "make": "this->${id} = analog::sig_source_${type.fcn}::make(0, analog::GR_CONST_WAVE, 0, 0, ${const});", "callbacks": ["set_offset(${const})"], "link": ["gnuradio-analog"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/analog_cpfsk_bc.block.yml": {"id": "analog_cpfsk_bc", "label": "CPFSK", "category": "[Core]/Deprecated", "flags": ["python", "cpp"], "parameters": [{"id": "k", "label": "K", "dtype": "real"}, {"id": "amplitude", "label": "Amplitude", "dtype": "real"}, {"id": "samples_per_symbol", "label": "Samples/Symbol", "dtype": "int", "default": "2"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import analog", "make": "analog.cpfsk_bc(${k}, ${amplitude}, ${samples_per_symbol})", "callbacks": ["set_amplitude(${amplitude})"]}, "cpp_templates": {"includes": ["#include <gnuradio/analog/cpfsk_bc.h>"], "make": "this->${id} = analog::cpfsk_bc::make(${k}, ${amplitude}, ${samples_per_symbol});", "callbacks": ["set_amplitude(${amplitude})"], "link": ["gnuradio-analog"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/analog_ctcss_squelch_ff.block.yml": {"id": "analog_ctcss_squelch_ff", "label": "CTCSS Squelch", "flags": ["python", "cpp"], "parameters": [{"id": "rate", "label": "Sampling Rate (Hz)", "dtype": "real", "default": "samp_rate"}, {"id": "freq", "label": "Tone Frequency", "dtype": "real", "default": "100.0"}, {"id": "level", "label": "Level", "dtype": "real", "default": "0.01"}, {"id": "len", "label": "Length", "dtype": "int", "default": "0"}, {"id": "ramp", "label": "Ramp", "dtype": "int", "default": "0"}, {"id": "gate", "label": "Gate", "dtype": "bool", "default": "False"}], "inputs": [{"domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "float"}], "templates": {"imports": "from gnuradio import analog", "make": "analog.ctcss_squelch_ff(${rate}, ${freq}, ${level}, ${len}, ${ramp}, ${gate})", "callbacks": ["set_level(${level})", "set_frequency(${freq})"]}, "cpp_templates": {"includes": ["#include <gnuradio/analog/ctcss_squelch_ff.h>"], "make": "this->${id} = analog::ctcss_squelch_ff::make(${rate}, ${freq}, ${level}, ${len}, ${ramp}, ${gate});", "callbacks": ["set_level(${level})", "set_frequency(${freq})"], "link": ["gnuradio-analog"], "translations": {"True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/analog_dpll_bb.block.yml": {"id": "analog_dpll_bb", "label": "Detect Peak", "flags": ["python", "cpp"], "parameters": [{"id": "period", "label": "Period", "dtype": "real"}, {"id": "gain", "label": "Gain", "dtype": "real"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import analog", "make": "analog.dpll_bb(${period}, ${gain})", "callbacks": ["set_gain(${gain})"]}, "cpp_templates": {"includes": ["#include <gnuradio/analog/dpll_bb.h>"], "make": "this->${id} = analog::dpll_bb::make(${period}, ${gain});", "callbacks": ["set_gain(${gain})"], "link": ["gnuradio-analog"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/analog_fastnoise_source_x.block.yml": {"id": "analog_fastnoise_source_x", "label": "Fast Noise Source", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Output Type", "dtype": "enum", "options": ["complex", "float", "int", "short"], "option_attributes": {"fcn": ["c", "f", "i", "s"]}, "hide": "part"}, {"id": "noise_type", "label": "Noise Type", "dtype": "int", "default": "analog.GR_GAUSSIAN", "options": ["analog.GR_UNIFORM", "analog.GR_GAUSSIAN", "analog.GR_LAPLACIAN", "analog.GR_IMPULSE"], "option_labels": ["Uniform", "Gaussian", "Laplacian", "Impulse"]}, {"id": "amp", "label": "Amplitude", "dtype": "real", "default": "1"}, {"id": "seed", "label": "Seed", "dtype": "int", "default": "0"}, {"id": "samples", "label": "Variate Pool Size", "dtype": "int", "default": "8192"}], "outputs": [{"domain": "stream", "dtype": "${ type }"}], "templates": {"imports": "from gnuradio import analog", "make": "analog.fastnoise_source_${type.fcn}(${noise_type}, ${amp}, ${seed}, ${samples})", "callbacks": ["set_type(${noise_type})", "set_amplitude(${amp})"]}, "cpp_templates": {"includes": ["#include <gnuradio/analog/fastnoise_source.h>"], "make": "this->${id} = analog::fastnoise_source_${type.fcn}::make(${noise_type}, ${amp}, ${seed}, ${samples});", "callbacks": ["set_type(${noise_type})", "set_amplitude(${amp})"], "link": ["gnuradio-analog"], "translations": {"analog.": "analog::"}}, "documentation": "The fast noise source works by pre-generating a pool of random variates taken from the specified distribution.  At runtime, samples are then uniform randomly chosen from this pool which is a very fast operation.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/analog_feedforward_agc_cc.block.yml": {"id": "analog_feedforward_agc_cc", "label": "Feed Forward AGC", "flags": ["python", "cpp"], "parameters": [{"id": "num_samples", "label": "Num Samples", "dtype": "int", "default": "1024"}, {"id": "reference", "label": "Reference", "dtype": "real", "default": "1.0"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import analog", "make": "analog.feedforward_agc_cc(${num_samples}, ${reference})"}, "cpp_templates": {"includes": ["#include <gnuradio/analog/feedforward_agc_cc.h>"], "make": "this->${id} = analog::feedforward_agc_cc::make(${num_samples}, ${reference});", "link": ["gnuradio-analog"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/analog_fm_deemph.block.yml": {"id": "analog_fm_deemph", "label": "FM Deemphasis", "flags": ["python"], "parameters": [{"id": "samp_rate", "label": "Sample Rate", "dtype": "real"}, {"id": "tau", "label": "Tau", "dtype": "real", "default": "75e-6"}], "inputs": [{"domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "float"}], "templates": {"imports": "from gnuradio import analog", "make": "analog.fm_deemph(fs=${samp_rate}, tau=${tau})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/analog_fm_demod_cf.block.yml": {"id": "analog_fm_demod_cf", "label": "FM Demod", "flags": ["python"], "parameters": [{"id": "chan_rate", "label": "Channel Rate", "dtype": "real"}, {"id": "audio_decim", "label": "Audio Decimation", "dtype": "int"}, {"id": "deviation", "label": "Deviation", "dtype": "real", "default": "75000"}, {"id": "audio_pass", "label": "Audio Pass", "dtype": "real", "default": "15000"}, {"id": "audio_stop", "label": "Audio Stop", "dtype": "real", "default": "16000"}, {"id": "gain", "label": "Gain", "dtype": "real", "default": "1.0"}, {"id": "tau", "label": "Tau", "dtype": "real", "default": "75e-6"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "float"}], "templates": {"imports": "from gnuradio import analog", "make": "analog.fm_demod_cf(\n\tchannel_rate=${chan_rate},\n\taudio_decim=${audio_decim},\n\tdeviation=${deviation},\n\taudio_pass=${audio_pass},\n\taudio_stop=${audio_stop},\n\tgain=${gain},\n\ttau=${tau},\n)"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/analog_fm_preemph.block.yml": {"id": "analog_fm_preemph", "label": "FM Preemphasis", "flags": ["python"], "parameters": [{"id": "samp_rate", "label": "Sample Rate", "dtype": "real"}, {"id": "tau", "label": "Tau", "dtype": "real", "default": "75e-6"}, {"id": "fh", "label": "High Corner Freq", "dtype": "real", "default": "-1.0"}], "inputs": [{"domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "float"}], "templates": {"imports": "from gnuradio import analog", "make": "analog.fm_preemph(fs=${samp_rate}, tau=${tau}, fh=${fh})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/analog_fmdet_cf.block.yml": {"id": "analog_fmdet_cf", "label": "FM Detector", "flags": ["python"], "parameters": [{"id": "samplerate", "label": "Sample rate", "dtype": "real"}, {"id": "freq_low", "label": "Lowest frequency", "dtype": "real"}, {"id": "freq_high", "label": "Highest frequency", "dtype": "real"}, {"id": "scl", "label": "Scale factor", "dtype": "real"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "float"}], "templates": {"imports": "from gnuradio import analog", "make": "analog.fmdet_cf(\n\tsamplerate=${samplerate},\n\tfreq_low=${freq_low},\n\tfreq_high=${freq_high},\n\tscl=${scl}\n)"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/analog_frequency_modulator_fc.block.yml": {"id": "analog_frequency_modulator_fc", "label": "Frequency Mod", "flags": ["python", "cpp"], "parameters": [{"id": "sensitivity", "label": "Sensitivity", "dtype": "real"}], "inputs": [{"domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import analog", "make": "analog.frequency_modulator_fc(${sensitivity})", "callbacks": ["set_sensitivity(${sensitivity})"]}, "cpp_templates": {"includes": ["#include <gnuradio/analog/frequency_modulator_fc.h>"], "declarations": "gr::analog::frequency_modulator_fc::sptr ${id};", "make": "this->${id} = analog::frequency_modulator_fc::make(${sensitivity});", "callbacks": ["set_sensitivity(${sensitivity})"], "link": ["gnuradio-analog"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/analog_nbfm_rx.block.yml": {"id": "analog_nbfm_rx", "label": "NBFM Receive", "flags": ["python"], "parameters": [{"id": "audio_rate", "label": "Audio Rate", "dtype": "int"}, {"id": "quad_rate", "label": "Quadrature Rate", "dtype": "int"}, {"id": "tau", "label": "Tau", "dtype": "real", "default": "75e-6"}, {"id": "max_dev", "label": "Max Deviation", "dtype": "real", "default": "5e3"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "float"}], "asserts": ["${ (quad_rate)%(audio_rate) == 0 }"], "templates": {"imports": "from gnuradio import analog", "make": "analog.nbfm_rx(\n\taudio_rate=${audio_rate},\n\tquad_rate=${quad_rate},\n\ttau=${tau},\n\tmax_dev=${max_dev},\n  )", "callbacks": ["set_max_deviation(${max_dev})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/analog_nbfm_tx.block.yml": {"id": "analog_nbfm_tx", "label": "NBFM Transmit", "flags": ["python"], "parameters": [{"id": "audio_rate", "label": "Audio Rate", "dtype": "int"}, {"id": "quad_rate", "label": "Quadrature Rate", "dtype": "int"}, {"id": "tau", "label": "Tau", "dtype": "real", "default": "75e-6"}, {"id": "max_dev", "label": "Max Deviation", "dtype": "real", "default": "5e3"}, {"id": "fh", "label": "Preemphasis High Corner Freq", "dtype": "real", "default": "-1.0"}], "inputs": [{"domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "asserts": ["${ (quad_rate)%(audio_rate) == 0 }"], "templates": {"imports": "from gnuradio import analog", "make": "analog.nbfm_tx(\n\taudio_rate=${audio_rate},\n\tquad_rate=${quad_rate},\n\ttau=${tau},\n\tmax_dev=${max_dev},\n\tfh=${fh},\n        )", "callbacks": ["set_max_deviation(${max_dev})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/analog_noise_source_x.block.yml": {"id": "analog_noise_source_x", "label": "Noise Source", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Output Type", "dtype": "enum", "options": ["complex", "float", "int", "short"], "option_attributes": {"fcn": ["c", "f", "i", "s"]}, "hide": "part"}, {"id": "noise_type", "label": "Noise Type", "dtype": "int", "default": "analog.GR_GAUSSIAN", "options": ["analog.GR_UNIFORM", "analog.GR_GAUSSIAN", "analog.GR_LAPLACIAN", "analog.GR_IMPULSE"], "option_labels": ["Uniform", "Gaussian", "Laplacian", "Impulse"]}, {"id": "amp", "label": "Amplitude", "dtype": "real", "default": "1"}, {"id": "seed", "label": "Seed", "dtype": "int", "default": "0"}], "outputs": [{"domain": "stream", "dtype": "${ type }"}], "templates": {"imports": "from gnuradio import analog", "make": "analog.noise_source_${type.fcn}(${noise_type}, ${amp}, ${seed})", "callbacks": ["set_type(${noise_type})", "set_amplitude(${amp})"]}, "cpp_templates": {"includes": ["#include <gnuradio/analog/noise_source.h>"], "make": "this->${id} = analog::noise_source_${type.fcn}::make(${noise_type}, ${amp}, ${seed});", "callbacks": ["set_type(${noise_type})", "set_amplitude(${amp})"], "link": ["gnuradio-analog"], "translations": {"analog.": "analog::"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/analog_phase_modulator_fc.block.yml": {"id": "analog_phase_modulator_fc", "label": "Phase Mod", "flags": ["python", "cpp"], "parameters": [{"id": "sensitivity", "label": "Sensitivity", "dtype": "real"}], "inputs": [{"domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import analog", "make": "analog.phase_modulator_fc(${sensitivity})", "callbacks": ["set_sensitivity(${sensitivity})"]}, "cpp_templates": {"includes": ["#include <gnuradio/analog/phase_modulator_fc.h>"], "make": "this->${id} = analog::phase_modulator_fc::make(${sensitivity});", "link": ["gnuradio-analog"], "callbacks": ["set_sensitivity(${sensitivity})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/analog_pll_carriertracking_cc.block.yml": {"id": "analog_pll_carriertracking_cc", "label": "PLL Carrier Tracking", "flags": ["python", "cpp"], "parameters": [{"id": "w", "label": "Loop Bandwidth", "dtype": "real"}, {"id": "max_freq", "label": "Max Freq", "dtype": "real"}, {"id": "min_freq", "label": "Min Freq", "dtype": "real"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import analog", "make": "analog.pll_carriertracking_cc(${w}, ${max_freq}, ${min_freq})", "callbacks": ["set_loop_bandwidth(${w})", "set_max_freq(${max_freq})", "set_min_freq(${min_freq})"]}, "cpp_templates": {"includes": ["#include <gnuradio/analog/pll_carriertracking_${type.fcn}.h>"], "make": "this->${id} = analog::pll_carriertracking_cc::make(${w}, ${max_freq}, ${min_freq});", "callbacks": ["set_loop_bandwidth(${w})", "set_max_freq(${max_freq})", "set_min_freq(${min_freq})"], "link": ["gnuradio-analog"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/analog_pll_freqdet_cf.block.yml": {"id": "analog_pll_freqdet_cf", "label": "PLL Freq Det", "flags": ["python", "cpp"], "parameters": [{"id": "w", "label": "Loop Bandwidth", "dtype": "real"}, {"id": "max_freq", "label": "Max Freq", "dtype": "real"}, {"id": "min_freq", "label": "Min Freq", "dtype": "real"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "float"}], "templates": {"imports": "from gnuradio import analog", "make": "analog.pll_freqdet_cf(${w}, ${max_freq}, ${min_freq})", "callbacks": ["set_loop_bandwidth(${w})", "set_max_freq(${max_freq})", "set_min_freq(${min_freq})"]}, "cpp_templates": {"includes": ["#include <gnuradio/analog/pll_freqdet_cf.h>"], "make": "this->${id} = analog::pll_freqdet_cf::make(${w}, ${max_freq}, ${min_freq});", "callbacks": ["set_loop_bandwidth(${w})", "set_max_freq(${max_freq})", "set_min_freq(${min_freq})"], "link": ["gnuradio-analog"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/analog_pll_refout_cc.block.yml": {"id": "analog_pll_refout_cc", "label": "PLL Ref Out", "flags": ["python", "cpp"], "parameters": [{"id": "w", "label": "Loop Bandwidth", "dtype": "real"}, {"id": "max_freq", "label": "Max Freq", "dtype": "real"}, {"id": "min_freq", "label": "Min Freq", "dtype": "real"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import analog", "make": "analog.pll_refout_cc(${w}, ${max_freq}, ${min_freq})", "callbacks": ["set_loop_bandwidth(${w})", "set_max_freq(${max_freq})", "set_min_freq(${min_freq})"]}, "cpp_templates": {"includes": ["#include <gnuradio/analog/pll_refout_cc.h>"], "make": "this->${id} = analog::pll_refout_cc::make(${w}, ${max_freq}, ${min_freq});", "callbacks": ["set_loop_bandwidth(${w})", "set_max_freq(${max_freq})", "set_min_freq(${min_freq})"], "link": ["gnuradio-analog"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/analog_probe_avg_mag_sqrd_x.block.yml": {"id": "analog_probe_avg_mag_sqrd_x", "label": "Probe Avg Mag^2", "flags": ["python"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["c", "f", "cf"], "option_labels": ["Complex", "Float", "Complex->Float"], "option_attributes": {"hide": ["all", "all", ""], "input": ["complex", "float", "complex"], "optional": ["1", "1", "0"]}, "hide": "part"}, {"id": "threshold", "label": "Threshold (dB)", "dtype": "real", "default": "0"}, {"id": "alpha", "label": "Alpha", "dtype": "real", "default": "1"}], "inputs": [{"domain": "stream", "dtype": "${ type.input }"}], "outputs": [{"domain": "stream", "dtype": "float", "optional": true, "hide": "${ type.hide }"}], "templates": {"imports": "from gnuradio import analog", "make": "analog.probe_avg_mag_sqrd_${type}(${threshold}, ${alpha})", "callbacks": ["set_alpha(${alpha})", "set_threshold(${threshold})", "reset()"]}, "documentation": "Available functions to probe: level()\n\nUse with the function probe block.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/analog_pwr_squelch_xx.block.yml": {"id": "analog_pwr_squelch_xx", "label": "Power Squelch", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["complex", "float"], "option_attributes": {"fcn": ["cc", "ff"]}, "hide": "part"}, {"id": "threshold", "label": "Threshold (dB)", "dtype": "real"}, {"id": "alpha", "label": "Alpha", "dtype": "real", "default": "1e-4"}, {"id": "ramp", "label": "Ramp", "dtype": "int", "default": "0"}, {"id": "gate", "label": "Gate", "dtype": "enum", "options": ["True", "False"], "option_labels": ["Yes", "No"]}], "inputs": [{"domain": "stream", "dtype": "${ type }"}], "outputs": [{"domain": "stream", "dtype": "${ type }"}], "templates": {"imports": "from gnuradio import analog", "make": "analog.pwr_squelch_${type.fcn}(${threshold}, ${alpha}, ${ramp}, ${gate})", "callbacks": ["set_threshold(${threshold})", "set_alpha(${alpha})"]}, "cpp_templates": {"includes": ["#include <gnuradio/analog/pwr_squelch_${type.fcn}.h>"], "make": "this->${id} = analog::pwr_squelch_${type.fcn}::make(${threshold}, ${alpha}, ${ramp}, ${gate});", "callbacks": ["set_threshold(${threshold})", "set_alpha(${alpha})"], "link": ["gnuradio-analog"], "translations": {"true": true, "false": false}}, "documentation": "This will either pass the input unchanged or block it, depending on\nwhether its envelope is over a certain threshold. The envelope is calculated\nby taking the squared magnitude of the signal and lowpassing it with a\nsingle pole IIR filter (with the specified alpha).\n\nThe ramp parameter specifies the attack / release time, in samples.\nA sinusodial ramp is used to progressively mute / unmute the input.\nIf ramp is set to 0, input is muted / unmuted without a ramp.\n\nFor realtime applications you'll want to set the gate parameter to\nfalse, which produces zeros when the input is muted. If it is true,\nthe block will stop producing samples when in muted state.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/analog_quadrature_demod_cf.block.yml": {"id": "analog_quadrature_demod_cf", "label": "Quadrature Demod", "flags": ["python"], "parameters": [{"id": "gain", "label": "Gain", "dtype": "real", "default": "samp_rate/(2*math.pi*fsk_deviation_hz/8.0)"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "float"}], "templates": {"imports": "from gnuradio import analog\nimport math", "make": "analog.quadrature_demod_cf(${gain})", "callbacks": ["set_gain(${gain})"]}, "documentation": "This can be used to demod FM, FSK, GMSK, etc.  The input is complex\nbaseband, output is the signal frequency in relation to the sample\nrate, multiplied with the gain.\n\nMathematically, this block calculates the product of the one-sample\ndelayed input and the conjugate undelayed signal, and then calculates\nthe argument of the resulting complex number:\n\ny[n] = \\mathrm{arg}\\left(x[n] \\, \\bar x [n-1]\\right).\n\nLet x be a complex sinusoid with amplitude A>0, (absolute)\nfrequency f\\in\\mathbb R and phase \\phi_0\\in[0;2\\pi] sampled at\nf_s>0 so, without loss of generality,\n\nx[n]= A e^{j2\\pi( \\frac f{f_s} n + \\phi_0)}\\f\n\nthen\n\ny[n] = \\mathrm{arg}\\left(A e^{j2\\pi\\left( \\frac f{f_s} n + \\phi_0\\right)} \\overline{A e^{j2\\pi( \\frac f{f_s} (n-1) + \\phi_0)}}\\right)\\ = \\mathrm{arg}\\left(A^2 e^{j2\\pi\\left( \\frac f{f_s} n + \\phi_0\\right)} e^{-j2\\pi( \\frac f{f_s} (n-1) + \\phi_0)}\\right)\\ = \\mathrm{arg}\\left( A^2 e^{j2\\pi\\left( \\frac f{f_s} n + \\phi_0 - \\frac f{f_s} (n-1) - \\phi_0\\right)}\\right)\\ = \\mathrm{arg}\\left( A^2 e^{j2\\pi\\left( \\frac f{f_s} n - \\frac f{f_s} (n-1)\\right)}\\right)\\ = \\mathrm{arg}\\left( A^2 e^{j2\\pi\\left( \\frac f{f_s} \\left(n-(n-1)\\right)\\right)}\\right)\\ = \\mathrm{arg}\\left( A^2 e^{j2\\pi \\frac f{f_s}}\\right) \\intertext{$A$ is real, so is $A^2$ and hence only \\textit{scales}, therefore $\\mathrm{arg}(\\cdot)$ is invariant:} = \\mathrm{arg}\\left(e^{j2\\pi \\frac f{f_s}}\\right)\\= \\frac f{f_s}\\\\", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/analog_rail_ff.block.yml": {"id": "analog_rail_ff", "label": "Rail", "flags": ["python", "cpp"], "parameters": [{"id": "lo", "label": "Low clipping", "dtype": "real"}, {"id": "hi", "label": "Hi clipping", "dtype": "real"}], "inputs": [{"domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "float"}], "templates": {"imports": "from gnuradio import analog", "make": "analog.rail_ff(${lo}, ${hi})", "callbacks": ["set_lo(${lo})", "set_hi(${hi})"]}, "cpp_templates": {"includes": ["#include <gnuradio/analog/rail_ff.h>"], "make": "this->${id} = analog::rail_ff::make(${lo}, ${hi});", "callbacks": ["set_lo(${lo})", "set_hi(${hi})"], "link": ["gnuradio-analog"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/analog_random_source_x.block.yml": {"id": "analog_random_source_x", "label": "Random Source", "flags": ["python"], "parameters": [{"id": "type", "label": "Output Type", "dtype": "enum", "options": ["int", "short", "byte"], "option_attributes": {"fcn": ["i", "s", "b"]}, "hide": "part"}, {"id": "min", "label": "Minimum", "dtype": "int", "default": "0"}, {"id": "max", "label": "Maximum", "dtype": "int", "default": "2"}, {"id": "num_samps", "label": "Num Samples", "dtype": "int", "default": "1000"}, {"id": "repeat", "label": "Repeat", "dtype": "enum", "default": "True", "options": ["True", "False"], "option_labels": ["Yes", "No"]}], "outputs": [{"domain": "stream", "dtype": "${ type }"}], "templates": {"imports": "from gnuradio import blocks\nimport numpy", "make": "blocks.vector_source_${type.fcn}(list(map(int, numpy.random.randint(${min}, ${max}, ${num_samps}))), ${repeat})"}, "documentation": "Generate num samples of random numbers of [min, max). Repeat samples if specified.\n\nEx: With min=0 and max=2, the sequence 01110101... will be generated.\n\nThis block wraps Vector Source, i.e. it creates a vector source using a vector filled with values returned from calling np.random.randint(min, max, num_samps) once\n\nIf you would like a traditional random number generator, use Random Uniform Source instead", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/analog_random_uniform_source_x.block.yml": {"id": "analog_random_uniform_source_x", "label": "Random Uniform Source", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Output Type", "dtype": "enum", "options": ["int", "short", "byte"], "option_attributes": {"fcn": ["i", "s", "b"], "offset_type": ["int", "int", "int"]}, "hide": "part"}, {"id": "minimum", "label": "Minimum", "dtype": "int"}, {"id": "maximum", "label": "Maximum", "dtype": "int"}, {"id": "seed", "label": "Seed", "dtype": "int", "default": "0"}], "outputs": [{"domain": "stream", "dtype": "${ type }"}], "templates": {"imports": "from gnuradio import analog", "make": "analog.random_uniform_source_${type.fcn}(${minimum}, ${maximum}, ${seed})"}, "cpp_templates": {"includes": ["#include <gnuradio/analog/random_uniform_source.h>"], "make": "this->${id} = analog.random_uniform_source_${type.fcn}(${minimum}, ${maximum}, ${seed});", "link": ["gnuradio-analog"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/analog_sig_source_x.block.yml": {"id": "analog_sig_source_x", "label": "Signal Source", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Output Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"fcn": ["c", "f", "i", "s", "b"], "offset_type": ["complex", "real", "int", "short", "byte"]}, "hide": "part"}, {"id": "samp_rate", "label": "Sample Rate", "dtype": "real", "default": "samp_rate"}, {"id": "waveform", "label": "Waveform", "dtype": "int", "default": "analog.GR_COS_WAVE", "options": ["analog.GR_CONST_WAVE", "analog.GR_SIN_WAVE", "analog.GR_COS_WAVE", "analog.GR_SQR_WAVE", "analog.GR_TRI_WAVE", "analog.GR_SAW_WAVE"], "option_labels": ["Constant", "Sine", "Cosine", "Square", "Triangle", "Saw Tooth"]}, {"id": "freq", "label": "Frequency", "dtype": "real", "default": "1000"}, {"id": "amp", "label": "Amplitude", "dtype": "real", "default": "1"}, {"id": "offset", "label": "Offset", "dtype": "${ type.offset_type }", "default": "0"}, {"id": "phase", "label": "Initial Phase (Radians)", "dtype": "real", "default": "0"}], "inputs": [{"domain": "message", "id": "freq", "optional": true}], "outputs": [{"domain": "stream", "dtype": "${ type }"}], "templates": {"imports": "from gnuradio import analog", "make": "analog.sig_source_${type.fcn}(${samp_rate}, ${waveform}, ${freq}, ${amp}, ${offset}, ${phase})", "callbacks": ["set_sampling_freq(${samp_rate})", "set_waveform(${waveform})", "set_frequency(${freq})", "set_amplitude(${amp})", "set_offset(${offset})", "set_phase(${phase})"]}, "cpp_templates": {"includes": ["#include <gnuradio/analog/sig_source.h>"], "declarations": "analog::sig_source_${type.fcn}::sptr ${id};", "make": "this->${id} = analog::sig_source_${type.fcn}::make(${samp_rate}, ${waveform}, ${freq}, ${amp}, ${offset},${phase});", "callbacks": ["set_sampling_freq(${samp_rate})", "set_waveform(${waveform})", "set_frequency(${freq})", "set_amplitude(${amp})", "set_offset(${offset})", "set_phase(${phase})"], "link": ["gnuradio-analog"], "translations": {"analog\\.": "analog::"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/analog_simple_squelch_cc.block.yml": {"id": "analog_simple_squelch_cc", "label": "Simple Squelch", "flags": ["python", "cpp"], "parameters": [{"id": "threshold", "label": "Threshold (dB)", "dtype": "real"}, {"id": "alpha", "label": "Alpha", "dtype": "real"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import analog", "make": "analog.simple_squelch_cc(${threshold}, ${alpha})", "callbacks": ["set_threshold(${threshold})", "set_alpha(${alpha})"]}, "cpp_templates": {"includes": ["#include <gnuradio/analog/simple_squelch_cc.h>"], "make": "this->${id} = analog::simple_squelch_cc::make(${threshold}, ${alpha});", "callbacks": ["set_threshold(${threshold})", "set_alpha(${alpha})"], "link": ["gnuradio-analog"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/analog_standard_squelch.block.yml": {"id": "analog_standard_squelch", "label": "Standard Squelch", "flags": ["python"], "parameters": [{"id": "audio_rate", "label": "Audio Rate", "dtype": "real"}, {"id": "threshold", "label": "Threshold", "dtype": "real"}], "inputs": [{"domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "float"}], "templates": {"imports": "from gnuradio import analog", "make": "analog.standard_squelch(audio_rate=${audio_rate})\nself.${id}.set_threshold(${threshold})", "callbacks": ["set_threshold(${threshold})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/analog_wfm_rcv.block.yml": {"id": "analog_wfm_rcv", "label": "WBFM Receive", "flags": ["python"], "parameters": [{"id": "quad_rate", "label": "Quadrature Rate", "dtype": "real"}, {"id": "audio_decimation", "label": "Audio Decimation", "dtype": "int"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "float"}], "templates": {"imports": "from gnuradio import analog", "make": "analog.wfm_rcv(\n\tquad_rate=${quad_rate},\n\taudio_decimation=${audio_decimation},\n)"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/analog_wfm_rcv_pll.block.yml": {"id": "analog_wfm_rcv_pll", "label": "WBFM Receive PLL", "flags": ["python"], "parameters": [{"id": "quad_rate", "label": "Quadrature Rate", "dtype": "real"}, {"id": "audio_decimation", "label": "Audio Decimation", "dtype": "int"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"label": "Lout", "domain": "stream", "dtype": "float"}, {"label": "Rout", "domain": "stream", "dtype": "float"}], "templates": {"imports": "from gnuradio import analog", "make": "analog.wfm_rcv_pll(\n\tdemod_rate=${quad_rate},\n\taudio_decimation=${audio_decimation},\n)"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/analog_wfm_tx.block.yml": {"id": "analog_wfm_tx", "label": "WBFM Transmit", "flags": ["python", "cpp"], "parameters": [{"id": "audio_rate", "label": "Audio Rate", "dtype": "int"}, {"id": "quad_rate", "label": "Quadrature Rate", "dtype": "int"}, {"id": "tau", "label": "Tau", "dtype": "real", "default": "75e-6"}, {"id": "max_dev", "label": "Max Deviation", "dtype": "real", "default": "75e3"}, {"id": "fh", "label": "Preemphasis High Corner Freq", "dtype": "real", "default": "-1.0"}], "inputs": [{"domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "asserts": ["${ (quad_rate)%(audio_rate) == 0 }"], "templates": {"imports": "from gnuradio import analog", "make": "analog.wfm_tx(\n\taudio_rate=${audio_rate},\n\tquad_rate=${quad_rate},\n\ttau=${tau},\n\tmax_dev=${max_dev},\n\tfh=${fh},\n)"}, "cpp_templates": {"includes": ["#include <gnuradio/analog/frequency_modulator_fc.h>", "#include <boost/math/constants/constants.hpp>"], "declarations": "gr::analog::frequency_modulator_fc::sptr ${id};", "make": "this->${id} = gr::analog::frequency_modulator_fc::make(2 * boost::math::constants::pi<double>() * ${max_dev} / ${quad_rate});", "link": ["gnuradio-analog"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/audio_sink.block.yml": {"id": "audio_sink", "label": "Audio Sink", "category": "[Core]/Audio", "flags": ["throttle", "python", "cpp"], "parameters": [{"id": "samp_rate", "label": "Sample Rate", "dtype": "int", "default": "samp_rate", "options": ["16000", "22050", "24000", "32000", "44100", "48000"], "option_labels": ["16 kHz", "22.05 kHz", "24 kHz", "32 kHz", "44.1 kHz", "48 kHz"]}, {"id": "device_name", "label": "Device Name", "dtype": "string", "hide": "${ ('none' if device_name else 'part') }"}, {"id": "ok_to_block", "label": "OK to Block", "dtype": "enum", "default": "True", "options": ["True", "False"], "option_labels": ["Yes", "No"], "hide": "part"}, {"id": "num_inputs", "label": "Num Inputs", "dtype": "int", "default": "1", "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "float", "multiplicity": "${ num_inputs }"}], "asserts": ["${ 0 < num_inputs }"], "templates": {"imports": "from gnuradio import audio", "make": "audio.sink(${samp_rate}, ${device_name}, ${ok_to_block})"}, "cpp_templates": {"includes": ["#include <gnuradio/audio/sink.h>"], "declarations": "audio::sink::sptr ${id};", "make": "this->${id} = audio::sink::make(${samp_rate}, ${device_name}, ${ok_to_block});", "link": ["gnuradio-audio"], "translations": {"'": "\"", "True": "true", "False": "false"}}, "documentation": "Not all sampling rates will be supported by your hardware.\n\nLeave the device name blank to choose default audio device. ALSA users with audio trouble may try setting the device name to plughw:0,0\n\nThe audio sink can have multiple inputs depending upon your hardware. For example, set the inputs to 2 for stereo audio.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/audio_source.block.yml": {"id": "audio_source", "label": "Audio Source", "category": "[Core]/Audio", "flags": ["throttle", "python", "cpp"], "parameters": [{"id": "samp_rate", "label": "Sample Rate", "dtype": "int", "default": "samp_rate", "options": ["16000", "22050", "24000", "32000", "44100", "48000"], "option_labels": ["16 kHz", "22.05 kHz", "24 kHz", "32 kHz", "44.1 kHz", "48 kHz"]}, {"id": "device_name", "label": "Device Name", "dtype": "string", "hide": "${ ('none' if device_name else 'part') }"}, {"id": "ok_to_block", "label": "OK to Block", "dtype": "enum", "default": "True", "options": ["True", "False"], "option_labels": ["Yes", "No"], "hide": "part"}, {"id": "num_outputs", "label": "Num Outputs", "dtype": "int", "default": "1", "hide": "part"}], "outputs": [{"domain": "stream", "dtype": "float", "multiplicity": "${ num_outputs }"}], "asserts": ["${ 0 < num_outputs }"], "templates": {"imports": "from gnuradio import audio", "make": "audio.source(${samp_rate}, ${device_name}, ${ok_to_block})"}, "cpp_templates": {"includes": ["#include <gnuradio/audio/source.h>"], "declarations": "audio::source::sptr ${id};", "make": "this->${id} = audio::source::make(${samp_rate}, ${device_name}, ${ok_to_block});", "link": ["gnuradio-audio"], "translations": {"'": "\"", "True": "true", "False": "false"}}, "documentation": "Not all sampling rates will be supported by your hardware.\n\nLeave the device name blank to choose default audio device. ALSA users with audio trouble may try setting the device name to plughw:0,0\n\nThe audio source can have multiple outputs depending upon your hardware. For example, set the outputs to 2 for stereo audio.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ble_packet_sink.block.yml": {"id": "ble_packet_sink", "label": "packet_sink", "category": "[ble]", "templates": {"imports": "import ble", "make": "ble.packet_sink(${i_chan_nbr})"}, "parameters": [{"id": "i_chan_nbr", "label": "I_chan_nbr", "dtype": "int"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "message", "id": "out"}], "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ble_preamble.block.yml": {"id": "ble_preamble", "label": "preamble", "category": "[ble]", "templates": {"imports": "import ble", "make": "ble.preamble()"}, "inputs": [{"domain": "message", "id": "in"}], "outputs": [{"domain": "message", "id": "out"}], "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ble_whiten.block.yml": {"id": "ble_whiten", "label": "whiten", "category": "[ble]", "templates": {"imports": "import ble", "make": "ble.whiten(${chan_nbr})"}, "parameters": [{"id": "chan_nbr", "label": "chan_nbr", "dtype": "int", "default": "37"}], "inputs": [{"domain": "message", "id": "in"}], "outputs": [{"domain": "message", "id": "out"}], "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks.tree.yml": {"[Core]": [{"Audio": ["blocks_wavfile_source", "blocks_wavfile_sink"]}, {"Boolean Operators": ["blocks_and_xx", "blocks_and_const_xx", "blocks_not_xx", "blocks_or_xx", "blocks_xor_xx"]}, {"Byte Operators": ["blocks_packed_to_unpacked_xx", "blocks_unpacked_to_packed_xx", "blocks_pack_k_bits_bb", "blocks_unpack_k_bits_bb", "blocks_repack_bits_bb"]}, {"Control Port": ["blocks_ctrlport_monitor", "blocks_ctrlport_monitor_performance", "blocks_ctrlport_probe2_x", "blocks_ctrlport_probe2_c", "blocks_ctrlport_probe_c"]}, {"Debug Tools": ["blocks_vector_sink_x", "blocks_tag_debug", "blocks_message_debug", "blocks_random_pdu", "blocks_message_strobe", "blocks_message_strobe_random", "blocks_tags_strobe", "blocks_test_tag_variable_rate_ff"]}, {"File Operators": ["blocks_wavfile_source", "blocks_wavfile_sink", "blocks_file_source", "blocks_file_sink", "blocks_file_descriptor_source", "blocks_file_descriptor_sink", "blocks_file_meta_source", "blocks_file_meta_sink", "blocks_tagged_file_sink"]}, {"Level Controllers": ["blocks_mute_xx", "blocks_sample_and_hold_xx", "blocks_moving_average_xx", "blocks_threshold_ff"]}, {"Math Operators": ["blocks_abs_xx", "blocks_add_xx", "blocks_add_const_vxx", "blocks_divide_xx", "blocks_exponentiate_const_cci", "blocks_multiply_xx", "blocks_multiply_const_xx", "blocks_multiply_const_vxx", "blocks_multiply_conjugate_cc", "blocks_multiply_matrix_xx", "blocks_multiply_by_tag_value_cc", "blocks_sub_xx", "blocks_conjugate_cc", "blocks_integrate_xx", "blocks_nlog10_ff", "blocks_rms_xx", "blocks_rotator_cc", "blocks_transcendental", "blocks_argmax_xx", "blocks_max_xx", "blocks_min_xx"]}, {"Measurement Tools": ["blocks_message_debug", "blocks_tag_debug", "blocks_probe_signal_x", "blocks_probe_signal_vx", "blocks_probe_rate", "blocks_ctrlport_probe2_c", "blocks_ctrlport_probe_c"]}, {"Message Tools": ["blocks_message_strobe", "blocks_message_strobe_random", "blocks_message_debug", "blocks_pdu_filter", "blocks_pdu_remove", "blocks_pdu_set", "blocks_pdu_to_tagged_stream", "blocks_tagged_stream_multiply_length", "blocks_tagged_stream_to_pdu", "blocks_random_pdu"]}, {"Misc": ["blocks_throttle", "blocks_vector_source_x", "blocks_head", "blocks_skiphead", "blocks_delay", "blocks_null_source", "blocks_null_sink", "blocks_copy", "blocks_selector", "blocks_nop", "xmlrpc_server", "xmlrpc_client"]}, {"Modulators": ["blocks_vco_f", "blocks_vco_c"]}, {"Networking Tools": ["blocks_tuntap_pdu", "blocks_socket_pdu", "blocks_tcp_server_sink", "blocks_udp_source", "blocks_udp_sink"]}, {"Peak Detectors": ["blocks_burst_tagger", "blocks_peak_detector_xb", "blocks_peak_detector2_fb", "blocks_plateau_detector_fb"]}, {"Stream Operators": ["blocks_deinterleave", "blocks_interleave", "blocks_keep_m_in_n", "blocks_keep_one_in_n", "blocks_stream_mux", "blocks_stream_to_streams", "blocks_stream_to_vector", "blocks_streams_to_stream", "blocks_streams_to_vector", "blocks_stream_to_vector_decimator", "blocks_vector_to_stream", "blocks_vector_to_streams", "blocks_patterned_interleaver", "blocks_endian_swap", "blocks_vector_insert_x", "blocks_tagged_stream_mux", "blocks_repeat", "blocks_regenerate_bb", "blocks_stretch_ff"]}, {"Stream Tag Tools": ["blocks_tag_debug", "blocks_tag_gate", "blocks_tag_share", "blocks_tagged_file_sink", "blocks_tagged_stream_mux", "blocks_tagged_stream_align", "blocks_stream_to_tagged_stream", "blocks_test_tag_variable_rate_ff"]}, {"Type Converters": ["blocks_char_to_float", "blocks_char_to_short", "blocks_complex_to_interleaved_char", "blocks_complex_to_interleaved_short", "blocks_complex_to_float", "blocks_complex_to_magphase", "blocks_complex_to_imag", "blocks_complex_to_real", "blocks_complex_to_mag", "blocks_complex_to_mag_squared", "blocks_complex_to_arg", "blocks_float_to_char", "blocks_float_to_complex", "blocks_magphase_to_complex", "blocks_float_to_int", "blocks_float_to_short", "blocks_float_to_uchar", "blocks_int_to_float", "blocks_interleaved_short_to_complex", "blocks_interleaved_char_to_complex", "blocks_short_to_char", "blocks_short_to_float", "blocks_uchar_to_float"]}, {"Waveform Generators": ["blocks_vco_f", "blocks_vco_c"]}, {"Variables": ["variable_tag_object"]}]}, "/usr/local/share/gnuradio/grc/blocks/blocks_abs_xx.block.yml": {"id": "blocks_abs_xx", "label": "Abs", "flags": ["python", "cpp"], "parameters": [{"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "type", "label": "IO Type", "dtype": "enum", "options": ["int", "short", "float"], "option_attributes": {"fcn": ["ii", "ss", "ff"]}, "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.abs_${type.fcn}(${vlen})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/abs_blk.h>"], "declarations": "blocks::abs_${type.fcn}::sptr ${id};", "make": "this->${id} = blocks::abs_${type.fcn}::make(${vlen});"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_add_const_vxx.block.yml": {"id": "blocks_add_const_vxx", "label": "Add Const", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"vconst_type": ["complex_vector", "real_vector", "int_vector", "int_vector", "int_vector"], "const_type": ["complex", "real", "int", "int", "int"], "fcn": ["cc", "ff", "ii", "ss", "bb"]}, "hide": "part"}, {"id": "const", "label": "Constant", "dtype": "${ type.const_type if vlen == 1 else type.vconst_type }", "default": "0"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "asserts": ["${ vlen > 0 }", "${ (vlen > 1 and len(const) == vlen) or (vlen == 1) }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.add_const_${ 'v' if context.get('vlen')() > 1 else '' }${type.fcn}(${const})", "callbacks": ["set_k(${const})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/add_const_${\"v\" if context.get(\"vlen\")() > 1 else \"\"}.h>"], "declarations": "blocks::add_const_${\"v\" if context.get(\"vlen\")() > 1 else \"\"}${type.fcn}::sptr ${id};", "make": "this->${id} = blocks::add_const_${\"v\" if context.get(\"vlen\")() > 1 else \"\"}${type.fcn}::make(${const});", "callbacks": ["set_k(${const})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_add_xx.block.yml": {"id": "blocks_add_xx", "label": "Add", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["complex", "float", "int", "short"], "option_attributes": {"fcn": ["cc", "ff", "ii", "ss"]}, "hide": "part"}, {"id": "num_inputs", "label": "Num Inputs", "dtype": "int", "default": "2", "hide": "part"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }", "multiplicity": "${ num_inputs }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "asserts": ["${ num_inputs > 1 }", "${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.add_v${type.fcn}(${vlen})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/add_blk.h>"], "declarations": "blocks::add_${type.fcn}::sptr ${id};", "make": "this->${id} = blocks::add_${type.fcn}::make(${vlen});"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_and_const_xx.block.yml": {"id": "blocks_and_const_xx", "label": "And Const", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["int", "short", "byte"], "option_attributes": {"fcn": ["ii", "ss", "bb"]}, "hide": "part"}, {"id": "const", "label": "Constant", "dtype": "int", "default": "0"}], "inputs": [{"domain": "stream", "dtype": "${ type }"}], "outputs": [{"domain": "stream", "dtype": "${ type }"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.and_const_${type.fcn}(${const})", "callbacks": ["set_k(${const})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/and_const.h>"], "declarations": "blocks::and_const_${type.fcn}::sptr ${id};", "make": "this->${id} = blocks::and_const_${type.fcn}::make(${const});", "callbacks": ["set_k(${const})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_and_xx.block.yml": {"id": "blocks_and_xx", "label": "And", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["int", "short", "byte"], "option_attributes": {"fcn": ["ii", "ss", "bb"]}, "hide": "part"}, {"id": "num_inputs", "label": "Num Inputs", "dtype": "int", "default": "2", "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "multiplicity": "${ num_inputs }"}], "outputs": [{"domain": "stream", "dtype": "${ type }"}], "asserts": ["${ num_inputs >= 2 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.and_${type.fcn}()"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/and_blk.h>"], "declarations": "blocks::and_${type.fcn}::sptr ${id};", "make": "this->${id} = blocks::and_${type.fcn}::make();"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_argmax_xx.block.yml": {"id": "blocks_argmax_xx", "label": "Argmax", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["float", "int", "short"], "option_attributes": {"fcn": ["fs", "is", "dd"]}, "hide": "part"}, {"id": "num_inputs", "label": "Num Inputs", "dtype": "int", "default": "2", "hide": "part"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }", "multiplicity": "${ num_inputs }"}], "outputs": [{"label": "max_vec", "domain": "stream", "dtype": "short"}, {"label": "max_inp", "domain": "stream", "dtype": "short"}], "asserts": ["${ num_inputs >= 1 }", "${ vlen >= 1 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.argmax_${type.fcn}(${vlen})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/argmax.h>"], "declarations": "blocks::argmax_${type.fcn}::sptr ${id};", "make": "this->${id} = blocks::argmax_${type.fcn}::make(${vlen});"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_burst_tagger.block.yml": {"id": "blocks_burst_tagger", "label": "Burst Tagger", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Stream Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "true_key", "label": "True KeyID", "dtype": "string", "default": "burst"}, {"id": "true_value", "label": "True Value", "dtype": "bool", "default": "True"}, {"id": "false_key", "label": "False KeyID", "dtype": "string", "default": "burst"}, {"id": "false_value", "label": "False Value", "dtype": "bool", "default": "False"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": 1}, {"label": "trigger", "domain": "stream", "dtype": "short", "vlen": 1}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": 1}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.burst_tagger(${type.size})\nself.${id}.set_true_tag(${true_key},${true_value})\nself.${id}.set_false_tag(${false_key},${false_value})", "callbacks": ["set_true_tag(${true_key},${true_value})", "set_false_tag(${false_key},${false_value})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/burst_tagger.h>"], "declarations": "blocks::burst_tagger::sptr ${id};", "make": "this->${id} = blocks::burst_tagger::make(${type.size});\nthis->${id}.set_true_tag(${true_key},${true_value});\nthis->${id}.set_false_tag(${false_key},${false_value});\n\t", "callbacks": ["set_true_tag(${true_key},${true_value})", "set_false_tag(${false_key},${false_value})"], "translations": {"gr.sizeof_": "sizeof(", "True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_char_to_float.block.yml": {"id": "blocks_char_to_float", "label": "Char To Float", "flags": ["python", "cpp"], "parameters": [{"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "scale", "label": "Scale", "dtype": "real", "default": "1"}], "inputs": [{"domain": "stream", "dtype": "byte", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "float", "vlen": "${ vlen }"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.char_to_float(${vlen}, ${scale})", "callbacks": ["set_scale(${scale})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/char_to_float.h>"], "declarations": "blocks::char_to_float::sptr ${id};", "make": "this->${id} = blocks::char_to_float::make(${vlen}, ${scale});", "callbacks": ["set_scale(${scale})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_char_to_short.block.yml": {"id": "blocks_char_to_short", "label": "Char To Short", "flags": ["python", "cpp"], "parameters": [{"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "byte", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "short", "vlen": "${ vlen }"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.char_to_short(${vlen})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/char_to_short.h>"], "declarations": "blocks::char_to_short::sptr ${id};", "make": "this->${id} = blocks::char_to_short::make(${vlen});"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_complex_to_arg.block.yml": {"id": "blocks_complex_to_arg", "label": "Complex to Arg", "flags": ["python", "cpp"], "parameters": [{"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "complex", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "float", "vlen": "${ vlen }"}], "asserts": ["${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.complex_to_arg(${vlen})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/complex_to_arg.h>"], "declarations": "blocks::complex_to_arg::sptr ${id};", "make": "this->${id} = blocks::complex_to_arg::make(${vlen});"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_complex_to_float.block.yml": {"id": "blocks_complex_to_float", "label": "Complex To Float", "flags": ["python", "cpp"], "parameters": [{"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "complex", "vlen": "${ vlen }"}], "outputs": [{"label": "re", "domain": "stream", "dtype": "float", "vlen": "${ vlen }"}, {"label": "im", "domain": "stream", "dtype": "float", "vlen": "${ vlen }", "optional": true}], "asserts": ["${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.complex_to_float(${vlen})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/complex_to_float.h>"], "declarations": "blocks::complex_to_float::sptr ${id};", "make": "this->${id} = blocks::complex_to_float::make(${vlen});"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_complex_to_imag.block.yml": {"id": "blocks_complex_to_imag", "label": "Complex to Imag", "flags": ["python", "cpp"], "parameters": [{"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "complex", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "float", "vlen": "${ vlen }"}], "asserts": ["${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.complex_to_imag(${vlen})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/complex_to_imag.h>"], "declarations": "blocks::complex_to_imag::sptr ${id};", "make": "this->${id} = blocks::complex_to_imag::make(${vlen});"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_complex_to_interleaved_char.block.yml": {"id": "blocks_complex_to_interleaved_char", "label": "Complex To IChar", "flags": ["python", "cpp"], "parameters": [{"id": "vector_output", "label": "Vector Output", "dtype": "enum", "default": "False", "options": ["False", "True"], "option_labels": ["No", "Yes"], "option_attributes": {"vlen": [1, 2]}}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "byte", "vlen": "${ vector_output.vlen }"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.complex_to_interleaved_char(${vector_output})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/complex_to_interleaved_char.h>"], "declarations": "blocks::complex_to_interleaved_char::sptr ${id};", "make": "this->${id} = blocks::complex_to_interleaved_char::make(${vector_output});", "translations": {"True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_complex_to_interleaved_short.block.yml": {"id": "blocks_complex_to_interleaved_short", "label": "Complex To IShort", "flags": ["python", "cpp"], "parameters": [{"id": "vector_output", "label": "Vector Output", "dtype": "enum", "default": "False", "options": ["False", "True"], "option_labels": ["No", "Yes"], "option_attributes": {"vlen": [1, 2]}}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "short", "vlen": "${ vector_output.vlen }"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.complex_to_interleaved_short(${vector_output})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/complex_to_interleaved_short.h>"], "declarations": "blocks::complex_to_interleaved_short::sptr ${id};", "make": "this->${id} = blocks::complex_to_interleaved_short::make(${vector_output});", "translations": {"True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_complex_to_mag.block.yml": {"id": "blocks_complex_to_mag", "label": "Complex to Mag", "flags": ["python", "cpp"], "parameters": [{"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "complex", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "float", "vlen": "${ vlen }"}], "asserts": ["${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.complex_to_mag(${vlen})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/complex_to_mag.h>"], "declarations": "blocks::complex_to_mag::sptr ${id};", "make": "this->${id} = blocks::complex_to_mag::make(${vlen});"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_complex_to_mag_squared.block.yml": {"id": "blocks_complex_to_mag_squared", "label": "Complex to Mag^2", "flags": ["python", "cpp"], "parameters": [{"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "complex", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "float", "vlen": "${ vlen }"}], "asserts": ["${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.complex_to_mag_squared(${vlen})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/complex_to_mag_squared.h>"], "declarations": "blocks::complex_to_mag_squared::sptr ${id};", "make": "this->${id} = blocks::complex_to_mag_squared::make(${vlen});"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_complex_to_magphase.block.yml": {"id": "blocks_complex_to_magphase", "label": "Complex To Mag Phase", "flags": ["python", "cpp"], "parameters": [{"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "complex", "vlen": "${ vlen }"}], "outputs": [{"label": "mag", "domain": "stream", "dtype": "float", "vlen": "${ vlen }"}, {"label": "phase", "domain": "stream", "dtype": "float", "vlen": "${ vlen }", "optional": true}], "asserts": ["${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.complex_to_magphase(${vlen})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/complex_to_magphase.h>"], "declarations": "blocks::complex_to_magphase::sptr ${id};", "make": "this->${id} = blocks::complex_to_magphase::make(${vlen});"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_complex_to_real.block.yml": {"id": "blocks_complex_to_real", "label": "Complex To Real", "flags": ["python", "cpp"], "parameters": [{"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "complex", "vlen": "${ vlen }"}], "outputs": [{"label": "re", "domain": "stream", "dtype": "float", "vlen": "${ vlen }"}], "asserts": ["${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.complex_to_real(${vlen})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/complex_to_real.h>"], "declarations": "blocks::complex_to_real::sptr ${id};", "make": "this->${id} = blocks::complex_to_real::make(${vlen});"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_conjugate_cc.block.yml": {"id": "blocks_conjugate_cc", "label": "Complex Conjugate", "flags": ["python", "cpp"], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.conjugate_cc()"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/conjugate_cc.h>"], "declarations": "blocks::conjugate_cc::sptr ${id};", "make": "this->${id} = blocks::conjugate_cc::make();"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_copy.block.yml": {"id": "blocks_copy", "label": "Copy", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "enabled", "label": "Enabled", "dtype": "bool", "default": "True", "options": ["True", "False"], "option_labels": ["Enabled", "Disabled"]}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "showports", "label": "Show Msg Ports", "dtype": "bool", "default": "False", "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}, {"domain": "message", "id": "en", "optional": true, "hide": "${ not showports }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "asserts": ["${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.copy(${type.size}*${vlen})\nself.${id}.set_enabled(${enabled})", "callbacks": ["set_enabled(${enabled})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/copy.h>"], "declarations": "blocks::copy::sptr ${id};", "make": "this->${id} = blocks::copy::make(${type.size}*${vlen});\nself->${id}.set_enabled(${enabled});", "callbacks": ["set_enabled(${enabled})"], "translations": {"gr.sizeof_": "sizeof(", "True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_ctrlport_performance.block.yml": {"id": "blocks_ctrlport_monitor_performance", "label": "CtrlPort Performance Monitor", "flags": ["python"], "parameters": [{"id": "en", "label": "Enabled", "dtype": "bool", "default": "True"}], "templates": {"imports": "from gnuradio.ctrlport.monitor import *", "make": "not ${en} or monitor(\"gr-perf-monitorx\")"}, "documentation": "Place this in a graph to launch a QtPy GR CtrlPort Performance Monitor app.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_ctrlport_probe2_c.block.yml": {"id": "blocks_ctrlport_probe2_c", "label": "Ctrlport Probe", "flags": ["python", "cpp"], "parameters": [{"id": "name", "label": "Name", "dtype": "string", "default": "samples"}, {"id": "desc", "label": "Description", "dtype": "string", "default": "Sample Points"}, {"id": "len", "label": "Length", "dtype": "int", "default": "1024"}, {"id": "disp_mask", "label": "Display Mask", "dtype": "int", "default": "gr.DISPTIME", "options": ["gr.DISPXY | gr.DISPOPTSCATTER", "gr.DISPTIME", "gr.DISPPSD", "gr.DISPSPEC", "gr.DISPRAST"], "option_labels": ["Constellation", "Time", "PSD", "Spectrogram", "Raster"]}], "inputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.ctrlport_probe2_c(${name}, ${desc}, ${len}, ${disp_mask})", "callbacks": ["set_length(${len})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/ctrlport_probe2_c.h>"], "declarations": "blocks::ctrlport_probe2_c::sptr ${id};", "make": "this->${id} = blocks::ctrlport_probe2_c::make(${name}, ${desc}, ${len}, ${disp_mask});", "callbacks": ["set_length(${len})"], "translations": {"gr.": ""}}, "documentation": "Place this in a graph to export vectors of samples to a GRCP port probe.\n\n    * Specify the number of samples to transmit at once and the type\n    of default display to use.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_ctrlport_probe2_x.block.yml": {"id": "blocks_ctrlport_probe2_x", "label": "Ctrlport Probe", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Input Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"fcn": ["c", "f", "i", "s", "b"]}, "hide": "part"}, {"id": "name", "label": "Name", "dtype": "string", "default": "samples"}, {"id": "desc", "label": "Description", "dtype": "string", "default": "Sample Points"}, {"id": "len", "label": "Length", "dtype": "int", "default": "1024"}, {"id": "disp_mask", "label": "Display Mask", "dtype": "int", "default": "gr.DISPTIME", "options": ["gr.DISPXY | gr.DISPOPTSCATTER", "gr.DISPTIME", "gr.DISPPSD", "gr.DISPSPEC", "gr.DISPRAST"], "option_labels": ["Constellation", "Time", "PSD", "Spectrogram", "Raster"]}], "inputs": [{"domain": "stream", "dtype": "${ type }"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.ctrlport_probe2_${type.fcn}(${name}, ${desc}, ${len}, ${disp_mask})", "callbacks": ["set_length(${len})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/ctrlport_probe2_${type.fcn}.h>"], "declarations": "blocks::ctrlport_probe2_${type.fcn}::sptr ${id};", "make": "this->${id} = blocks::ctrlport_probe2_${type.fcn}::make(${name}, ${desc}, ${len}, ${disp_mask});", "callbacks": ["set_length(${len})"], "translations": {"gr.": ""}}, "documentation": "Place this in a graph to export vectors of samples to a GRCP port probe.\n\n    * Specify the number of samples to transmit at once and the type\n    of default display to use.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_ctrlport_probe_c.block.yml": {"id": "blocks_ctrlport_probe_c", "label": "Ctrlport Complex Probe", "flags": ["python", "cpp"], "parameters": [{"id": "name", "label": "Name", "dtype": "string", "default": "constellation"}, {"id": "desc", "label": "Description", "dtype": "string", "default": "Constellation Points"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.ctrlport_probe_c(${name}, ${desc})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/ctrlport_probe_c.h>"], "declarations": "blocks::ctrlport_probe_c::sptr ${id};", "make": "this->${id} = blocks::ctrlport_probe_c::make(${name}, ${desc});"}, "documentation": "Place this in a graph to export complex values to a GRCP port probe.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_ctrlport_viewer.block.yml": {"id": "blocks_ctrlport_monitor", "label": "CtrlPort Monitor", "flags": ["python"], "parameters": [{"id": "en", "label": "Enabled", "dtype": "bool", "default": "True"}], "templates": {"imports": "from gnuradio.ctrlport.monitor import *", "make": "not ${en} or monitor()"}, "documentation": "Place this in a graph to launch a QtPy GR CtrlPort Monitor app.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_deinterleave.block.yml": {"id": "blocks_deinterleave", "label": "Deinterleave", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "num_streams", "label": "Num Streams", "dtype": "int", "default": "2", "hide": "part"}, {"id": "blocksize", "label": "Block Size", "dtype": "int", "default": "1", "hide": "part"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }", "multiplicity": "${ num_streams }"}], "asserts": ["${ num_streams > 0 }", "${ vlen >= 1 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.deinterleave(${type.size}*${vlen}, ${blocksize})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/deinterleave.h>"], "declarations": "blocks::deinterleave::sptr ${id};", "make": "this->${id} = blocks::deinterleave::make(${type.size}*${vlen}, ${blocksize});", "translations": {"gr.sizeof_": "sizeof("}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_delay.block.yml": {"id": "blocks_delay", "label": "Delay", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "delay", "label": "Delay", "dtype": "int", "default": "0"}, {"id": "num_ports", "label": "Num Ports", "dtype": "int", "default": "1", "hide": "part"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }", "multiplicity": "${ num_ports }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }", "multiplicity": "${ num_ports }"}], "asserts": ["${ num_ports > 0 }", "${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.delay(${type.size}*${vlen}, ${delay})", "callbacks": ["set_dly(${delay})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/delay.h>"], "declarations": "blocks::delay::sptr ${id};", "make": "this->${id} = blocks::delay::make(${type.size}*${vlen}, ${delay});", "callbacks": ["set_dly(${delay})"], "translations": {"gr.sizeof_": "sizeof("}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_divide_XX.block.yml": {"id": "blocks_divide_xx", "label": "Divide", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["complex", "float", "int", "short"], "option_attributes": {"fcn": ["cc", "ff", "ii", "ss"]}, "hide": "part"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "num_inputs", "label": "Num Inputs", "dtype": "int", "default": "2", "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }", "multiplicity": "${ num_inputs }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "asserts": ["${ vlen > 0 }", "${ num_inputs >= 2 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.divide_${type.fcn}(${vlen})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/divide.h>"], "declarations": "blocks::divide_${type.fcn}::sptr ${id};", "make": "this->${id} = blocks::divide_${type.fcn}::make(${vlen});"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_endian_swap.block.yml": {"id": "blocks_endian_swap", "label": "Endian Swap", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["complex", "s32", "s16"], "option_labels": ["Complex", "Int", "Short"], "option_attributes": {"size": ["8", "4", "2"]}, "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "${ type }"}], "outputs": [{"domain": "stream", "dtype": "${ type }"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.endian_swap(${type.size})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/endian_swap.h>"], "declarations": "blocks::endian_swap::sptr ${id};", "make": "this->${id} = blocks::endian_swap::make(${type.size});"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_exponentiate_const_cci.block.yml": {"id": "blocks_exponentiate_const_cci", "label": "Exponentiate Const Int", "flags": ["python", "cpp"], "parameters": [{"id": "num_ports", "label": "Num Ports", "dtype": "int", "default": "1", "hide": "part"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "exponent", "label": "Exponent", "dtype": "int", "default": "1"}], "inputs": [{"domain": "stream", "dtype": "complex", "vlen": "${ vlen }", "multiplicity": "${ num_ports }"}], "outputs": [{"domain": "stream", "dtype": "complex", "vlen": "${ vlen }", "multiplicity": "${ num_ports }"}], "asserts": ["${ num_ports > 0 }", "${ vlen > 0 }", "${ exponent > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.exponentiate_const_cci(${exponent}, ${vlen})", "callbacks": ["set_exponent(${exponent})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/exponentiate_const_cci.h>"], "declarations": "blocks::exponentiate_const_cci::sptr ${id};", "make": "this->${id} = blocks::exponentiate_const_cci::make(${exponent}, ${vlen});", "callbacks": ["set_exponent(${exponent})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_file_descriptor_sink.block.yml": {"id": "blocks_file_descriptor_sink", "label": "File Descriptor Sink", "flags": ["python", "cpp"], "parameters": [{"id": "fd", "label": "File Descriptor", "dtype": "int"}, {"id": "type", "label": "Input Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "asserts": ["${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.file_descriptor_sink(${type.size}*${vlen}, ${fd})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/file_descriptor_sink.h>"], "declarations": "blocks::file_descriptor_sink::sptr ${id};", "make": "this->${id} = blocks::file_descriptor_sink::make(${type.size}*${vlen}, ${fd});", "translations": {"gr.sizeof_": "sizeof("}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_file_descriptor_source.block.yml": {"id": "blocks_file_descriptor_source", "label": "File Descriptor Source", "flags": ["python", "cpp"], "parameters": [{"id": "fd", "label": "File Descriptor", "dtype": "int"}, {"id": "type", "label": "Output Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "repeat", "label": "Repeat", "dtype": "enum", "default": "True", "options": ["True", "False"], "option_labels": ["Yes", "No"]}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.file_descriptor_source(${type.size}*${vlen}, ${fd}, ${repeat})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/file_descriptor_source.h>"], "declarations": "blocks::file_descriptor_source::sptr ${id};", "make": "this->${id} = blocks::file_descriptor_source::make(${type.size}*${vlen}, ${fd}, ${repeat});", "translations": {"gr.sizeof_": "sizeof(", "True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_file_meta_sink.block.yml": {"id": "blocks_file_meta_sink", "label": "File Meta Sink", "flags": ["python"], "parameters": [{"id": "file", "label": "File", "dtype": "file_save"}, {"id": "type", "label": "Input Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"cplx": ["True", "False", "False", "False", "False"], "dtype": ["blocks.GR_FILE_FLOAT", "blocks.GR_FILE_FLOAT", "blocks.GR_FILE_INT", "blocks.GR_FILE_SHORT", "blocks.GR_FILE_BYTE"], "size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "samp_rate", "label": "Sample Rate", "dtype": "real", "default": "samp_rate"}, {"id": "rel_rate", "label": "Relative Rate Change", "dtype": "real", "default": "1"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "max_seg_size", "label": "Max Seg. Size", "dtype": "int", "default": "1000000"}, {"id": "extra_dict", "label": "Extra Dict.", "dtype": "raw", "default": "\"\""}, {"id": "detached", "label": "Detached", "dtype": "bool", "default": "False", "options": ["False", "True"], "option_labels": ["Off", "On"]}, {"id": "unbuffered", "label": "Unbuffered", "dtype": "bool", "default": "False", "options": ["False", "True"], "option_labels": ["Off", "On"]}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "asserts": ["${ vlen > 0 }"], "templates": {"imports": "from gnuradio import gr, blocks", "make": "blocks.file_meta_sink(${type.size}*${vlen}, ${file}, ${samp_rate}, ${rel_rate}, ${type.dtype}, ${type.cplx}, ${max_seg_size}, ${extra_dict}, ${detached})\nself.${id}.set_unbuffered(${unbuffered})", "callbacks": ["set_unbuffered(${unbuffered})", "open(${file})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_file_meta_source.block.yml": {"id": "blocks_file_meta_source", "label": "File Meta Source", "flags": ["python"], "parameters": [{"id": "type", "label": "Output Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "file", "label": "File", "dtype": "file_open"}, {"id": "repeat", "label": "Repeat", "dtype": "enum", "default": "True", "options": ["True", "False"], "option_labels": ["Yes", "No"]}, {"id": "detached", "label": "Detached Header", "dtype": "enum", "default": "False", "options": ["True", "False"], "option_labels": ["Yes", "No"]}, {"id": "hdr_file", "label": "Header File", "dtype": "file_open"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "templates": {"imports": "from gnuradio import gr, blocks", "make": "blocks.file_meta_source(${file}, ${repeat}, ${detached}, ${hdr_file})", "callbacks": ["open(${file}, ${repeat})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_file_sink.block.yml": {"id": "blocks_file_sink", "label": "File Sink", "flags": ["python", "cpp"], "parameters": [{"id": "file", "label": "File", "dtype": "file_save"}, {"id": "type", "label": "Input Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "unbuffered", "label": "Unbuffered", "dtype": "bool", "default": "False", "options": ["False", "True"], "option_labels": ["Off", "On"]}, {"id": "append", "label": "Append file", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["Append", "Overwrite"]}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "asserts": ["${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.file_sink(${type.size}*${vlen}, ${file}, ${append})\nself.${id}.set_unbuffered(${unbuffered})", "callbacks": ["set_unbuffered(${unbuffered})", "open(${file})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/file_sink.h>"], "declarations": "blocks::file_sink::sptr ${id};", "make": "this->${id} = blocks::file_sink::make(${type.size})*${vlen}, ${file}, ${append});", "callbacks": ["open(${file})"], "translations": {"True": "true", "False": "false", "gr.sizeof_": "sizeof("}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_file_source.block.yml": {"id": "blocks_file_source", "label": "File Source", "flags": ["python", "cpp"], "parameters": [{"id": "file", "label": "File", "dtype": "file_open"}, {"id": "type", "label": "Output Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "repeat", "label": "Repeat", "dtype": "enum", "default": "True", "options": ["True", "False"], "option_labels": ["Yes", "No"]}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "begin_tag", "label": "Add begin tag", "dtype": "raw", "default": "pmt.PMT_NIL"}, {"id": "offset", "label": "Offset", "dtype": "int", "default": "0"}, {"id": "length", "label": "Length", "dtype": "int", "default": "0"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "asserts": ["${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks\nimport pmt", "make": "blocks.file_source(${type.size}*${vlen}, ${file}, ${repeat}, ${offset}, ${length})\nself.${id}.set_begin_tag(${begin_tag})", "callbacks": ["open(${file}, ${repeat})", "self.${id}.set_begin_tag(${begin_tag})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/file_source.h>"], "declarations": "blocks::file_source::sptr ${id};", "make": "this->${id} =blocks::file_source::make(${type.size})*${vlen}, \"${file[1:-1]}\", ${repeat}, ${offset}, ${length});", "callbacks": ["open(${file}, ${repeat})"], "translations": {"True": "true", "False": "false", "gr.sizeof_": "sizeof("}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_float_to_char.block.yml": {"id": "blocks_float_to_char", "label": "Float To Char", "flags": ["python", "cpp"], "parameters": [{"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "scale", "label": "Scale", "dtype": "real", "default": "1"}], "inputs": [{"domain": "stream", "dtype": "float", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "byte", "vlen": "${ vlen }"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.float_to_char(${vlen}, ${scale})", "callbacks": ["set_scale(${scale})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/float_to_char.h>"], "declarations": "blocks::float_to_char::sptr ${id};", "make": "this->${id} = blocks::float_to_char::make(${vlen}, ${scale});", "callbacks": ["set_scale(${scale})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_float_to_complex.block.yml": {"id": "blocks_float_to_complex", "label": "Float To Complex", "flags": ["python", "cpp"], "parameters": [{"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"label": "re", "domain": "stream", "dtype": "float", "vlen": "${ vlen }"}, {"label": "im", "domain": "stream", "dtype": "float", "vlen": "${ vlen }", "optional": true}], "outputs": [{"domain": "stream", "dtype": "complex", "vlen": "${ vlen }"}], "asserts": ["${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.float_to_complex(${vlen})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/float_to_complex.h>"], "declarations": "blocks::float_to_complex::sptr ${id};", "make": "this->${id} = blocks::float_to_complex::make(${vlen});"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_float_to_int.block.yml": {"id": "blocks_float_to_int", "label": "Float To Int", "flags": ["python", "cpp"], "parameters": [{"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "scale", "label": "Scale", "dtype": "real", "default": "1"}], "inputs": [{"domain": "stream", "dtype": "float", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "int", "vlen": "${ vlen }"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.float_to_int(${vlen}, ${scale})", "callbacks": ["set_scale(${scale})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/float_to_int.h>"], "declarations": "blocks::float_to_int::sptr ${id};", "make": "this->${id} = blocks::float_to_int::make(${vlen}, ${scale});", "callbacks": ["set_scale(${scale})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_float_to_short.block.yml": {"id": "blocks_float_to_short", "label": "Float To Short", "flags": ["python", "cpp"], "parameters": [{"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "scale", "label": "Scale", "dtype": "real", "default": "1"}], "inputs": [{"domain": "stream", "dtype": "float", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "short", "vlen": "${ vlen }"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.float_to_short(${vlen}, ${scale})", "callbacks": ["set_scale(${scale})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/float_to_short.h>"], "declarations": "blocks::float_to_short::sptr ${id};", "make": "this->${id} = blocks::float_to_short::make(${vlen}, ${scale});", "callbacks": ["set_scale(${scale})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_float_uchar.block.yml": {"id": "blocks_float_to_uchar", "label": "Float To UChar", "flags": ["python", "cpp"], "inputs": [{"domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.float_to_uchar()"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/float_to_uchar.h>"], "declarations": "blocks::float_to_uchar::sptr ${id};", "make": "this->${id} = blocks::float_to_uchar::make();"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_head.block.yml": {"id": "blocks_head", "label": "Head", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "num_items", "label": "Num Items", "dtype": "int", "default": "1024"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "asserts": ["${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.head(${type.size}*${vlen}, ${num_items})", "callbacks": ["set_length(${num_items})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/head.h>"], "declarations": "blocks::head::sptr ${id};", "make": "this->${id} = blocks::head::make(${type.size}*${vlen}, ${num_items});", "callbacks": ["set_length(${num_items})"], "translations": {"gr.sizeof_": "sizeof("}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_int_to_float.block.yml": {"id": "blocks_int_to_float", "label": "Int To Float", "flags": ["python", "cpp"], "parameters": [{"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "scale", "label": "Scale", "dtype": "real", "default": "1"}], "inputs": [{"domain": "stream", "dtype": "int", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "float", "vlen": "${ vlen }"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.int_to_float(${vlen}, ${scale})", "callbacks": ["set_scale(${scale})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/int_to_float.h>"], "declarations": "blocks::int_to_float::sptr ${id};", "make": "this->${id} = blocks::int_to_float::make(${vlen}, ${scale});", "callbacks": ["set_scale(${scale})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_integrate_xx.block.yml": {"id": "blocks_integrate_xx", "label": "Integrate", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["complex", "float", "int", "short"], "option_attributes": {"fcn": ["cc", "ff", "ii", "ss"]}, "hide": "part"}, {"id": "decim", "label": "Decimation", "dtype": "int"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.integrate_${type.fcn}(${decim}, ${vlen})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/integrate.h>"], "declarations": "blocks::integrate_${type.fcn}::sptr ${id};", "make": "this->${id} = blocks::integrate_${type.fcn}::make(${decim}, ${vlen});"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_interleave.block.yml": {"id": "blocks_interleave", "label": "Interleave", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "num_streams", "label": "Num Streams", "dtype": "int", "default": "2", "hide": "part"}, {"id": "blocksize", "label": "Block Size", "dtype": "int", "default": "1", "hide": "part"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }", "multiplicity": "${ num_streams }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "asserts": ["${ num_streams > 0 }", "${ vlen >= 1 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.interleave(${type.size}*${vlen}, ${blocksize})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/interleave.h>"], "declarations": "blocks::interleave::sptr ${id};", "make": "this->${id} = blocks::interleave::make(${type.size}*${vlen}, ${blocksize});", "translations": {"gr.sizeof_": "sizeof("}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_interleaved_char_to_complex.block.yml": {"id": "blocks_interleaved_char_to_complex", "label": "IChar To Complex", "flags": ["python", "cpp"], "parameters": [{"id": "vector_input", "label": "Vector Input", "dtype": "enum", "default": "False", "options": ["False", "True"], "option_labels": ["No", "Yes"], "option_attributes": {"vlen": [1, 2]}}], "inputs": [{"domain": "stream", "dtype": "byte", "vlen": "${ vector_input.vlen }"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.interleaved_char_to_complex(${vector_input})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/interleaved_char_to_complex.h>"], "declarations": "blocks::interleaved_char_to_complex::sptr ${id};", "make": "this->${id} = blocks::interleaved_char_to_complex::make(${vector_input});", "translations": {"True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_interleaved_short_to_complex.block.yml": {"id": "blocks_interleaved_short_to_complex", "label": "IShort To Complex", "flags": ["python", "cpp"], "parameters": [{"id": "vector_input", "label": "Vector Input", "dtype": "enum", "default": "False", "options": ["False", "True"], "option_labels": ["No", "Yes"], "option_attributes": {"vlen": [1, 2]}}, {"id": "swap", "label": "Swap", "dtype": "enum", "default": "False", "options": ["True", "False"], "option_labels": ["Yes", "No"], "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "short", "vlen": "${ vector_input.vlen }"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.interleaved_short_to_complex(${vector_input}, ${swap})", "callbacks": ["set_swap(${swap})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/interleaved_short_to_complex.h>"], "declarations": "blocks::interleaved_short_to_complex::sptr ${id};", "make": "this->${id} = blocks::interleaved_short_to_complex::make(${vector_input}, ${swap});", "callbacks": ["set_swap(${swap})"], "translations": {"True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_keep_m_in_n.block.yml": {"id": "blocks_keep_m_in_n", "label": "Keep M in N", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "m", "label": "M", "dtype": "int", "default": "1"}, {"id": "n", "label": "N", "dtype": "int", "default": "2"}, {"id": "offset", "label": "initial offset", "dtype": "int", "default": "0"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": 1}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": 1}], "asserts": ["${ n > 0 }", "${ m > 0 }", "${ m <= n }", "${ offset >= 0 }", "${ offset < n }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.keep_m_in_n(${type.size}, ${m}, ${n}, ${offset})", "callbacks": ["set_offset(${offset})", "set_m(${m})", "set_n(${n})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/keep_m_in_n.h>"], "declarations": "blocks::keep_m_in_n::sptr ${id};", "make": "this->${id} = blocks::keep_m_in_n::make(${type.size}, ${m}, ${n}, ${offset});", "callbacks": ["set_offset(${offset})", "set_m(${m})", "set_n(${n})"], "translations": {"gr.sizeof_": "sizeof("}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_keep_one_in_n.block.yml": {"id": "blocks_keep_one_in_n", "label": "Keep 1 in N", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "n", "label": "N", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "asserts": ["${ n > 0 }", "${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.keep_one_in_n(${type.size}*${vlen}, ${n})", "callbacks": ["set_n(${n})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/keep_one_in_n.h>"], "declarations": "blocks::keep_one_in_n::sptr ${id};", "make": "this->${id} = blocks::keep_one_in_n::make(${type.size}*${vlen}, ${n});", "callbacks": ["set_n(${n})"], "translations": {"gr.sizeof_": "sizeof("}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_magphase_to_complex.block.yml": {"id": "blocks_magphase_to_complex", "label": "Magnitude and Phase To Complex", "flags": ["python", "cpp"], "parameters": [{"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"label": "mag", "domain": "stream", "dtype": "float", "vlen": "${ vlen }"}, {"label": "phase", "domain": "stream", "dtype": "float", "vlen": "${ vlen }", "optional": true}], "outputs": [{"domain": "stream", "dtype": "complex", "vlen": "${ vlen }"}], "asserts": ["${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.magphase_to_complex(${vlen})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/magphase_to_complex.h>"], "declarations": "blocks::magphase_to_complex::sptr ${id};", "make": "this->${id} = blocks::magphase_to_complex::make(${vlen});"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_max_xx.block.yml": {"id": "blocks_max_xx", "label": "Max", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["float", "int", "short"], "option_attributes": {"fcn": ["ff", "ii", "ss"]}, "hide": "part"}, {"id": "num_inputs", "label": "Num Inputs", "dtype": "int", "default": "1", "hide": "part"}, {"id": "vlen", "label": "Input Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "vlen_out", "label": "Output Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }", "multiplicity": "${ num_inputs }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen_out }"}], "asserts": ["${ num_inputs >= 1 }", "${ vlen >= 1 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.max_${type.fcn}(${vlen}, ${vlen_out})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/max_blk.h>"], "declarations": "blocks::max_${type.fcn}::sptr ${id};", "make": "this->${id} = blocks::make_${type.fcn}::make(${vlen}, ${vlen_out});"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_message_debug.block.yml": {"id": "blocks_message_debug", "label": "Message Debug", "flags": ["python", "cpp"], "inputs": [{"domain": "message", "id": "print", "optional": true}, {"domain": "message", "id": "store", "optional": true}, {"domain": "message", "id": "print_pdu", "optional": true}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.message_debug()"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/message_debug.h>"], "declarations": "blocks::message_debug::sptr ${id};", "make": "this->${id} = blocks::message_debug::make();"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_message_strobe.block.yml": {"id": "blocks_message_strobe", "label": "Message Strobe", "flags": ["python"], "parameters": [{"id": "msg", "label": "Message PMT", "dtype": "raw", "default": "pmt.intern(\"TEST\")"}, {"id": "period", "label": "Period (ms)", "dtype": "int", "default": "1000"}], "inputs": [{"domain": "message", "id": "set_msg", "optional": true}], "outputs": [{"domain": "message", "id": "strobe", "optional": true}], "templates": {"imports": "from gnuradio import blocks\nimport pmt", "make": "blocks.message_strobe(${msg}, ${period})", "callbacks": ["set_msg(${msg})", "set_period(${period})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_message_strobe_random.block.yml": {"id": "blocks_message_strobe_random", "label": "Message Strobe Random-Delay", "flags": ["python"], "parameters": [{"id": "msg", "label": "Message PMT", "dtype": "raw", "default": "pmt.intern(\"TEST\")"}, {"id": "dist", "label": "Distribution", "dtype": "enum", "options": ["blocks.STROBE_POISSON", "blocks.STROBE_UNIFORM", "blocks.STROBE_GAUSSIAN"], "option_labels": ["Poisson", "Uniform", "Gaussian"]}, {"id": "mean", "label": "Mean (ms)", "dtype": "real", "default": "1000"}, {"id": "std", "label": "Std (ms)", "dtype": "real", "default": "100"}], "inputs": [{"domain": "message", "id": "set_msg", "optional": true}], "outputs": [{"domain": "message", "id": "strobe", "optional": true}], "templates": {"imports": "from gnuradio import blocks\nimport pmt", "make": "blocks.message_strobe_random(${msg}, ${dist}, ${mean}, ${std})", "callbacks": ["set_msg(${msg})", "set_dist(${dist})", "set_mean(${mean})", "set_std(${std})"]}, "documentation": "Please note some peculiarities below:\n            - poisson does not care about your std\n            - gaussian operates as expected\n            - uniform is actually of the range (mean-std, mean+std) - thus we are lying and it is not actually an std here", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_min_xx.block.yml": {"id": "blocks_min_xx", "label": "Min", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["float", "int", "short"], "option_attributes": {"fcn": ["ff", "ii", "ss"]}, "hide": "part"}, {"id": "num_inputs", "label": "Num Inputs", "dtype": "int", "default": "1", "hide": "part"}, {"id": "vlen", "label": "Input Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "vlen_out", "label": "Output Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }", "multiplicity": "${ num_inputs }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen_out }"}], "asserts": ["${ num_inputs >= 1 }", "${ vlen >= 1 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.min_${type.fcn}(${vlen},${vlen_out})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/min_blk.h>"], "declarations": "blocks::min_${type.fcn}::sptr ${id};", "make": "this->${id} = blocks::min_${type.fcn}::make(${vlen},${vlen_out});"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_moving_average_xx.block.yml": {"id": "blocks_moving_average_xx", "label": "Moving Average", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["complex", "float", "int", "short"], "option_attributes": {"fcn": ["cc", "ff", "ii", "ss"], "scale": ["complex", "real", "int", "int"]}, "hide": "part"}, {"id": "length", "label": "Length", "dtype": "int", "default": "1000"}, {"id": "scale", "label": "Scale", "dtype": "${ type.scale }", "default": "1"}, {"id": "max_iter", "label": "Max Iter", "dtype": "int", "default": "4000"}, {"id": "vlen", "label": "Length of Vectors", "dtype": "int", "default": 1}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "asserts": ["${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.moving_average_${type.fcn}(${length}, ${scale}, ${max_iter}, ${vlen})", "callbacks": ["set_length_and_scale(${length}, ${scale})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/moving_average.h>"], "declarations": "blocks::moving_average_${type.fcn}::sptr ${id};", "make": "this->${id} = blocks::moving_average_${type.fcn}::make(${length}, ${scale}, ${max_iter}, ${vlen});", "callbacks": ["set_length_and_scale(${length}, ${scale})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_multiply_by_tag_value_cc.block.yml": {"id": "blocks_multiply_by_tag_value_cc", "label": "Multiply by Tag Value", "flags": ["python", "cpp"], "parameters": [{"id": "tagname", "label": "Tag Name", "dtype": "string"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.multiply_by_tag_value_cc(${tagname}, ${vlen})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/multiply_by_tag_value_cc.h>"], "declarations": "blocks::multiply_by_tag_value_cc::sptr ${id};", "make": "this->${id} = blocks::multiply_by_tag_value_cc::make(${tagname}, ${vlen});"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_multiply_conjugate_cc.block.yml": {"id": "blocks_multiply_conjugate_cc", "label": "Multiply Conjugate", "flags": ["python", "cpp"], "parameters": [{"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"label": "in0", "domain": "stream", "dtype": "complex", "vlen": "${ vlen }"}, {"label": "in1", "domain": "stream", "dtype": "complex", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "complex", "vlen": "${ vlen }"}], "asserts": ["${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.multiply_conjugate_cc(${vlen})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/multiply_conjugate_cc.h>"], "declarations": "blocks::multiply_conjugate_cc::sptr ${id};", "make": "this->${id} = blocks::multiply_conjugate_cc::make(${vlen});"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_multiply_const_vxx.block.yml": {"id": "blocks_multiply_const_vxx", "label": "Multiply Const", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["complex", "float", "int", "short"], "option_attributes": {"vconst_type": ["complex_vector", "real_vector", "int_vector", "int_vector"], "const_type": ["complex", "real", "int", "int"], "fcn": ["cc", "ff", "ii", "ss"]}, "hide": "part"}, {"id": "const", "label": "Constant", "dtype": "${ type.const_type if vlen == 1 else type.vconst_type }", "default": "1"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "asserts": ["${ vlen > 0 }", "${ (vlen > 1 and len(const) == vlen) or (vlen == 1) }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.multiply_const_${ 'v' if context.get('vlen')() > 1 else '' }${type.fcn}(${const})", "callbacks": ["set_k(${const})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/multiply_const${\"_v\" if context.get(\"vlen\")() > 1 else \"\" }.h>"], "declarations": "blocks::multiply_const_${\"v\" if context.get(\"vlen\")() > 1 else \"\" }${type.fcn}::sptr ${id};", "make": "this->${id} = blocks::multiply_const_${\"v\" if context.get(\"vlen\")() > 1 else \"\" }${type.fcn}::make(${const});", "callbacks": ["set_k(${const})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_multiply_const_xx.block.yml": {"id": "blocks_multiply_const_xx", "label": "Fast Multiply Const", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["complex", "float", "int", "short"], "option_attributes": {"fcn": ["cc", "ff", "ii", "ss"], "const_type": ["complex", "float", "int", "int"]}, "hide": "part"}, {"id": "const", "label": "Constant", "dtype": "${ type.const_type }", "default": "0"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "asserts": ["${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.multiply_const_${type.fcn}(${const}, ${vlen})", "callbacks": ["set_k(${const})"]}, "cpp_templates": {"includes": ["#include <gnuradio/multiply_const.h>"], "declarations": "blocks::multiply_const_${type.fcn}::sptr ${id};", "make": "this->${id} = blocks::multiply_const_${type.fcn}::make(${const}, ${vlen});", "callbacks": ["set_k(${const})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_multiply_matrix_xx.block.yml": {"id": "blocks_multiply_matrix_xx", "label": "Multiply by Matrix", "flags": ["python"], "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["float", "complex"], "option_attributes": {"fcn": ["ff", "cc"]}, "hide": "part"}, {"id": "A", "label": "Matrix A", "dtype": "raw", "default": "((1, 0), (0, 1))", "hide": "part"}, {"id": "tag_propagation_policy", "label": "TPP", "dtype": "enum", "options": ["gr.TPP_ALL_TO_ALL", "gr.TPP_ONE_TO_ONE", "gr.TPP_DONT", "gr.TPP_CUSTOM"], "option_labels": ["All to All", "One to One", "No Propagation", "Matrix-Defined"]}], "inputs": [{"domain": "stream", "dtype": "${ type }", "multiplicity": "${ len(A[0]) }"}, {"domain": "message", "id": "set_A", "optional": true}], "outputs": [{"domain": "stream", "dtype": "${ type }", "multiplicity": "${ len(A) }"}], "asserts": ["${ len(A) > 0 }", "${ len(A[0]) > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.multiply_matrix_${type.fcn}(${A}, ${tag_propagation_policy})", "callbacks": ["set_A(${A})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/multiply_matrix.h>"], "declarations": "blocks::multiply_matrix_${type.fcn}::sptr ${id};", "make": "this->${id} = blocks::multiply_matrix_${type.fcn}::make(${A}, ${tag_propagation_policy});", "callbacks": ["set_A(${A})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_multiply_xx.block.yml": {"id": "blocks_multiply_xx", "label": "Multiply", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["complex", "float", "int", "short"], "option_attributes": {"fcn": ["cc", "ff", "ii", "ss"]}, "hide": "part"}, {"id": "num_inputs", "label": "Num Inputs", "dtype": "int", "default": "2", "hide": "part"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }", "multiplicity": "${ num_inputs }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "asserts": ["${ num_inputs > 1 }", "${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.multiply_v${type.fcn}(${vlen})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/multiply.h>"], "declarations": "blocks::multiply_${type.fcn}::sptr ${id};", "make": "this->${id} = blocks::multiply_${type.fcn}::make(${vlen});"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_mute_xx.block.yml": {"id": "blocks_mute_xx", "label": "Mute", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["complex", "float", "int", "short"], "option_attributes": {"fcn": ["cc", "ff", "ii", "ss"]}, "hide": "part"}, {"id": "mute", "label": "Mute", "dtype": "raw", "default": "False", "options": ["True", "False"]}], "inputs": [{"domain": "stream", "dtype": "${ type }"}, {"domain": "message", "id": "set_mute", "optional": true}], "outputs": [{"domain": "stream", "dtype": "${ type }"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.mute_${type.fcn}(bool(${mute}))", "callbacks": ["set_mute(bool(${mute}))"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/mute.h>"], "declarations": "blocks::mute_${type.fcn}::sptr ${id};", "make": "this->${id} = blocks::mute_${type.fcn}::(bool(${mute}));", "callbacks": ["set_mute(bool(${mute}))"], "translations": {"True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_nlog10_ff.block.yml": {"id": "blocks_nlog10_ff", "label": "Log10", "flags": ["python", "cpp"], "parameters": [{"id": "n", "label": "n", "dtype": "real", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "k", "label": "k", "dtype": "real", "default": "0"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "float", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "float", "vlen": "${ vlen }"}], "asserts": ["${ vlen >= 1 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.nlog10_ff(${n}, ${vlen}, ${k})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/nlog10_ff.h>"], "declarations": "blocks::nlog10_ff::sptr ${id};", "make": "this->${id} = blocks::nlog10_ff::make(${n}, ${vlen}, ${k});"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_nop.block.yml": {"id": "blocks_nop", "label": "Nop", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "num_ports", "label": "Num Ports", "dtype": "int", "default": "1", "hide": "part"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }", "multiplicity": "${ num_ports }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }", "multiplicity": "${ num_ports }"}], "asserts": ["${ num_ports > 0 }", "${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.nop(${type.size}*${vlen})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/nop.h>"], "declarations": "blocks::nop::sptr ${id};", "make": "this->${id} = blocks::nop::make(${type.size}*${vlen});", "translations": {"gr.sizeof_": "sizeof("}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_not_xx.block.yml": {"id": "blocks_not_xx", "label": "Not", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["int", "short", "byte"], "option_attributes": {"fcn": ["ii", "ss", "bb"]}, "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "${ type }"}], "outputs": [{"domain": "stream", "dtype": "${ type }"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.not_${type.fcn}()"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/not_blk.h>"], "declarations": "blocks::not_${type.fcn}::sptr ${id};", "make": "this->${id} = blocks::not_${type.fcn}::make();"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_null_sink.block.yml": {"id": "blocks_null_sink", "label": "Null Sink", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Input Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "num_inputs", "label": "Num Inputs", "dtype": "int", "default": "1", "hide": "part"}, {"id": "bus_structure_sink", "label": "Bus Connections", "dtype": "raw", "default": "[[0,],]", "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }", "multiplicity": "${ num_inputs }"}], "asserts": ["${ num_inputs >= 1 }", "${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.null_sink(${type.size}*${vlen})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/null_sink.h>"], "declarations": "blocks::null_sink::sptr ${id};", "make": "this->${id} = blocks::null_sink::make(${type.size})*${vlen});", "translations": {"gr.sizeof_": "sizeof("}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_null_source.block.yml": {"id": "blocks_null_source", "label": "Null Source", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Output Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "num_outputs", "label": "Num Outputs", "dtype": "int", "default": "1", "hide": "part"}, {"id": "bus_structure_source", "label": "Bus Connections", "dtype": "raw", "default": "[[0,],]", "hide": "part"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }", "multiplicity": "${ num_outputs }"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.null_source(${type.size}*${vlen})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/null_source.h>"], "declarations": "blocks::null_source::sptr ${id};", "make": "this->${id} = blocks::null_source::make(${type.size})*${vlen});", "translations": {"gr.sizeof_": "sizeof("}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_or_xx.block.yml": {"id": "blocks_or_xx", "label": "Or", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["int", "short", "byte"], "option_attributes": {"fcn": ["ii", "ss", "bb"]}, "hide": "part"}, {"id": "num_inputs", "label": "Num Inputs", "dtype": "int", "default": "2", "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "multiplicity": "${ num_inputs }"}], "outputs": [{"domain": "stream", "dtype": "${ type }"}], "asserts": ["${ num_inputs >= 2 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.or_${type.fcn}()"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/or_blk.h>"], "declarations": "blocks::or_${type.fcn}::sptr ${id};", "make": "this->${id} = blocks::or_${type.fcn}::make();"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_pack_k_bits_bb.block.yml": {"id": "blocks_pack_k_bits_bb", "label": "Pack K Bits", "flags": ["python", "cpp"], "parameters": [{"id": "k", "label": "K", "dtype": "int"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.pack_k_bits_bb(${k})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/pack_k_bits_bb.h>"], "declarations": "blocks::pack_k_bits_bb::sptr ${id};", "make": "this->${id} = blocks::pack_k_bits_bb::make(${k});"}, "documentation": "Pack K unpacked bits (one bit per byte) into a single packed byte containing k bits and 8 - k zeros.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_packed_to_unpacked_xx.block.yml": {"id": "blocks_packed_to_unpacked_xx", "label": "Packed to Unpacked", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["int", "short", "byte"], "option_attributes": {"fcn": ["ii", "ss", "bb"]}, "hide": "part"}, {"id": "bits_per_chunk", "label": "Bits per Chunk", "dtype": "int", "default": "2"}, {"id": "endianness", "label": "Endianness", "dtype": "int", "options": ["gr.GR_MSB_FIRST", "gr.GR_LSB_FIRST"], "option_labels": ["MSB", "LSB"]}, {"id": "num_ports", "label": "Num Ports", "dtype": "int", "default": "1", "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "multiplicity": "${ num_ports }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "multiplicity": "${ num_ports }"}], "asserts": ["${ num_ports > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.packed_to_unpacked_${type.fcn}(${bits_per_chunk}, ${endianness})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/packed_to_unpacked.h>"], "declarations": "blocks::packed_to_unpacked_${type.fcn}::sptr ${id};", "make": "this->${id} = blocks::packed_to_unpacked_${type.fcn}::make(${bits_per_chunk}, ${endianness});", "translations": {"gr.": ""}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_patterned_interleaver.block.yml": {"id": "blocks_patterned_interleaver", "label": "Patterned Interleaver", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "pattern", "label": "Pattern", "dtype": "int_vector", "default": "[0,0,1,2]", "hide": "part"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }", "multiplicity": "${ 1+max(pattern) }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "asserts": ["${ vlen >= 1 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.patterned_interleaver(${type.size}*${vlen}, ${pattern})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/patterned_interleaver.h>"], "declarations": "blocks::patterned_interleaver::sptr ${id};", "make": "this->${id} = blocks::patterned_interleaver::make(${type.size}*${vlen}, ${pattern});", "translations": {"gr.sizeof_": "sizeof("}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_pdu_filter.block.yml": {"id": "blocks_pdu_filter", "label": "PDU Filter", "flags": ["python"], "parameters": [{"id": "k", "label": "Key", "dtype": "raw", "default": "pmt.intern(\"key\")"}, {"id": "v", "label": "Value", "dtype": "raw", "default": "pmt.intern(\"value\")"}, {"id": "invert", "label": "Invert Filter", "dtype": "bool", "default": "False", "options": ["False", "True"], "option_labels": ["No", "Yes"]}], "inputs": [{"domain": "message", "id": "pdus", "optional": true}], "outputs": [{"domain": "message", "id": "pdus", "optional": true}], "templates": {"imports": "from gnuradio import blocks\nimport pmt", "make": "blocks.pdu_filter(${k}, ${v}, ${invert})", "callbacks": ["set_key(${k})", "set_val(${v})", "set_inversion(${invert})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_pdu_remove.block.yml": {"id": "blocks_pdu_remove", "label": "PDU Remove", "flags": ["python"], "parameters": [{"id": "k", "label": "Key", "dtype": "raw", "default": "pmt.intern(\"key\")"}], "inputs": [{"domain": "message", "id": "pdus", "optional": true}], "outputs": [{"domain": "message", "id": "pdus", "optional": true}], "templates": {"imports": "from gnuradio import blocks\nimport pmt", "make": "blocks.pdu_remove(${k})", "callbacks": ["set_key(${k})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_pdu_set.block.yml": {"id": "blocks_pdu_set", "label": "PDU Set", "flags": ["python"], "parameters": [{"id": "k", "label": "Key", "dtype": "raw", "default": "pmt.intern(\"key\")"}, {"id": "v", "label": "Value", "dtype": "raw", "default": "pmt.intern(\"value\")"}], "inputs": [{"domain": "message", "id": "pdus", "optional": true}], "outputs": [{"domain": "message", "id": "pdus", "optional": true}], "templates": {"imports": "from gnuradio import blocks\nimport pmt", "make": "blocks.pdu_set(${k}, ${v})", "callbacks": ["set_key(${k})", "set_val(${v})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_pdu_to_tagged_stream.block.yml": {"id": "blocks_pdu_to_tagged_stream", "label": "PDU to Tagged Stream", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Item Type", "dtype": "enum", "options": ["byte", "complex", "float"], "option_attributes": {"tv": ["blocks.byte_t", "blocks.complex_t", "blocks.float_t"]}, "hide": "part"}, {"id": "tag", "label": "Length tag name", "dtype": "string", "default": "packet_len"}], "inputs": [{"domain": "message", "id": "pdus"}], "outputs": [{"domain": "stream", "dtype": "${ type }"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.pdu_to_tagged_stream(${type.tv}, ${tag})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/pdu_to_tagged_stream.h>"], "declarations": "blocks::pdu_to_tagged_stream::sptr ${id};", "make": "this->${id} = blocks::pdu_to_tagged_stream::make(${type.tv}, ${tag});", "translations": {"blocks.": "blocks::"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_peak_detector2_fb.block.yml": {"id": "blocks_peak_detector2_fb", "label": "Peak Detector2", "flags": ["python", "cpp"], "parameters": [{"id": "threshold_factor_rise", "label": "TH Factor Rise", "dtype": "real", "default": "7"}, {"id": "look_ahead", "label": "Look Ahead", "dtype": "int", "default": "1000"}, {"id": "alpha", "label": "Alpha", "dtype": "real", "default": "0.001"}], "inputs": [{"domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "byte"}, {"label": "debug", "domain": "stream", "dtype": "float", "optional": true}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.peak_detector2_fb(${threshold_factor_rise}, ${look_ahead}, ${alpha})", "callbacks": ["set_threshold_factor_rise(${threshold_factor_rise})", "set_look_ahead(${look_ahead})", "set_alpha(${alpha})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/peak_detector2_fb.h>"], "declarations": "blocks::peak_detector2_fb::sptr ${id};", "make": "this->${id} = blocks::peak_detector2_fb::make(${threshold_factor_rise}, ${look_ahead}, ${alpha});", "callbacks": ["set_threshold_factor_rise(${threshold_factor_rise})", "set_look_ahead(${look_ahead})", "set_alpha(${alpha})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_peak_detector_xb.block.yml": {"id": "blocks_peak_detector_xb", "label": "Peak Detector", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Input Type", "dtype": "enum", "options": ["float", "int", "short"], "option_attributes": {"fcn": ["f", "i", "s"]}, "hide": "part"}, {"id": "threshold_factor_rise", "label": "TH Factor Rise", "dtype": "real", "default": "0.25"}, {"id": "threshold_factor_fall", "label": "TH Factor Fall", "dtype": "real", "default": "0.40"}, {"id": "look_ahead", "label": "Look Ahead", "dtype": "int", "default": "10"}, {"id": "alpha", "label": "Alpha", "dtype": "real", "default": "0.001"}], "inputs": [{"domain": "stream", "dtype": "${ type }"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.peak_detector_${type.fcn}b(${threshold_factor_rise}, ${threshold_factor_fall}, ${look_ahead}, ${alpha})", "callbacks": ["set_threshold_factor_rise(${threshold_factor_rise})", "set_threshold_factor_fall(${threshold_factor_fall})", "set_look_ahead(${look_ahead})", "set_alpha(${alpha})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/peak_detector.h>"], "declarations": "blocks::peak_detector_${type.fcn}b::sptr ${id};", "make": "this->${id} = blocks::peak_detector_${type.fcn}b::make(${threshold_factor_rise}, ${threshold_factor_fall}, ${look_ahead}, ${alpha});", "callbacks": ["set_threshold_factor_rise(${threshold_factor_rise})", "set_threshold_factor_fall(${threshold_factor_fall})", "set_look_ahead(${look_ahead})", "set_alpha(${alpha})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_plateau_detector_fb.block.yml": {"id": "blocks_plateau_detector_fb", "label": "Plateau Detector", "flags": ["python", "cpp"], "parameters": [{"id": "max_len", "label": "Max. plateau length", "dtype": "int"}, {"id": "threshold", "label": "Threshold", "dtype": "real", "default": "0.9"}], "inputs": [{"domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.plateau_detector_fb(${max_len}, ${threshold})", "callbacks": ["set_threshold(${threshold})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/plateau_detector_fb.h>"], "declarations": "blocks::plateau_detector_fb::sptr ${id};", "make": "this->${id} = blocks::plateau_detector_fb::make(${max_len}, ${threshold});"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_probe_rate.block.yml": {"id": "blocks_probe_rate", "label": "Probe Rate", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Input Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "mintime", "label": "Min Update Time (ms)", "dtype": "real", "default": "500.0"}, {"id": "alpha", "label": "Update Alpha", "dtype": "real", "default": "0.15"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "outputs": [{"domain": "message", "id": "rate", "optional": true}], "asserts": ["${ vlen >= 1 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.probe_rate(${type.size}*${vlen}, ${mintime}, ${alpha})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/probe_rate.h>"], "declarations": "blocks::probe_rate::sptr ${id};", "make": "this->${id} = blocks::probe_rate::make(${type.size}*${vlen}, ${mintime}, ${alpha});", "translations": {"gr.sizeof_": "sizeof("}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_probe_signal_vx.block.yml": {"id": "blocks_probe_signal_vx", "label": "Probe Signal Vector", "flags": ["show_id", "python", "cpp"], "parameters": [{"id": "type", "label": "Input Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"fcn": ["c", "f", "i", "s", "b"]}, "hide": "part"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "asserts": ["${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.probe_signal_v${type.fcn}(${vlen})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/probe_signal_v.h>"], "declarations": "blocks::probe_signal_v${type.fcn}::sptr ${id};", "make": "this->${id} = blocks::probe_signal_v${type.fcn}::make(${vlen});"}, "documentation": "Available functions to probe: level()\n\nUse with the function probe block.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_probe_signal_x.block.yml": {"id": "blocks_probe_signal_x", "label": "Probe Signal", "flags": ["show_id", "python", "cpp"], "parameters": [{"id": "type", "label": "Input Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"fcn": ["c", "f", "i", "s", "b"]}, "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "${ type }"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.probe_signal_${type.fcn}()"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/probe_signal.h>"], "declarations": "blocks::probe_signal_${type.fcn}::sptr ${id};", "make": "this->${id} = blocks::probe_signal_${type.fcn}::make();"}, "documentation": "Available functions to probe: level()\n\nUse with the function probe block.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_random_pdu.block.yml": {"id": "blocks_random_pdu", "label": "Random PDU Generator", "flags": ["python"], "parameters": [{"id": "minsize", "label": "Min Bytes", "dtype": "int", "default": "50"}, {"id": "maxsize", "label": "Max Bytes", "dtype": "int", "default": "2000"}, {"id": "mask", "label": "Byte Mask", "dtype": "int", "default": "0xFF"}, {"id": "length_modulo", "label": "Length Modulo", "dtype": "int", "default": "2"}], "inputs": [{"domain": "message", "id": "generate", "optional": true}], "outputs": [{"domain": "message", "id": "pdus", "optional": true}], "templates": {"imports": "from gnuradio import blocks\nimport pmt", "make": "blocks.random_pdu(${minsize}, ${maxsize}, ${mask}, ${length_modulo})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_regenerate_bb.block.yml": {"id": "blocks_regenerate_bb", "label": "Regenerate", "flags": ["python", "cpp"], "parameters": [{"id": "period", "label": "Period", "dtype": "int"}, {"id": "max_regen", "label": "Max Regen Count", "dtype": "int", "default": "500"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.regenerate_bb(${period}, ${max_regen})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/regenerate_bb.h>"], "declarations": "blocks::regenerate_bb::sptr ${id};", "make": "this->${id} = blocks::regenerate_bb::make(${period}, ${max_regen});"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_repack_bits_bb.block.yml": {"id": "blocks_repack_bits_bb", "label": "Repack Bits", "flags": ["python", "cpp"], "parameters": [{"id": "k", "label": "Bits per input byte", "dtype": "int", "default": "1"}, {"id": "l", "label": "Bits per output byte", "dtype": "int", "default": "8"}, {"id": "len_tag_key", "label": "Length Tag Key", "dtype": "string", "default": "\"\"", "hide": "part"}, {"id": "align_output", "label": "Packet Alignment", "dtype": "enum", "default": "False", "options": ["True", "False"], "option_labels": ["Output", "Input"], "hide": "part"}, {"id": "endianness", "label": "Endianness", "dtype": "int", "default": "gr.GR_LSB_FIRST", "options": ["gr.GR_MSB_FIRST", "gr.GR_LSB_FIRST"], "option_labels": ["MSB", "LSB"], "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.repack_bits_bb(${k}, ${l}, ${len_tag_key}, ${align_output}, ${endianness})", "callbacks": ["set_k_and_l(${k},${l})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/repack_bits_bb.h>"], "declarations": "blocks::repack_bits_bb::sptr ${id};", "make": "this->${id} = blocks::repack_bits_bb::make(${k}, ${l}, ${len_tag_key}, ${align_output}, ${endianness});", "callbacks": ["set_k_and_l(${k},${l})"], "translations": {"gr.": "", "True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_repeat.block.yml": {"id": "blocks_repeat", "label": "Repeat", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "interp", "label": "Interpolation", "dtype": "int"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "asserts": ["${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.repeat(${type.size}*${vlen}, ${interp})", "callbacks": ["set_interpolation(${interp})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/repeat.h>"], "declarations": "blocks::repeat::sptr ${id};", "make": "this->${id} = blocks::repeat::make(${type.size}*${vlen}, ${interp});", "callbacks": ["set_interpolation(${interp})"], "translations": {"gr.sizeof_": "sizeof("}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_rms_xx.block.yml": {"id": "blocks_rms_xx", "label": "RMS", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Input Type", "dtype": "enum", "options": ["complex", "float"], "option_attributes": {"fcn": ["c", "f"]}, "hide": "part"}, {"id": "alpha", "label": "Alpha", "dtype": "real", "default": "0.0001"}], "inputs": [{"domain": "stream", "dtype": "${ type }"}], "outputs": [{"domain": "stream", "dtype": "float"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.rms_${type.fcn}f(${alpha})", "callbacks": ["set_alpha(${alpha})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/rms_${type.fcn}f.h>"], "declarations": "blocks::rms_${type.fcn}f::sptr ${id};", "make": "this->${id} = blocks::rms_${type.fcn}f::make(${alpha});", "callbacks": ["set_alpha(${alpha})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_rotator_cc.block.yml": {"id": "blocks_rotator_cc", "label": "Rotator", "flags": ["python", "cpp"], "parameters": [{"id": "phase_inc", "label": "Phase Increment", "dtype": "real", "default": "0.0"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.rotator_cc(${phase_inc})", "callbacks": ["set_phase_inc(${phase_inc})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/rotator_cc.h>"], "declarations": "blocks::rotator_cc::sptr ${id};", "make": "this->${id} = blocks::rotator_cc::make(${phase_inc});", "callbacks": ["set_phase_inc(${phase_inc})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_sample_and_hold_xx.block.yml": {"id": "blocks_sample_and_hold_xx", "label": "Sample and Hold", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["float", "int", "short", "byte"], "option_attributes": {"fcn": ["ff", "ii", "ss", "bb"]}, "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "${ type }"}, {"label": "ctrl", "domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "${ type }"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.sample_and_hold_${type.fcn}()"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/sample_and_hold.h>"], "declarations": "blocks::sample_and_hold_${type.fcn}::sptr ${id};", "make": "this->${id} = blocks::sample_and_hold_${type.fcn}::make();"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_selector.block.yml": {"id": "blocks_selector", "label": "Selector", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "enabled", "label": "Enabled", "dtype": "bool", "default": "True", "options": ["True", "False"], "option_labels": ["Enabled", "Disabled"]}, {"id": "num_inputs", "label": "Number of Inputs", "dtype": "int", "default": 2}, {"id": "num_outputs", "label": "Number of Outputs", "dtype": "int", "default": 2}, {"id": "input_index", "label": "Input Index", "dtype": "int", "default": 0}, {"id": "output_index", "label": "Output Index", "dtype": "int", "default": 0}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "showports", "label": "Show Msg Ports", "dtype": "bool", "default": "True", "options": ["False", "True"], "option_labels": ["Yes", "No"], "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }", "multiplicity": "${ num_inputs }"}, {"domain": "message", "id": "en", "optional": true, "hide": "${ showports }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }", "multiplicity": "${ num_outputs }"}], "asserts": ["${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.selector(${type.size}*${vlen},${input_index},${output_index})\nself.${id}.set_enabled(${enabled})", "callbacks": ["set_enabled(${enabled})", "set_input_index(${input_index})", "set_output_index(${output_index})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/copy.h>"], "declarations": "blocks::selector::sptr ${id};", "make": "this->${id} = blocks::selector::make(${type.size}*${vlen},${input_index},${output_index});\nself->${id}.set_enabled(${enabled});", "callbacks": ["set_enabled(${enabled})", "set_input_index(${input_index})", "set_output_index(${output_index})"], "translations": {"gr.sizeof_": "sizeof(", "True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_short_to_char.block.yml": {"id": "blocks_short_to_char", "label": "Short To Char", "flags": ["python", "cpp"], "parameters": [{"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "short", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "byte", "vlen": "${ vlen }"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.short_to_char(${vlen})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/short_to_char.h>"], "declarations": "blocks::short_to_char::sptr ${id};", "make": "this->${id} = blocks::short_to_char::make(${vlen});"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_short_to_float.block.yml": {"id": "blocks_short_to_float", "label": "Short To Float", "flags": ["python", "cpp"], "parameters": [{"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "scale", "label": "Scale", "dtype": "real", "default": "1"}], "inputs": [{"domain": "stream", "dtype": "short", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "float", "vlen": "${ vlen }"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.short_to_float(${vlen}, ${scale})", "callbacks": ["set_scale(${scale})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/short_to_float.h>"], "declarations": "blocks::short_to_float::sptr ${id};", "make": "this->${id} = blocks::short_to_float::make(${vlen}, ${scale});", "callbacks": ["set_scale(${scale})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_skiphead.block.yml": {"id": "blocks_skiphead", "label": "Skip Head", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "num_items", "label": "Num Items", "dtype": "int", "default": "1024"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "asserts": ["${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.skiphead(${type.size}*${vlen}, ${num_items})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/skiphead.h>"], "declarations": "blocks::skiphead::sptr ${id};", "make": "this->${id} = blocks::skiphead::make(${type.size}*${vlen}, ${num_items});", "translations": {"gr.sizeof_": "sizeof("}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_socket_pdu.block.yml": {"id": "blocks_socket_pdu", "label": "Socket PDU", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "default": "TCP_SERVER", "options": ["TCP_SERVER", "TCP_CLIENT", "UDP_SERVER", "UDP_CLIENT"], "option_labels": ["TCP Server", "TCP Client", "UDP Server", "UDP Client"]}, {"id": "host", "label": "Host", "dtype": "string"}, {"id": "port", "label": "Port", "dtype": "string", "default": "52001"}, {"id": "mtu", "label": "MTU", "dtype": "int", "default": "10000"}, {"id": "tcp_no_delay", "label": "TCP No Delay", "dtype": "enum", "default": "False", "options": ["True", "False"], "option_labels": ["Enabled", "Disabled"], "hide": "${ (( 'part' if (str(tcp_no_delay) == 'False') else 'none') if ((type == 'TCP_CLIENT') or (type == 'TCP_SERVER')) else 'all') }"}], "inputs": [{"domain": "message", "id": "pdus", "optional": true}], "outputs": [{"domain": "message", "id": "pdus", "optional": true}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.socket_pdu(${repr(type)}, ${host}, ${port}, ${mtu}, ${tcp_no_delay})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/socket_pdu.h>"], "declarations": "blocks::socket_pdu::sptr ${id};", "make": "this->${id} = blocks::socket_pdu::make(${type}, ${host}, ${port}, ${mtu}, ${tcp_no_delay});", "translations": {"True": "true", "False": "false"}}, "documentation": "For server modes, leave Host blank to bind to all interfaces (equivalent to 0.0.0.0).", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_stream_mux.block.yml": {"id": "blocks_stream_mux", "label": "Stream Mux", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "lengths", "label": "Lengths", "dtype": "int_vector", "default": "1, 1"}, {"id": "num_inputs", "label": "Num Inputs", "dtype": "int", "default": "2", "hide": "part"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }", "multiplicity": "${ num_inputs }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "asserts": ["${ num_inputs > 0 }", "${ num_inputs == len(lengths) }", "${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.stream_mux(${type.size}*${vlen}, ${lengths})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/stream_mux.h>"], "declarations": "blocks::stream_mux::sptr ${id};", "make": "this->${id} = blocks::stream_mux::make(${type.size}*${vlen}, ${lengths});", "translations": {"gr.sizeof_": "sizeof("}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_stream_to_streams.block.yml": {"id": "blocks_stream_to_streams", "label": "Stream to Streams", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "num_streams", "label": "Num Streams", "dtype": "int", "default": "2", "hide": "part"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }", "multiplicity": "${ num_streams }"}], "asserts": ["${ num_streams > 0 }", "${ vlen >= 1 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.stream_to_streams(${type.size}*${vlen}, ${num_streams})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/stream_to_streams.h>"], "declarations": "blocks::stream_to_streams::sptr ${id};", "make": "this->${id} = blocks::stream_to_streams::make(${type.size}*${vlen}, ${num_streams});", "translations": {"gr.sizeof_": "sizeof("}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_stream_to_tagged_stream.block.yml": {"id": "blocks_stream_to_tagged_stream", "label": "Stream to Tagged Stream", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "vlen", "label": "Vector Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "packet_len", "label": "Packet Length", "dtype": "int"}, {"id": "len_tag_key", "label": "Length Tag Key", "dtype": "string", "default": "\"packet_len\""}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.stream_to_tagged_stream(${type.size}, ${vlen}, ${packet_len}, ${len_tag_key})", "callbacks": ["set_packet_len(${packet_len})", "set_packet_len_pmt(${packet_len})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/stream_to_tagged_stream.h>"], "declarations": "blocks::stream_to_tagged_stream::sptr ${id};", "make": "this->${id} = blocks::stream_to_tagged_stream::make(${type.size}, ${vlen}, ${packet_len}, ${len_tag_key});", "callbacks": ["set_packet_len(${packet_len})", "set_packet_len_pmt(${packet_len})"], "translations": {"gr.sizeof_": "sizeof("}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_stream_to_vector.block.yml": {"id": "blocks_stream_to_vector", "label": "Stream to Vector", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "num_items", "label": "Num Items", "dtype": "int", "default": "2", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen*num_items }"}], "asserts": ["${ num_items > 0 }", "${ vlen >= 1 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.stream_to_vector(${type.size}*${vlen}, ${num_items})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/stream_to_vector.h>"], "declarations": "blocks::stream_to_vector::sptr ${id};", "make": "this->${id} = blocks::stream_to_vector::make(${type.size}*${vlen}, ${num_items});"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_stream_to_vector_decimator.block.yml": {"id": "blocks_stream_to_vector_decimator", "label": "Stream to Vec Decim", "flags": ["python"], "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "sample_rate", "label": "Sample Rate", "dtype": "real", "default": "samp_rate"}, {"id": "vec_rate", "label": "Vec Rate", "dtype": "real", "default": "30"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1024", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "asserts": ["${ vlen >= 1 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.stream_to_vector_decimator(\n    item_size=${type.size},\n    sample_rate=${sample_rate},\n    vec_rate=${vec_rate},\n    vec_len=${vlen})", "callbacks": ["set_sample_rate(${sample_rate})", "set_vec_rate(${vec_rate})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_streams_to_stream.block.yml": {"id": "blocks_streams_to_stream", "label": "Streams to Stream", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "num_streams", "label": "Num Streams", "dtype": "int", "default": "2", "hide": "part"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }", "multiplicity": "${ num_streams }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "asserts": ["${ num_streams > 0 }", "${ vlen >= 1 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.streams_to_stream(${type.size}*${vlen}, ${num_streams})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/streams_to_stream.h>"], "declarations": "blocks::streams_to_stream::sptr ${id};", "make": "this->${id} = blocks::streams_to_stream::make(${type.size}*${vlen}, ${num_streams});", "translations": {"gr.sizeof_": "sizeof("}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_streams_to_vector.block.yml": {"id": "blocks_streams_to_vector", "label": "Streams to Vector", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "num_streams", "label": "Num Streams", "dtype": "int", "default": "2", "hide": "part"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }", "multiplicity": "${ num_streams }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen*num_streams }"}], "asserts": ["${ num_streams > 0 }", "${ vlen >= 1 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.streams_to_vector(${type.size}*${vlen}, ${num_streams})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/streams_to_vector.h>"], "declarations": "blocks::streams_to_vector::sptr ${id};", "make": "this->${id} = blocks::streams_to_vector::make(${type.size}*${vlen}, ${num_streams});", "translations": {"gr.sizeof_": "sizeof("}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_stretch_ff.block.yml": {"id": "blocks_stretch_ff", "label": "Stretch", "flags": ["python", "cpp"], "parameters": [{"id": "lo", "label": "Low", "dtype": "real"}, {"id": "vlen", "label": "Vec. Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "float", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "float", "vlen": "${ vlen }"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.stretch_ff(${lo}, ${vlen})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/stretch_ff.h>"], "declarations": "blocks::stretch_ff::sptr ${id};", "make": "this->${id} = blocks::stretch_ff::make(${lo}, ${vlen});"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_sub_xx.block.yml": {"id": "blocks_sub_xx", "label": "Subtract", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["complex", "float", "int", "short"], "option_attributes": {"fcn": ["cc", "ff", "ii", "ss"]}, "hide": "part"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "num_inputs", "label": "Num Inputs", "dtype": "int", "default": "2", "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }", "multiplicity": "${ num_inputs }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "asserts": ["${ vlen > 0 }", "${ num_inputs >= 1 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.sub_${type.fcn}(${vlen})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/sub.h>"], "declarations": "blocks::sub_${type.fcn}::sptr ${id};", "make": "this->${id} = blocks::sub_${type.fcn}::make(${vlen});"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_tag_debug.block.yml": {"id": "blocks_tag_debug", "label": "Tag Debug", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Input Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "name", "label": "Name", "dtype": "string"}, {"id": "filter", "label": "Key Filter", "dtype": "string", "default": "\"\""}, {"id": "num_inputs", "label": "Num Inputs", "dtype": "int", "default": "1", "hide": "part"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "display", "label": "Display", "dtype": "bool", "default": "True", "options": ["True", "False"], "option_labels": ["On", "Off"]}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }", "multiplicity": "${ num_inputs }"}], "asserts": ["${ num_inputs >= 1 }", "${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.tag_debug(${type.size}*${vlen}, ${name}, ${filter})\nself.${id}.set_display(${display})", "callbacks": ["set_display(${display})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/tag_debug.h>"], "declarations": "blocks::tag_debug::sptr ${id};", "make": "this->${id} = blocks::tag_debug::make(${type.size}*${vlen}, ${name}, ${filter});\nthis->${id}.set_display(${display});", "callbacks": ["set_display(${display})"], "translations": {"gr.sizeof_": "sizeof(", "True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_tag_gate.block.yml": {"id": "blocks_tag_gate", "label": "Tag Gate", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Item Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "propagate_tags", "label": "Propagate Tags", "dtype": "enum", "default": "False", "options": ["True", "False"], "option_labels": ["Yes", "No"]}, {"id": "single_key", "label": "Single Key", "dtype": "string", "default": "\"\""}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "asserts": ["${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.tag_gate(${type.size} * ${vlen}, ${propagate_tags})\nself.${id}.set_single_key(${single_key})", "callbacks": ["self.${id}.set_single_key(${single_key})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/tag_gate.h>"], "make": "this->${id} = blocks::tag_gate::make(${type.size} * ${vlen}, ${propagate_tags});\nthis->${id}.set_single_key(${single_key});", "callbacks": ["self.${id}.set_single_key(${single_key})"], "translations": {"gr.sizeof_": "sizeof(", "True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_tag_object.block.yml": {"id": "variable_tag_object", "label": "Tag Object", "flags": ["show_id", "python"], "parameters": [{"id": "offset", "label": "Offset", "dtype": "int", "default": "0"}, {"id": "key", "label": "Key", "dtype": "raw", "default": "pmt.intern(\"key\")"}, {"id": "value", "label": "Value", "dtype": "raw", "default": "pmt.intern(\"value\")"}, {"id": "src", "label": "Source ID", "dtype": "raw", "default": "pmt.intern(\"src\")"}], "value": "${ value }", "templates": {"imports": "import pmt", "var_make": "self.${id} = ${id} = gr.tag_utils.python_to_tag((${offset}, ${key}, ${value}, ${src}))", "callbacks": ["self.set_${id}(gr.tag_utils.python_to_tag((${offset}, ${key}, ${value}, ${src})))"]}, "documentation": "This block creates a tag object. While tags are based on an\n    absolute offset, this is based on a relative offset that must be\n    appropriately translated by the block using it. For example, this\n    is used by the vector_source blocks, which will treat a 0 offset\n    in the tag as the first item in the stream when the vector starts\n    or repeats.\n\n    The tag objects are created using the python_to_tag Python\n    function to make it easy to generate a tag_t in Python. The call\n    looks like:\n\n        gr.tag_utils.python_to_tag(($offset, $key, $value, $src))", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_tag_share.block.yml": {"id": "blocks_tag_share", "label": "Tag Share", "flags": ["python", "cpp"], "parameters": [{"id": "io_type", "label": "IO Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "share_type", "label": "Share Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "${ io_type }", "vlen": "${ vlen }"}, {"label": "share", "domain": "stream", "dtype": "${ share_type }", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "${ io_type }", "vlen": "${ vlen }"}], "asserts": ["${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.tag_share(${io_type.size}, ${share_type.size}, ${vlen})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/tag_share.h>"], "declarations": "blocks::tag_share::sptr ${id};", "make": "this->${id} = blocks::tag_share::make(${io_type.size}, ${share_type.size}, ${vlen});", "translations": {"gr.sizeof_": "sizeof("}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_tagged_file_sink.block.yml": {"id": "blocks_tagged_file_sink", "label": "Tagged File Sink", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Input Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "samp_rate", "label": "Sample Rate", "dtype": "int", "default": "samp_rate"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "asserts": ["${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.tagged_file_sink(${type.size}*${vlen}, ${samp_rate})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/tagged_file_sink.h>"], "declarations": "blocks::tagged_file_sink::sptr ${id};", "make": "this->${id} = blocks::tagged_file_sink::make(${type.size}*${vlen}, ${samp_rate});", "translations": {"gr.sizeof_": "sizeof("}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_tagged_stream_align.block.yml": {"id": "blocks_tagged_stream_align", "label": "Tagged Stream Align", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "lengthtagname", "label": "Length tag names", "dtype": "string", "default": "packet_len"}, {"id": "vlen", "label": "Vector Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.tagged_stream_align(${type.size}*${vlen}, ${lengthtagname})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/tagged_stream_align.h>"], "declarations": "blocks::tagged_stream_align::sptr ${id};", "make": "this->${id} = blocks::tagged_stream_align::make(${type.size}*${vlen}, ${lengthtagname});", "translations": {"gr.sizeof_": "sizeof("}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_tagged_stream_multiply_length.block.yml": {"id": "blocks_tagged_stream_multiply_length", "label": "Tagged Stream Multiply Length Tag", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "lengthtagname", "label": "Length tag names", "dtype": "string"}, {"id": "vlen", "label": "Vector Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "c", "label": "Length Scalar", "dtype": "real", "default": "1.0"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}, {"domain": "message", "id": "set_scalar", "optional": true}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.tagged_stream_multiply_length(${type.size}*${vlen}, ${lengthtagname}, ${c})", "callbacks": ["set_scalar(${c})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/tagged_stream_multiply_length.h>"], "declarations": "blocks::tagged_stream_multiply_length::sptr ${id};", "make": "this->${id} = blocks.tagged_stream_multiply_length(${type.size}*${vlen}, ${lengthtagname}, ${c});", "callbacks": ["set_scalar(${c})"], "translations": {"gr.sizeof_": "sizeof("}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_tagged_stream_mux.block.yml": {"id": "blocks_tagged_stream_mux", "label": "Tagged Stream Mux", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "ninputs", "label": "Number of inputs", "dtype": "int", "hide": "part"}, {"id": "lengthtagname", "label": "Length tag names", "dtype": "string"}, {"id": "vlen", "label": "Vector Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "tag_preserve_head_pos", "label": "Tags: Preserve head position on input", "dtype": "int", "default": "0", "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }", "multiplicity": "${ ninputs }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.tagged_stream_mux(${type.size}*${vlen}, ${lengthtagname}, ${tag_preserve_head_pos})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/tagged_stream_mux.h>"], "declarations": "blocks::tagged_stream_mux::sptr ${id};", "make": "this->${id} = blocks::tagged_stream_mux::make(${type.size}*${vlen}, ${lengthtagname}, ${tag_preserve_head_pos});", "translations": {"gr.sizeof_": "sizeof("}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_tagged_stream_to_pdu.block.yml": {"id": "blocks_tagged_stream_to_pdu", "label": "Tagged Stream to PDU", "flags": ["python"], "parameters": [{"id": "type", "label": "Item Type", "dtype": "enum", "options": ["byte", "complex", "float"], "option_attributes": {"tv": ["blocks.byte_t", "blocks.complex_t", "blocks.float_t"]}, "hide": "part"}, {"id": "tag", "label": "Length tag name", "dtype": "string", "default": "packet_len"}], "inputs": [{"domain": "stream", "dtype": "${ type }"}], "outputs": [{"domain": "message", "id": "pdus", "optional": true}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.tagged_stream_to_pdu(${type.tv}, ${tag})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/tagged_stream_to_pdu.h>"], "declarations": "blocks::tagged_stream_to_pdu::sptr ${id};", "make": "this->${id} = blocks::tagged_stream_to_pdu::make(${type.tv}, ${tag});"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_tags_strobe.block.yml": {"id": "blocks_tags_strobe", "label": "Tags Strobe", "flags": ["python"], "parameters": [{"id": "type", "label": "Output Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "value", "label": "Value (PMT)", "dtype": "raw", "default": "pmt.intern(\"TEST\")"}, {"id": "key", "label": "Key (PMT)", "dtype": "raw", "default": "pmt.intern(\"strobe\")"}, {"id": "nsamps", "label": "Num. Samples", "dtype": "int", "default": "1000"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "asserts": ["${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks\nimport pmt", "make": "blocks.tags_strobe(${type.size}*${vlen}, ${value}, ${nsamps}, ${key})", "callbacks": ["set_value(${value})", "set_key(${key})", "set_nsamps(${nsamps})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_tcp_server_sink.block.yml": {"id": "blocks_tcp_server_sink", "label": "TCP Server Sink", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Input Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "ipaddr", "label": "Destination IP Address", "dtype": "string"}, {"id": "port", "label": "Destination Port", "dtype": "int"}, {"id": "noblock", "label": "Nonblocking Mode", "dtype": "enum", "options": ["True", "False"], "option_labels": ["On", "Off"]}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "asserts": ["${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.tcp_server_sink(${type.size}*${vlen}, ${ipaddr}, ${port}, ${noblock})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/tcp_server_sink.h>"], "declarations": "blocks::tcp_server_sink::sptr ${id};", "make": "this->${id} = blocks::tcp_server_sink::make(${type.size}*${vlen}, ${ipaddr}, ${port}, ${noblock});", "translations": {"gr.sizeof_": "sizeof(", "True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_test_tag_variable_rate_ff.block.yml": {"id": "blocks_test_tag_variable_rate_ff", "label": "Test Tag Variable Rate", "flags": ["python", "cpp"], "parameters": [{"id": "once", "label": "Update Once", "dtype": "enum", "default": "False", "options": ["True", "False"]}, {"id": "step", "label": "Update Step", "dtype": "float", "default": "0.001"}], "inputs": [{"domain": "stream", "dtype": "float", "multiplicity": "1"}], "outputs": [{"domain": "stream", "dtype": "float", "multiplicity": "1"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.test_tag_variable_rate_ff(${once}, ${step})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/test_tag_variable_rate_ff.h>"], "declarations": "blocks::test_tag_variable_rate_ff::sptr ${id};", "make": "this->${id} = blocks::test_tag_variable_rate_ff::make(${once}, ${step});", "translations": {"True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_threshold_ff.block.yml": {"id": "blocks_threshold_ff", "label": "Threshold", "flags": ["python", "cpp"], "parameters": [{"id": "low", "label": "Low", "dtype": "real", "default": "-100"}, {"id": "high", "label": "High", "dtype": "real", "default": "100"}, {"id": "init", "label": "Initial State", "dtype": "real", "default": "0"}], "inputs": [{"domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "float"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.threshold_ff(${low}, ${high}, ${init})", "callbacks": ["set_hi(${high})", "set_lo(${low})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/threshold_ff.h>"], "declarations": "blocks::threshold_ff::sptr ${id};", "make": "this->${id} = blocks::threshold_ff::make(${low}, ${high}, ${init});", "callbacks": ["set_hi(${high})", "set_lo(${low})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_throttle.block.yml": {"id": "blocks_throttle", "label": "Throttle", "flags": ["throttle", "python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "samples_per_second", "label": "Sample Rate", "dtype": "real", "default": "samp_rate"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "ignoretag", "label": "Ignore rx_rate tag", "dtype": "bool", "default": "True", "hide": "${ ('part' if str(ignoretag) == 'True' else 'none') }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "asserts": ["${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.throttle(${type.size}*${vlen}, ${samples_per_second},${ignoretag})", "callbacks": ["set_sample_rate(${samples_per_second})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/throttle.h>"], "declarations": "blocks::throttle::sptr ${id};", "make": "this->${id} = blocks::throttle::make(${type.size})*${vlen}, ${samples_per_second}, ${ignoretag});", "callbacks": ["set_sample_rate(${samples_per_second})"], "translations": {"gr.sizeof_": "sizeof(", "True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_transcendental.block.yml": {"id": "blocks_transcendental", "label": "Transcendental", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["complex_double", "float"], "option_labels": ["Complex", "Float"], "option_attributes": {"type": ["complex", "float"]}, "hide": "part"}, {"id": "name", "label": "Function Name", "dtype": "string", "default": "cos"}], "inputs": [{"domain": "stream", "dtype": "${ type.type }"}], "outputs": [{"domain": "stream", "dtype": "${ type.type }"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.transcendental(${name}, \"${type}\")"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/transcendental.h>"], "declarations": "blocks::transcendental::sptr ${id};", "make": "this->${id} = blocks::transcendental::make(${name}, \"$type\");"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_tuntap_pdu.block.yml": {"id": "blocks_tuntap_pdu", "label": "TUNTAP PDU", "flags": ["python", "cpp"], "parameters": [{"id": "ifn", "label": "Interface Name", "dtype": "string", "default": "tap0"}, {"id": "mtu", "label": "MTU", "dtype": "int", "default": "10000"}, {"id": "istunflag", "label": "Flag", "dtype": "enum", "default": "False", "options": ["True", "False"], "option_labels": ["TUN(IP Packet)", "TAP(Ethernet Frame)"]}], "inputs": [{"domain": "message", "id": "pdus", "optional": true}], "outputs": [{"domain": "message", "id": "pdus", "optional": true}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.tuntap_pdu(${ifn}, ${mtu}, ${istunflag})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/tuntap_pdu.h>"], "declarations": "blocks::tuntap_pdu::sptr ${id};", "make": "this->${id} = blocks::tuntap_pdu::make(${ifn}, ${mtu}, ${istunflag});", "translations": {"True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_uchar_to_float.block.yml": {"id": "blocks_uchar_to_float", "label": "UChar To Float", "flags": ["python", "cpp"], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "float"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.uchar_to_float()"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/uchar_to_float.h>"], "declarations": "blocks::uchar_to_float::sptr ${id};", "make": "this->${id} = blocks::uchar_to_float::make();"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_udp_sink.block.yml": {"id": "blocks_udp_sink", "label": "UDP Sink", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Input Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "ipaddr", "label": "Destination IP Address", "dtype": "string"}, {"id": "port", "label": "Destination Port", "dtype": "int"}, {"id": "psize", "label": "Payload Size", "dtype": "int", "default": "1472"}, {"id": "eof", "label": "Send Null Pkt as EOF", "dtype": "bool", "default": "True"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "asserts": ["${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.udp_sink(${type.size}*${vlen}, ${ipaddr}, ${port}, ${psize}, ${eof})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/udp_sink.h>"], "declarations": "blocks::udp_sink::sptr ${id};", "make": "this->${id} = blocks::udp_sink::make(${type.size}*${vlen}, ${ipaddr}, ${port}, ${psize}, ${eof});", "translations": {"gr.sizeof_": "sizeof(", "True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_udp_source.block.yml": {"id": "blocks_udp_source", "label": "UDP Source", "flags": ["throttle", "python", "cpp"], "parameters": [{"id": "type", "label": "Output Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "ipaddr", "label": "IP Address", "dtype": "string", "default": "127.0.0.1"}, {"id": "port", "label": "Port", "dtype": "int", "default": "1234"}, {"id": "psize", "label": "Payload Size", "dtype": "int", "default": "1472"}, {"id": "eof", "label": "Null Pkt is EOF", "dtype": "bool", "default": "True"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "asserts": ["${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.udp_source(${type.size}*${vlen}, ${ipaddr}, ${port}, ${psize}, ${eof})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/udp_source.h>"], "declarations": "blocks::udp_source::sptr ${id};", "make": "this->${id} = blocks::udp_source::make(${type.size}*${vlen}, ${ipaddr}, ${port}, ${psize}, ${eof});", "translations": {"gr.sizeof_": "sizeof(", "True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_unpack_k_bits_bb.block.yml": {"id": "blocks_unpack_k_bits_bb", "label": "Unpack K Bits", "flags": ["python", "cpp"], "parameters": [{"id": "k", "label": "K", "dtype": "int"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.unpack_k_bits_bb(${k})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/unpack_k_bits_bb.h>"], "declarations": "blocks::unpack_k_bits_bb::sptr ${id};", "make": "this->${id} = blocks::unpack_k_bits_bb::make(${k});"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_unpacked_to_packed_xx.block.yml": {"id": "blocks_unpacked_to_packed_xx", "label": "Unpacked to Packed", "flags": ["python"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["int", "short", "byte"], "option_attributes": {"fcn": ["ii", "ss", "bb"]}, "hide": "part"}, {"id": "bits_per_chunk", "label": "Bits per Chunk", "dtype": "int", "default": "2"}, {"id": "endianness", "label": "Endianness", "dtype": "int", "options": ["gr.GR_MSB_FIRST", "gr.GR_LSB_FIRST"], "option_labels": ["MSB", "LSB"]}, {"id": "num_ports", "label": "Num Ports", "dtype": "int", "default": "1", "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "multiplicity": "${ num_ports }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "multiplicity": "${ num_ports }"}], "asserts": ["${ num_ports > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.unpacked_to_packed_${type.fcn}(${bits_per_chunk}, ${endianness})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/unpacked_to_packed.h>"], "declarations": "blocks::unpacked_to_packed_${type.fcn}::sptr ${id};", "make": "this->${id} = blocks::unpacked_to_packed_${type.fcn}::make(${bits_per_chunk}, ${endianness});"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_vco_c.block.yml": {"id": "blocks_vco_c", "label": "VCO (complex)", "flags": ["python", "cpp"], "parameters": [{"id": "samp_rate", "label": "Sample Rate", "dtype": "real"}, {"id": "sensitivity", "label": "Sensitivity", "dtype": "real"}, {"id": "amplitude", "label": "Amplitude", "dtype": "real"}], "inputs": [{"domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.vco_c(${samp_rate}, ${sensitivity}, ${amplitude})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/vco_c.h>"], "declarations": "blocks::vco_c::sptr ${id};", "make": "this->${id} = blocks::vco_c::make(${samp_rate}, ${sensitivity}, ${amplitude});"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_vco_f.block.yml": {"id": "blocks_vco_f", "label": "VCO", "flags": ["python", "cpp"], "parameters": [{"id": "samp_rate", "label": "Sample Rate", "dtype": "real"}, {"id": "sensitivity", "label": "Sensitivity", "dtype": "real"}, {"id": "amplitude", "label": "Amplitude", "dtype": "real"}], "inputs": [{"domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "float"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.vco_f(${samp_rate}, ${sensitivity}, ${amplitude})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/vco_f.h>"], "declarations": "blocks::vco_f::sptr ${id};", "make": "this->${id} = blocks::vco_f::make(${samp_rate}, ${sensitivity}, ${amplitude});"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_vector_insert_x.block.yml": {"id": "blocks_vector_insert_x", "label": "Vector Insert", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Output Type", "dtype": "enum", "options": ["byte", "complex", "float", "int", "short"], "option_attributes": {"fcn": ["b", "c", "f", "i", "s"], "vec_type": ["int_vector", "complex_vector", "real_vector", "int_vector", "int_vector"]}, "hide": "part"}, {"id": "vector", "label": "Vector", "dtype": "${ type.vec_type }", "default": "0, 0, 0"}, {"id": "period", "label": "Periodicity", "dtype": "int", "default": "100"}, {"id": "offset", "label": "Offset", "dtype": "int", "default": "0"}], "inputs": [{"domain": "stream", "dtype": "${ type }"}], "outputs": [{"domain": "stream", "dtype": "${ type }"}], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.vector_insert_${type.fcn}(${vector}, ${period}, ${offset})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/vector_insert.h>"], "declarations": "blocks::vector_insert_${type.fcn}::sptr ${id};", "make": "this->${id} = blocks::vector_insert_${type.fcn}::make(${vector}, ${period}, ${offset});"}, "documentation": "Periodicity, the length of the periodicity at which the vector should be inserted at the output.\n        (i.e. one vector for every N output items)\n\n        Offset specifies where in the cycle period we should begin at.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_vector_sink_x.block.yml": {"id": "blocks_vector_sink_x", "label": "Vector Sink", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Input Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"fcn": ["c", "f", "i", "s", "b"]}, "hide": "part"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "reserve_items", "label": "Reserve memory for items", "default": "1024", "dtype": "int", "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "asserts": ["${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.vector_sink_${type.fcn}(${vlen}, ${reserve_items})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/vector_sink.h>"], "declarations": "blocks::vector_sink_${type.fcn}::sptr ${id};", "make": "this->${id} = blocks::vector_sink_${type.fcn}::make(${vlen}, ${reserve_items});"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_vector_source_x.block.yml": {"id": "blocks_vector_source_x", "label": "Vector Source", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Output Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"fcn": ["c", "f", "i", "s", "b"], "vec_type": ["complex_vector", "real_vector", "int_vector", "int_vector", "int_vector"]}, "hide": "part"}, {"id": "vector", "label": "Vector", "dtype": "raw", "default": "(0, 0, 0)"}, {"id": "tags", "label": "Tags", "dtype": "raw", "default": "[]"}, {"id": "repeat", "label": "Repeat", "dtype": "enum", "default": "True", "options": ["True", "False"], "option_labels": ["Yes", "No"]}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "asserts": ["${ vlen > 0 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.vector_source_${type.fcn}(${vector}, ${repeat}, ${vlen}, ${tags})", "callbacks": ["set_data(${vector}, ${tags})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/vector_source.h>"], "declarations": "blocks::vector_source_${type.fcn}::sptr ${id};", "make": "this->${id} = blocks::vector_source_${type.fcn}::make(${vector}, ${repeat}, ${vlen}, ${tags});", "callbacks": ["set_data(${vector}, ${tags})"], "translations": {"True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_vector_to_stream.block.yml": {"id": "blocks_vector_to_stream", "label": "Vector to Stream", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "num_items", "label": "Num Items", "dtype": "int", "default": "2", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen*num_items }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "asserts": ["${ num_items > 0 }", "${ vlen >= 1 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.vector_to_stream(${type.size}*${vlen}, ${num_items})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/vector_to_stream.h>"], "declarations": "blocks::vector_to_stream::sptr ${id};", "make": "this->${id} = blocks::vector_to_stream::make(${type.size}*${vlen}, ${num_items});"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_vector_to_streams.block.yml": {"id": "blocks_vector_to_streams", "label": "Vector to Streams", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "num_streams", "label": "Num Streams", "dtype": "int", "default": "2", "hide": "part"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen*num_streams }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }", "multiplicity": "${ num_streams }"}], "asserts": ["${ num_streams > 0 }", "${ vlen >= 1 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.vector_to_streams(${type.size}*${vlen}, ${num_streams})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/vector_to_streams.h>"], "declarations": "blocks::vector_to_streams::sptr ${id};", "make": "this->${id} = blocks::vector_to_streams::make(${type.size}*${vlen}, ${num_streams});", "translations": {"gr.sizeof_": "sizeof("}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_wavfile_sink.block.yml": {"id": "blocks_wavfile_sink", "label": "Wav File Sink", "flags": ["python", "cpp"], "parameters": [{"id": "file", "label": "File", "dtype": "file_save"}, {"id": "nchan", "label": "N Channels", "dtype": "int", "default": "1", "hide": "part"}, {"id": "samp_rate", "label": "Sample Rate", "dtype": "int", "default": "samp_rate"}, {"id": "bits_per_sample", "label": "Bits per Sample", "dtype": "int", "default": "8"}], "inputs": [{"domain": "stream", "dtype": "float", "multiplicity": "${ nchan }"}], "asserts": ["${ 1 <= nchan }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.wavfile_sink(${file}, ${nchan}, ${samp_rate}, ${bits_per_sample})", "callbacks": ["open(${file})"]}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/wavfile_sink.h>"], "declarations": "blocks::wavfile_sink::sptr ${id};", "make": "this->${id} = blocks::wavfile_sink::make(${file}, ${nchan}, ${samp_rate}, ${bits_per_sample});", "callbacks": ["open(${file})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_wavfile_source.block.yml": {"id": "blocks_wavfile_source", "label": "Wav File Source", "flags": ["python", "cpp"], "parameters": [{"id": "file", "label": "File", "dtype": "file_open"}, {"id": "repeat", "label": "Repeat", "dtype": "enum", "default": "True", "options": ["True", "False"], "option_labels": ["Yes", "No"]}, {"id": "nchan", "label": "N Channels", "dtype": "int", "default": "1", "hide": "part"}], "outputs": [{"domain": "stream", "dtype": "float", "multiplicity": "${ nchan }"}], "asserts": ["${ 1 <= nchan }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.wavfile_source(${file}, ${repeat})"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/wavfile_source.h>"], "declarations": "blocks::wavfile_source::sptr ${id};", "make": "this->${id} = blocks::wavfile_source::make(${file}, ${repeat});", "translations": {"True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/blocks_xor_xx.block.yml": {"id": "blocks_xor_xx", "label": "Xor", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["int", "short", "byte"], "option_attributes": {"fcn": ["ii", "ss", "bb"]}, "hide": "part"}, {"id": "num_inputs", "label": "Num Inputs", "dtype": "int", "default": "2", "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "multiplicity": "${ num_inputs }"}], "outputs": [{"domain": "stream", "dtype": "${ type }"}], "asserts": ["${ num_inputs >= 2 }"], "templates": {"imports": "from gnuradio import blocks", "make": "blocks.xor_${type.fcn}()"}, "cpp_templates": {"includes": ["#include <gnuradio/blocks/xor_blk.h>"], "declarations": "blocks::xor_${type.fcn}::sptr ${id};", "make": "this->${id} = blocks::xor_${type.fcn}::make();"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/channels.tree.yml": {"[Core]": [{"Channel Models": ["channels_channel_model", "channels_channel_model2", "channels_conj_fs_iqcorr", "channels_fading_model", "channels_dynamic_channel_model", "channels_selective_fading_model", "channels_selective_fading_model2"]}, {"Impairment Models": ["channels_impairments", "channels_quantizer", "channels_phase_noise_gen", "channels_iqbal_gen", "channels_distortion_2_gen", "channels_distortion_3_gen", "channels_amp_bal", "channels_phase_bal", "channels_cfo_model", "channels_sro_model"]}]}, "/usr/local/share/gnuradio/grc/blocks/channels_amp_bal.block.yml": {"id": "channels_amp_bal", "label": "Amplitude Balance", "parameters": [{"id": "alpha", "label": "Alpha", "dtype": "float", "default": "0"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import channels", "make": "channels.amp_bal(${alpha})", "callbacks": ["set_alpha(${alpha})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/channels_cfo_model.block.yml": {"id": "channels_cfo_model", "label": "CFO Model", "parameters": [{"id": "srate", "label": "Sample Rate Hz", "dtype": "real", "default": "samp_rate"}, {"id": "stdev", "label": "CFO Standard Deviation Hz per sample", "dtype": "real", "default": "0.01"}, {"id": "maxdev", "label": "Max CFO Bound Hz", "dtype": "real", "default": "1e3"}, {"id": "seed", "label": "Seed", "dtype": "int", "default": "0"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import channels", "make": "channels.cfo_model(\n        ${srate},\n        ${stdev},\n        ${maxdev},\n        ${seed})", "callbacks": ["set_std_dev(${stdev})", "set_max_dev(${maxdev})", "set_samp_rate(${srate})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/channels_channel_model.block.yml": {"id": "channels_channel_model", "label": "Channel Model", "parameters": [{"id": "noise_voltage", "label": "Noise Voltage", "dtype": "real", "default": "0.0"}, {"id": "freq_offset", "label": "Frequency Offset", "dtype": "real", "default": "0.0"}, {"id": "epsilon", "label": "Epsilon", "dtype": "real", "default": "1.0"}, {"id": "taps", "label": "Taps", "dtype": "complex_vector", "default": "1.0 + 1.0j"}, {"id": "seed", "label": "Seed", "dtype": "int", "default": "0"}, {"id": "block_tags", "label": "Block Tag Propagation", "dtype": "enum", "default": "False", "options": ["True", "False"], "option_labels": ["Yes", "No"], "hide": "${ 'none' if block_tags == 'False' else 'part' }"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import channels\nfrom gnuradio.filter import firdes", "make": "channels.channel_model(\n    noise_voltage=${noise_voltage},\n    frequency_offset=${freq_offset},\n    epsilon=${epsilon},\n    taps=${taps},\n    noise_seed=${seed},\n    block_tags=${block_tags})", "callbacks": ["set_noise_voltage(${noise_voltage})", "set_frequency_offset(${freq_offset})", "set_taps(${taps})", "set_timing_offset(${epsilon})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/channels_channel_model2.block.yml": {"id": "channels_channel_model2", "label": "Channel Model 2", "parameters": [{"id": "noise_voltage", "label": "Noise Voltage", "dtype": "real", "default": "0.0"}, {"id": "epsilon", "label": "Time Offset", "dtype": "real", "default": "1.0"}, {"id": "taps", "label": "Taps", "dtype": "complex_vector", "default": "1.0 + 1.0j"}, {"id": "seed", "label": "Seed", "dtype": "int", "default": "0"}, {"id": "block_tags", "label": "Block Tag Propagation", "dtype": "enum", "default": "False", "options": ["True", "False"], "option_labels": ["Yes", "No"], "option_attributes": {"hide_block": ["", "part"]}, "hide": "${ block_tags.hide_block }"}], "inputs": [{"domain": "stream", "dtype": "complex"}, {"label": "freq", "domain": "stream", "dtype": "float"}, {"label": "time", "domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import channels\nfrom gnuradio.filter import firdes", "make": "channels.channel_model2(\n    noise_voltage=${noise_voltage},\n    epsilon=${epsilon},\n    taps=${taps},\n    noise_seed=${seed},\n    block_tags=${block_tags})", "callbacks": ["set_noise_voltage(${noise_voltage})", "set_taps(${taps})", "set_timing_offset(${epsilon})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/channels_conj_fs_iqcorr.block.yml": {"id": "channels_conj_fs_iqcorr", "label": "Freq. Selective IQ Correction", "parameters": [{"id": "delay", "label": "Delay", "dtype": "int", "default": "0"}, {"id": "taps", "label": "Taps", "dtype": "complex_vector", "default": "0"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import channels", "make": "channels.conj_fs_iqcorr(${delay}, ${taps})", "callbacks": ["set_delay(${delay})", "set_taps(${taps})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/channels_distortion_2_gen.block.yml": {"id": "channels_distortion_2_gen", "label": "Second Order Distortion", "parameters": [{"id": "beta", "label": "Distortion", "dtype": "float", "default": "0"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import channels", "make": "channels.distortion_2_gen(${beta})", "callbacks": ["set_beta(${beta})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/channels_distortion_3_gen.block.yml": {"id": "channels_distortion_3_gen", "label": "Third Order Distortion", "parameters": [{"id": "beta", "label": "Distortion", "dtype": "float", "default": "0"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import channels", "make": "channels.distortion_3_gen(${beta})", "callbacks": ["set_beta(${beta})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/channels_dynamic_channel_model.block.yml": {"id": "channels_dynamic_channel_model", "label": "Dynamic Channel Model", "parameters": [{"id": "samp_rate", "label": "Sample Rate Hz", "dtype": "real", "default": "samp_rate"}, {"id": "cfo_stdev", "label": "CFO Standard Deviation Hz per sample", "dtype": "real", "default": "0.01"}, {"id": "cfo_maxdev", "label": "Max CFO Bound Hz", "dtype": "real", "default": "1e3"}, {"id": "sro_stdev", "label": "SRO Standard Deviation Hz per sample", "dtype": "real", "default": "0.01"}, {"id": "sro_maxdev", "label": "Max SRO Bound Hz", "dtype": "real", "default": "1e3"}, {"id": "noise_amp", "label": "White Noise Amplitude", "dtype": "real", "default": "1.0"}, {"id": "N", "label": "Num Sinusoids (SoS model)", "dtype": "int", "default": "8"}, {"id": "fD", "label": "Max Doppler Freq (Hz)", "dtype": "real", "default": "2.0"}, {"id": "LOS", "label": "LOS Model", "dtype": "enum", "options": ["False", "True"], "option_labels": ["Rayleigh/NLOS", "Rician/LOS"], "option_attributes": {"hide_K": ["all", ""]}}, {"id": "K", "label": "Rician factor (K)", "dtype": "real", "default": "4.0", "hide": "${ LOS.hide_K }"}, {"id": "seed", "label": "Seed", "dtype": "int", "default": "0"}, {"id": "delays", "label": "PDP Delays (samp)", "dtype": "real_vector", "default": "0.0,0.1,1.3"}, {"id": "mags", "label": "PDP Magnitudes", "dtype": "real_vector", "default": "1,0.99,0.97"}, {"id": "ntaps", "label": "Num Taps", "dtype": "int", "default": "8"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import channels", "make": "channels.dynamic_channel_model(\n    ${samp_rate}, \n    ${sro_stdev}, \n    ${sro_maxdev},\n    ${cfo_stdev}, \n    ${cfo_maxdev}, \n    ${N}, \n    ${fD}, \n    ${LOS}, \n    ${K}, \n    ${delays}, \n    ${mags},\n    ${ntaps}, \n    ${noise_amp}, \n    ${seed})", "callbacks": ["set_samp_rate(${samp_rate})", "set_sro_dev_std(${sro_stdev})", "set_sro_dev_max(${sro_maxdev})", "set_cfo_dev_std(${cfo_stdev})", "set_cfo_dev_max(${cfo_maxdev})", "set_noise_amp(${noise_amp})", "set_doppler_freq(${fD})", "set_K(${K})"]}, "documentation": "The dynamic channel model is a hier block consisting of the following effects:\n        - Dynamic Frequency Selective Fading Channel\n        - Dynamic Center Frequency Offset Model\n        - Dynamic Sample Rate Offset Model\n        - Additive White Gaussian Noise\n\n    The desired power delay profile and max doppler frequency may be provided to achieve the desired Ricean or Rayleigh fading scenario.   For center frequency and sample rate offset models, a gaussian random walk process is conducted for each.   The single sample step variance and maximum deviation for these two processes is specified and may be modified to simulate various desired stability effects.  Lastly AWGN is added to simulate a typical receiver/thermal noise floor after propagation, and the variance may be modified here as desired.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/channels_fading_model.block.yml": {"id": "channels_fading_model", "label": "Fading Model", "parameters": [{"id": "N", "label": "Num Sinusoids (SoS model)", "dtype": "int", "default": "8"}, {"id": "fDTs", "label": "Normalized Max Doppler (fD*Ts)", "dtype": "real", "default": "10.0/samp_rate"}, {"id": "LOS", "label": "LOS Model", "dtype": "enum", "options": ["False", "True"], "option_labels": ["Rayleigh/NLOS", "Rician/LOS"], "option_attributes": {"hide_K": ["all", ""]}}, {"id": "K", "label": "Rician factor (K)", "dtype": "real", "default": "4.0", "hide": "${ LOS.hide_K }"}, {"id": "seed", "label": "Seed", "dtype": "int", "default": "0"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import channels", "make": "channels.fading_model( ${N}, ${fDTs}, ${LOS}, ${K}, ${seed} )", "callbacks": ["set_fDTs(${fDTs})", "set_K(${K})"]}, "documentation": "This algorithm implements the method described in\n   Compact Rayleigh and Rician fading simulator based on random walk processes\n   A. Alimohammad S.F. Fard B.F. Cockburn C. Schlegel\n   26th November 2008\n\n    int d_N=8;          // number of sinusoids\n    float d_fDTs=0.01   // normalized maximum doppler frequency (f_doppler / f_samprate)\n    float d_K=4;        // Rician factor (ratio of the specular power to the scattered power)\n    bool d_LOS=true;    // LOS path exists? chooses Rician (LOS) vs Rayleigh (NLOS) model.\n    int seed=0;         // noise seed", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/channels_impairments.block.yml": {"id": "channels_impairments", "label": "HW Impairments", "parameters": [{"id": "phase_noise_mag", "label": "Phase Noise Mag.", "dtype": "float", "default": "0"}, {"id": "magbal", "label": "IQ Mag. Imbalance", "dtype": "float", "default": "0"}, {"id": "phasebal", "label": "IQ Phase. Imbalance", "dtype": "float", "default": "0"}, {"id": "q_ofs", "label": "Quadrature Offset", "dtype": "float", "default": "0"}, {"id": "i_ofs", "label": "Inphase Offset", "dtype": "float", "default": "0"}, {"id": "freq_offset", "label": "Frequency Offset", "dtype": "float", "default": "0"}, {"id": "gamma", "label": "Second Order Distortion", "dtype": "float", "default": "0"}, {"id": "beta", "label": "Third Order Distortion", "dtype": "float", "default": "0"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import channels", "make": "channels.impairments(${phase_noise_mag}, ${magbal}, ${phasebal}, ${q_ofs}, ${i_ofs}, ${freq_offset}, ${gamma}, ${beta})", "callbacks": ["set_phase_noise_mag(${phase_noise_mag})", "set_magbal(${magbal})", "set_phasebal(${phasebal})", "set_q_ofs(${q_ofs})", "set_i_ofs(${i_ofs})", "set_freq_offset(${freq_offset})", "set_gamma(${gamma})", "set_beta(${beta})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/channels_iqbal_gen.block.yml": {"id": "channels_iqbal_gen", "label": "IQ Imbalance Generator", "parameters": [{"id": "mag", "label": "Magnitude", "dtype": "float", "default": "0"}, {"id": "phase", "label": "Phase", "dtype": "float", "default": "0"}, {"id": "mode", "label": "Origin", "dtype": "enum", "default": "0", "options": ["0", "1"], "option_labels": ["Transmitter", "Receiver"]}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import channels", "make": "channels.iqbal_gen(${mag}, ${phase}, ${mode})", "callbacks": ["set_magnitude(${mag})", "set_phase(${phase})"]}, "documentation": "This block implements the single branch IQ imbalance\ntransmitter and receiver models.\n\nDeveloped from source (2014):\n\"In-Phase and Quadrature Imbalance: Modeling, Estimation, and Compensation\"\n    TX Impairment:\n\n                                                       {R}--|Multiply: 10**(mag/20)|--+--|Multiply: cos(pi*degree/180)|--X1\nInput ---|Complex2Float|---|                                                               |--|Multiply: sin(pi*degree/180)|--X2\n                                                       {I}--|   Adder  |\n                                                      X2--|       (+)      |--X3\n\n                         X1--{R}--| Float 2     |--- Output\n                         X3---{I}--| Complex |\n\n   RX Impairment:\n\n                                                       {R}--|Multiply: cos(pi*degree/180)|-------|               |\nInput ---|Complex2Float|---|                                                                                  | Adder |--X1\n                                                        {I}--+--|Multiply: sin(pi*degree/180)|----|     (+)      |\n                                                                |\n                                                                +--X2\n\n                       X1--|Multiply: 10**(mag/20)|--{R}--| Float 2     |--- Output\n                       X2--------------------------------------------{I}--| Complex |\n\n   (ASCII ART adjusted for GRC viewing)", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/channels_phase_bal.block.yml": {"id": "channels_phase_bal", "label": "Phase Balance", "parameters": [{"id": "alpha", "label": "Alpha", "dtype": "float", "default": "0"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import channels", "make": "channels.phase_bal(${alpha})", "callbacks": ["set_alpha(${alpha})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/channels_phase_noise_gen.block.yml": {"id": "channels_phase_noise_gen", "label": "Phase Noise Generator", "parameters": [{"id": "noise_mag", "label": "Noise Magnitude", "dtype": "float", "default": "0"}, {"id": "alpha", "label": "Alpha", "dtype": "float", "default": "0.1"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import channels", "make": "channels.phase_noise_gen(${noise_mag}, ${alpha})", "callbacks": ["set_noise_mag(${noise_mag})", "set_alpha(${alpha})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/channels_quantizer.block.yml": {"id": "channels_quantizer", "label": "Quantizer", "parameters": [{"id": "bits", "label": "Bits", "dtype": "int", "default": "16"}], "inputs": [{"domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "float"}], "templates": {"imports": "from gnuradio import channels", "make": "channels.quantizer(${bits})", "callbacks": ["set_bits(${bits})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/channels_selective_fading_model.block.yml": {"id": "channels_selective_fading_model", "label": "Frequency Selective Fading Model", "parameters": [{"id": "N", "label": "Num Sinusoids (SoS model)", "dtype": "int", "default": "8"}, {"id": "fDTs", "label": "Normalized Max Doppler (fD*Ts)", "dtype": "real", "default": "10.0/samp_rate"}, {"id": "LOS", "label": "LOS Model", "dtype": "enum", "options": ["False", "True"], "option_labels": ["Rayleigh/NLOS", "Rician/LOS"], "option_attributes": {"hide_K": ["all", ""]}}, {"id": "K", "label": "Rician factor (K)", "dtype": "real", "default": "4.0", "hide": "${ LOS.hide_K }"}, {"id": "seed", "label": "Seed", "dtype": "int", "default": "0"}, {"id": "delays", "label": "PDP Delays (samp)", "dtype": "real_vector", "default": "(0.0,0.1,1.3)"}, {"id": "mags", "label": "PDP Magnitudes", "dtype": "real_vector", "default": "(1,0.99,0.97)"}, {"id": "ntaps", "label": "Num Taps", "dtype": "int", "default": "8"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import channels", "make": "channels.selective_fading_model( ${N}, ${fDTs}, ${LOS}, ${K}, ${seed}, ${delays}, ${mags}, ${ntaps} )", "callbacks": ["set_fDTs(${fDTs})", "set_K(${K})"]}, "documentation": "int d_N=8;          // number of sinusoids used to simulate gain on each ray\n    float d_fDTs=0.01   // normalized maximum doppler frequency (f_doppler / f_samprate)\n    float d_K=4;        // Rician factor (ratio of the specular power to the scattered power)\n    bool d_LOS=true;    // LOS path exists? chooses Rician (LOS) vs Rayleigh (NLOS) model.\n    int seed=0;         // noise seed\n    int ntaps;          // Number of FIR taps to use in selective fading model\n\n      These two vectors comprise the Power Delay Profile of the signal\n    float_vector delays   // Time delay in the fir filter (in samples) for each arriving WSSUS Ray\n    float_vector mags     // Magnitude corresponding to each WSSUS Ray\n\n    If using a LOS model, the first delay and mag should correspond with the LOS component\n\n  References:\n\n  The flat-fading portion of the algorithm implements the following\n   Compact Rayleigh and Rician fading simulator based on random walk processes\n   A. Alimohammad S.F. Fard B.F. Cockburn C. Schlegel\n   26th November 2008\n\n  The frequency selective extension of the block roughly implements\n   A Low-Complexity Hardware Implementation of Discrete-Time\n   Frequency-Selective Rayleigh Fading Channels\n   F. Ren and Y. Zheng\n   24-27 May 2009\n\n  Implementation by Tim O'Shea", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/channels_selective_fading_model2.block.yml": {"id": "channels_selective_fading_model2", "label": "Frequency Selective Fading Model2", "parameters": [{"id": "N", "label": "Num Sinusoids (Stochastic SoS model + delay drift)", "dtype": "int", "default": "8"}, {"id": "fDTs", "label": "Normalized Max Doppler (fD*Ts)", "dtype": "real", "default": "0.2/samp_rate"}, {"id": "LOS", "label": "LOS Model", "dtype": "enum", "options": ["False", "True"], "option_labels": ["Rayleigh/NLOS", "Rician/LOS"], "option_attributes": {"hide_K": ["all", ""]}}, {"id": "K", "label": "Rician factor (K)", "dtype": "real", "default": "4.0", "hide": "${ LOS.hide_K }"}, {"id": "seed", "label": "Seed", "dtype": "int", "default": "0"}, {"id": "delays", "label": "PDP Delays (in samps)", "dtype": "real_vector", "default": "(1.0,1.9,2.7)"}, {"id": "delay_std", "label": "PDP Delay StdDev (per samp)", "dtype": "real_vector", "default": "(1e-4,1e-4,1e-4)"}, {"id": "delay_maxdev", "label": "PDP Delay Max-Dev (per samp)", "dtype": "real_vector", "default": "(0.5,0.7,0.9)"}, {"id": "mags", "label": "PDP Magnitudes", "dtype": "real_vector", "default": "(1,0.95,0.8)"}, {"id": "ntaps", "label": "Num Taps", "dtype": "int", "default": "8"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}, {"domain": "message", "id": "taps", "optional": true}], "templates": {"imports": "from gnuradio import channels", "make": "channels.selective_fading_model2( ${N}, ${fDTs}, ${LOS}, ${K}, ${seed}, ${delays}, ${delay_std}, ${delay_maxdev}, ${mags}, ${ntaps} )", "callbacks": ["set_fDTs(${fDTs})", "set_K(${K})"]}, "documentation": "int d_N=8;          // number of sinusoids used to simulate gain on each ray\n    float d_fDTs=0.01   // normalized maximum doppler frequency (f_doppler / f_samprate)\n    float d_K=4;        // Rician factor (ratio of the specular power to the scattered power)\n    bool d_LOS=true;    // LOS path exists? chooses Rician (LOS) vs Rayleigh (NLOS) model.\n    int seed=0;         // noise seed\n    int ntaps;          // Number of FIR taps to use in selective fading model\n\n      These two vectors comprise the Power Delay Profile of the signal\n    float_vector delays   // Time delay in the fir filter (in samples) for each arriving WSSUS Ray\n    float_vector mags     // Magnitude corresponding to each WSSUS Ray\n\n    If using a LOS model, the first delay and mag should correspond with the LOS component\n\n  References:\n\n  The flat-fading portion of the algorithm implements the following\n   Compact Rayleigh and Rician fading simulator based on random walk processes\n   A. Alimohammad S.F. Fard B.F. Cockburn C. Schlegel\n   26th November 2008\n    (Algorithm III)\n    ( with a novel addition of time delay tap random walk )\n\n  The frequency selective extension of the block roughly implements\n   A Low-Complexity Hardware Implementation of Discrete-Time\n   Frequency-Selective Rayleigh Fading Channels\n   F. Ren and Y. Zheng\n   24-27 May 2009\n\n  Implementation by Tim O'Shea", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/channels_sro_model.block.yml": {"id": "channels_sro_model", "label": "SRO Model", "parameters": [{"id": "srate", "label": "Sample Rate Hz", "dtype": "real", "default": "samp_rate"}, {"id": "stdev", "label": "SRO Standard Deviation Hz per sample", "dtype": "real", "default": "0.01"}, {"id": "maxdev", "label": "Max SRO Bound Hz", "dtype": "real", "default": "1e3"}, {"id": "seed", "label": "Seed", "dtype": "int", "default": "0"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import channels", "make": "channels.sro_model(\n        ${srate},\n        ${stdev},\n        ${maxdev},\n        ${seed})", "callbacks": ["set_std_dev(${stdev})", "set_max_dev(${maxdev})", "set_samp_rate(${srate})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital.tree.yml": {"[Core]": [{"Coding": ["digital_additive_scrambler_bb", "digital_descrambler_bb", "digital_scrambler_bb"]}, {"Equalizers": ["digital_cma_equalizer_cc", "digital_lms_dd_equalizer_cc", "digital_kurtotic_equalizer_cc"]}, {"Measurement Tools": ["digital_mpsk_snr_est_cc", "digital_probe_density_b", "digital_probe_mpsk_snr_est_c"]}, {"Modulators": ["digital_cpmmod_bc", "digital_gfsk_mod", "digital_gfsk_demod", "digital_gmskmod_bc", "digital_gmsk_mod", "digital_gmsk_demod", "digital_constellation_modulator", "digital_constellation_receiver_cb", "variable_constellation", "variable_constellation_rect", "variable_modulate_vector"]}, {"Packet Operators": ["digital_correlate_access_code_tag_bb", "digital_correlate_access_code_xx_ts", "digital_crc32_bb", "digital_crc32_async_bb", "digital_framer_sink_1", "variable_header_format_default", "digital_protocol_formatter_async", "digital_protocol_formatter_bb", "digital_protocol_parser_b", "digital_header_payload_demux", "digital_packet_headergenerator_bb", "digital_packet_headergenerator_bb_default", "digital_packet_headerparser_b", "digital_packet_headerparser_b_default", "digital_packet_sink", "digital_hdlc_framer_pb", "digital_hdlc_deframer_bp", "digital_simple_framer", "digital_simple_correlator"]}, {"OFDM": ["digital_ofdm_mod", "digital_ofdm_demod", "digital_ofdm_carrier_allocator_cvc", "digital_ofdm_chanest_vcvc", "digital_ofdm_cyclic_prefixer", "digital_ofdm_frame_acquisition", "digital_ofdm_frame_equalizer_vcvc", "digital_ofdm_frame_sink", "digital_ofdm_insert_preamble", "digital_ofdm_rx", "digital_ofdm_sampler", "digital_ofdm_serializer_vcc", "digital_ofdm_sync_pn", "digital_ofdm_sync_sc_cfb", "digital_ofdm_tx"]}, {"Symbol Coding": ["digital_binary_slicer_fb", "digital_chunks_to_symbols_xx", "digital_constellation_decoder_cb", "digital_constellation_receiver_cb", "digital_constellation_soft_decoder_cf", "digital_diff_decoder_bb", "digital_diff_encoder_bb", "digital_diff_phasor_cc", "digital_map_bb"]}, {"Synchronizers": ["digital_clock_recovery_mm_xx", "digital_costas_loop_cc", "digital_fll_band_edge_cc", "digital_pfb_clock_sync_xxx", "digital_pn_correlator_cc", "digital_symbol_sync_xx", "digital_corr_est_cc"]}, {"Waveform Generators": ["digital_glfsr_source_x"]}, {"Deprecated": ["digital_correlate_access_code_bb", "digital_simple_framer", "digital_simple_correlator"]}]}, "/usr/local/share/gnuradio/grc/blocks/digital_additive_scrambler_bb.block.yml": {"id": "digital_additive_scrambler_bb", "label": "Additive Scrambler", "flags": ["python", "cpp"], "parameters": [{"id": "mask", "label": "Mask", "dtype": "hex", "default": "0x8A"}, {"id": "seed", "label": "Seed", "dtype": "hex", "default": "0x7F"}, {"id": "len", "label": "Length", "dtype": "int", "default": "7"}, {"id": "count", "label": "Count", "dtype": "int", "default": "0"}, {"id": "bits_per_byte", "label": "Bits per byte", "dtype": "int", "default": "1"}, {"id": "reset_tag_key", "label": "Reset tag key", "dtype": "string", "default": "\"\""}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.additive_scrambler_bb(${mask}, ${seed}, ${len}, count=${count}, bits_per_byte=${bits_per_byte}, reset_tag_key=${reset_tag_key})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/additive_scrambler_bb.h>"], "declarations": "digital::additive_scrambler_bb::sptr ${id};", "make": "this->${id} = digital::additive_scrambler_bb::make(\n    ${mask},\n    ${seed},\n    ${len},\n    count=${count},\n    bits_per_byte=${bits_per_byte},\n    reset_tag_key=${reset_tag_key});", "link": ["gnuradio-digital"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_binary_slicer_fb.block.yml": {"id": "digital_binary_slicer_fb", "label": "Binary Slicer", "flags": ["python", "cpp"], "inputs": [{"domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.binary_slicer_fb()"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/binary_slicer_fb.h>"], "declarations": "digital::binary_slicer_fb::sptr ${id};", "make": "this->${id} = digital::binary_slicer_fb::make();", "link": ["gnuradio-digital"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_burst_shaper.block.yml": {"id": "digital_burst_shaper_xx", "label": "Burst Shaper", "category": "[Core]/Packet Operators", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["float", "complex"], "option_attributes": {"fcn": ["ff", "cc"], "taps": ["float_vector", "complex_vector"]}, "hide": "part"}, {"id": "window", "label": "Window Taps", "dtype": "${ type.taps }", "default": "([])"}, {"id": "pre_padding", "label": "Pre-padding Length", "dtype": "int", "default": "0"}, {"id": "post_padding", "label": "Post-padding Length", "dtype": "int", "default": "0"}, {"id": "insert_phasing", "label": "Insert phasing symbols", "dtype": "enum", "default": "False", "options": ["False", "True"], "option_labels": ["No", "Yes"]}, {"id": "length_tag_name", "label": "Length Tag Name", "dtype": "string", "default": "\"packet_len\""}], "inputs": [{"domain": "stream", "dtype": "${ type }"}], "outputs": [{"domain": "stream", "dtype": "${ type }"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.burst_shaper_${type.fcn}(${window}, ${pre_padding}, ${post_padding}, ${insert_phasing}, ${length_tag_name})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/burst_shaper.h>"], "declarations": "digital::burst_shaper_${type.fcn}::sptr ${id};", "make": "% if str(type.taps)==\"float_vector\":\nstd::vector<float> window = {${str(window)[1:-1]}};\n% else:\nstd::vector<gr_complex> window = {${str(window)[1:-1]}};\n% endif\nthis->${id} = digital::burst_shaper_${type.fcn}::make(\n    window,\n    ${pre_padding},\n    ${post_padding},\n    ${insert_phasing},\n    ${length_tag_name});", "link": ["gnuradio-digital"], "translations": {"True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_chunks_to_symbols.block.yml": {"id": "digital_chunks_to_symbols_xx", "label": "Chunks to Symbols", "flags": ["python", "cpp"], "parameters": [{"id": "in_type", "label": "Input Type", "dtype": "enum", "options": ["int", "short", "byte"], "option_attributes": {"fcn": ["i", "s", "b"]}, "hide": "part"}, {"id": "out_type", "label": "Output Type", "dtype": "enum", "options": ["complex", "float"], "option_attributes": {"fcn": ["c", "f"], "table": ["complex_vector", "real_vector"]}, "hide": "part"}, {"id": "symbol_table", "label": "Symbol Table", "dtype": "${ out_type.table }"}, {"id": "dimension", "label": "Dimension", "dtype": "int", "default": "2"}, {"id": "num_ports", "label": "Num Ports", "dtype": "int", "default": "1", "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "${ in_type }", "multiplicity": "${ num_ports }"}, {"domain": "message", "id": "set_symbol_table", "optional": true}], "outputs": [{"domain": "stream", "dtype": "${ out_type }", "multiplicity": "${ num_ports }"}, {"domain": "message", "id": "set_symbol_table", "optional": true}], "asserts": ["${ num_ports > 0 }"], "templates": {"imports": "from gnuradio import digital", "make": "digital.chunks_to_symbols_${in_type.fcn}${out_type.fcn}(${symbol_table}, ${dimension})", "callbacks": ["set_symbol_table(${symbol_table})"]}, "cpp_templates": {"includes": ["#include <gnuradio/digital/chunks_to_symbols.h>"], "declarations": "digital::chunks_to_symbols_${in_type.fcn}${out_type.fcn}::sptr ${id};", "make": "% if str(out_type.table)==\"float_vector\":\nstd::vector<float> symbol_table = {${str(symbol_table)[1:-1]}};\n% else:\nstd::vector<gr_complex> symbol_table = {${str(symbol_table)[1:-1]}};\n% endif\nthis->${id} = digital::chunks_to_symbols_${in_type.fcn}${out_type.fcn}::make(\n    symbol_table,\n    ${dimension});", "link": ["gnuradio-digital"], "callbacks": ["set_symbol_table(symbol_table)"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_clock_recovery_mm_xx.block.yml": {"id": "digital_clock_recovery_mm_xx", "label": "Clock Recovery MM", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["complex", "float"], "option_attributes": {"fcn": ["cc", "ff"]}, "hide": "part"}, {"id": "omega", "label": "Omega", "dtype": "real", "default": "samp_per_sym*(1+0.0)"}, {"id": "gain_omega", "label": "Gain Omega", "dtype": "real", "default": "0.25*0.175*0.175"}, {"id": "mu", "label": "Mu", "dtype": "real", "default": "0.5"}, {"id": "gain_mu", "label": "Gain Mu", "dtype": "real", "default": "0.175"}, {"id": "omega_relative_limit", "label": "Omega Relative Limit", "dtype": "real", "default": "0.005"}], "inputs": [{"domain": "stream", "dtype": "${ type }"}], "outputs": [{"domain": "stream", "dtype": "${ type }"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.clock_recovery_mm_${type.fcn}(${omega}, ${gain_omega}, ${mu}, ${gain_mu}, ${omega_relative_limit})", "callbacks": ["set_omega(${omega})", "set_gain_omega(${gain_omega})", "set_mu(${mu})", "set_gain_mu(${gain_mu})"]}, "cpp_templates": {"includes": ["#include <gnuradio/digital/clock_recovery_mm_${type.fcn}.h>"], "declarations": "digital::clock_recovery_mm_${type.fcn}::sptr ${id};", "make": "this->${id} = digital::clock_recovery_mm_${in_type.fcn}::make(\n    ${omega},\n    ${gain_omega},\n    ${mu},\n    ${gain_mu},\n    ${omega_relative_limit});", "link": ["gnuradio-digital"], "callbacks": ["set_omega(${omega})", "set_gain_omega(${gain_omega})", "set_mu(${mu})", "set_gain_mu(${gain_mu})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_cma_equalizer_cc.block.yml": {"id": "digital_cma_equalizer_cc", "label": "CMA Equalizer", "flags": ["python", "cpp"], "parameters": [{"id": "num_taps", "label": "Num. Taps", "dtype": "int"}, {"id": "modulus", "label": "Modulus", "dtype": "real"}, {"id": "mu", "label": "Gain", "dtype": "real"}, {"id": "sps", "label": "Samples per Symbol", "dtype": "int"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.cma_equalizer_cc(${num_taps}, ${modulus}, ${mu}, ${sps})", "callbacks": ["set_gain(${mu})", "set_modulus(${modulus})"]}, "cpp_templates": {"includes": ["#include <gnuradio/digital/cma_equalizer_cc.h>"], "declarations": "digital::cma_equalizer_cc::sptr ${id};", "make": "this->${id} = digital::cma_equalizer_cc::make(${num_taps}, ${modulus}, ${mu}, ${sps});", "link": ["gnuradio-digital"], "callbacks": ["set_gain(${mu})", "set_modulus(${modulus})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_constellation.block.yml": {"id": "variable_constellation", "label": "Constellation Object", "category": "Modulators", "flags": ["show_id", "python", "cpp"], "parameters": [{"id": "type", "label": "Constellation Type", "dtype": "enum", "options": ["calcdist", "bpsk", "qpsk", "dqpsk", "8psk", "16qam"], "option_labels": ["Variable Constellation", "BPSK", "QPSK", "DQPSK", "8PSK", "16QAM"]}, {"id": "sym_map", "label": "Symbol Map", "dtype": "int_vector", "default": "[0, 1, 3, 2]", "hide": "${ ( 'none' if str(type) == \"calcdist\" else 'all') }"}, {"id": "const_points", "label": "Constellation Points", "dtype": "complex_vector", "default": "[-1-1j, -1+1j, 1+1j, 1-1j]", "hide": "${ ( 'none' if str(type) == \"calcdist\" else 'all') }"}, {"id": "rot_sym", "label": "Rotational Symmetry", "dtype": "int", "default": "4", "hide": "${ ( 'none' if str(type) == \"calcdist\" else 'all') }"}, {"id": "dims", "label": "Dimensionality", "dtype": "int", "default": "1", "hide": "${ ( 'none' if str(type) == \"calcdist\" else 'all') }"}, {"id": "precision", "label": "Soft Decisions Precision", "dtype": "int", "default": "8", "hide": "part"}, {"id": "soft_dec_lut", "label": "Soft Decisions LUT", "dtype": "raw", "default": "None", "hide": "${ ('part' if str(soft_dec_lut) == 'None' else 'none') }"}], "value": "${ digital.constellation_calcdist(const_points, sym_map, rot_sym, dims) if (str(type) == \"calcdist\") else getattr(digital,'constellation_'+str(type))()  }", "templates": {"imports": "from gnuradio import digital", "var_make": "% if str(type) == \"calcdist\":\nself.${id} = ${id} = digital.constellation_calcdist(${const_points}, ${sym_map},\n${rot_sym}, ${dims}).base()\n% else:\nself.${id} = ${id} = digital.constellation_${type}().base()\n% endif\n% if str(soft_dec_lut).lower() == '\"auto\"' or str(soft_dec_lut).lower() == \"'auto'\":\nself.${id}.gen_soft_dec_lut(${precision})\n% elif str(soft_dec_lut) != \"None\":\nself.${id}.set_soft_dec_lut(${soft_dec_lut}, ${precision})\n% endif"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/constellation.h>"], "declarations": "digital::constellation::sptr ${id};", "var_make": "std::vector<int> sym_map = {${str(sym_map)[1:-1]}};\nstd::vector<gr_complex> const_points = {${str(const_points)[1:-1]}};\n% if str(type) == \"calcdist\":\nthis->${id} = digital::constellation_calcdist(const_points, sym_map,\n${rot_sym}, ${dims}).base();\n% else:\nthis->${id} = ${id} = digital::constellation_${type}().base();\n% endif\n% if str(soft_dec_lut).lower() == '\"auto\"' or str(soft_dec_lut).lower() == \"'auto'\":\nthis->${id}.gen_soft_dec_lut(${precision});\n% elif str(soft_dec_lut) != \"None\":\nthis->${id}.set_soft_dec_lut(${soft_dec_lut}, ${precision});\n% endif", "link": ["gnuradio-digital"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_constellation_decoder_cb.block.yml": {"id": "digital_constellation_decoder_cb", "label": "Constellation Decoder", "flags": ["python", "cpp"], "parameters": [{"id": "constellation", "label": "Constellation Object", "dtype": "raw"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.constellation_decoder_cb(${constellation})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/constellation_decoder_cb.h>"], "declarations": "digital::constellation_decoder_cb::sptr ${id};", "make": "this->${id} = digital::constellation_decoder_cb::make(${constellation});", "link": ["gnuradio-digital"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_constellation_modulator.block.yml": {"id": "digital_constellation_modulator", "label": "Constellation Modulator", "flags": ["python"], "parameters": [{"id": "constellation", "label": "Constellation", "dtype": "raw"}, {"id": "differential", "label": "Differential Encoding", "dtype": "bool", "default": "True", "options": ["True", "False"], "option_labels": ["Yes", "No"]}, {"id": "samples_per_symbol", "label": "Samples/Symbol", "dtype": "int", "default": "2"}, {"id": "excess_bw", "label": "Excess BW", "dtype": "real", "default": "0.35"}, {"id": "verbose", "label": "Verbose", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["On", "Off"], "hide": "${ ('part' if str(verbose) == 'False' else 'none') }"}, {"id": "log", "label": "Log", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["On", "Off"], "hide": "${ ('part' if str(log) == 'False' else 'none') }"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.generic_mod(\n    constellation=${constellation},\n    differential=${differential},\n    samples_per_symbol=${samples_per_symbol},\n    pre_diff_code=True,\n    excess_bw=${excess_bw},\n    verbose=${verbose},\n    log=${log})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_constellation_receiver_cb.block.yml": {"id": "digital_constellation_receiver_cb", "label": "Constellation Receiver", "flags": ["python", "cpp"], "parameters": [{"id": "constellation", "label": "Constellation Object", "dtype": "raw"}, {"id": "loop_bw", "label": "Loop Bandwidth", "dtype": "real"}, {"id": "fmin", "label": "Minimum Freq Deviation", "dtype": "real"}, {"id": "fmax", "label": "Maximum Freq Deviation", "dtype": "real"}, {"id": "showports", "label": "Show Msg Ports", "dtype": "bool", "default": "False", "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "complex"}, {"domain": "message", "id": "set_constellation", "optional": true, "hide": "${ not showports }"}, {"domain": "message", "id": "rotate_phase", "optional": true, "hide": "${ not showports }"}], "outputs": [{"domain": "stream", "dtype": "byte"}, {"label": "error", "domain": "stream", "dtype": "float", "optional": true}, {"label": "phase", "domain": "stream", "dtype": "float", "optional": true}, {"label": "frequency", "domain": "stream", "dtype": "float", "optional": true}, {"label": "symbol", "domain": "stream", "dtype": "complex", "optional": true}], "templates": {"imports": "from gnuradio import digital", "make": "digital.constellation_receiver_cb(${constellation}, ${loop_bw}, ${fmin}, ${fmax})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/constellation_receiver_cb.h>"], "declarations": "digital::constellation_receiver_cb::sptr ${id};", "make": "this->${id} = digital::constellation_receiver_cb::make(\n    ${constellation},\n    ${loop_bw},\n    ${fmin},\n    ${fmax}));", "link": ["gnuradio-digital"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_constellation_rect.block.yml": {"id": "variable_constellation_rect", "label": "Constellation Rect. Object", "category": "Modulators", "flags": ["show_id", "python"], "parameters": [{"id": "sym_map", "label": "Symbol Map", "dtype": "int_vector", "default": "[0, 1, 3, 2]"}, {"id": "const_points", "label": "Constellation Points", "dtype": "complex_vector", "default": "[-1-1j, -1+1j, 1+1j, 1-1j]"}, {"id": "rot_sym", "label": "Rotational Symmetry", "dtype": "int", "default": "4"}, {"id": "real_sect", "label": "Real Sectors", "dtype": "int", "default": "2"}, {"id": "imag_sect", "label": "Imaginary Sectors", "dtype": "int", "default": "2"}, {"id": "w_real_sect", "label": "Width Real Sectors", "dtype": "int", "default": "1"}, {"id": "w_imag_sect", "label": "Width Imaginary Sectors", "dtype": "int", "default": "1"}, {"id": "precision", "label": "Soft bits precision", "dtype": "int", "default": "8", "hide": "part"}, {"id": "soft_dec_lut", "label": "Soft Decisions LUT", "dtype": "raw", "default": "None", "hide": "${ ('part' if str(soft_dec_lut) == 'None' else 'none') }"}], "value": "${ digital.constellation_rect(const_points, sym_map, rot_sym, real_sect, imag_sect, w_real_sect, w_imag_sect) }", "templates": {"imports": "from gnuradio import digital", "var_make": "self.${id} = ${id} = digital.constellation_rect(${const_points}, ${sym_map},\n${rot_sym}, ${real_sect}, ${imag_sect}, ${w_real_sect}, ${w_imag_sect}).base()\n% if str(soft_dec_lut).lower() == '\"auto\"' or str(soft_dec_lut).lower() == \"'auto'\":\nself.${id}.gen_soft_dec_lut(${precision})\n% elif str(soft_dec_lut) != \"None\":\nself.${id}.set_soft_dec_lut(${soft_dec_lut}, ${precision})\n% endif"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_constellation_soft_decoder_cf.block.yml": {"id": "digital_constellation_soft_decoder_cf", "label": "Constellation Soft Decoder", "flags": ["python", "cpp"], "parameters": [{"id": "constellation", "label": "Constellation Object", "dtype": "raw"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "float"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.constellation_soft_decoder_cf(${constellation})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/constellation_soft_decoder_cf.h>"], "declarations": "digital::constellation_soft_decoder_cf::sptr ${id};", "make": "this->${id} = digital::constellation_soft_decoder_cf::make(${constellation});", "link": ["gnuradio-digital"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_corr_est_cc.block.yml": {"id": "digital_corr_est_cc", "label": "Correlation Estimator", "flags": ["python", "cpp"], "parameters": [{"id": "symbols", "label": "Symbols", "dtype": "complex_vector"}, {"id": "sps", "label": "Samples per Symbol", "dtype": "float"}, {"id": "mark_delay", "label": "Tag marking delay", "dtype": "int"}, {"id": "threshold", "label": "Threshold", "dtype": "float", "default": "0.9"}, {"id": "threshold_method", "label": "Threshold Method", "dtype": "enum", "options": ["digital.THRESHOLD_ABSOLUTE", "digital.THRESHOLD_DYNAMIC"], "option_labels": ["Absolute", "Dynamic"]}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}, {"label": "corr", "domain": "stream", "dtype": "complex", "optional": true}], "templates": {"imports": "from gnuradio import digital", "make": "digital.corr_est_cc(${symbols}, ${sps}, ${mark_delay}, ${threshold}, ${threshold_method})", "callbacks": ["set_mark_delay(${mark_delay})", "set_threshold(${threshold})"]}, "cpp_templates": {"includes": ["#include <gnuradio/digital/corr_est_cc.h>"], "declarations": "digital::corr_est_cc::sptr ${id};", "make": "std::vector<gr_complex> symbols = {${str(symbols)[1:-1]}};\nthis->${id} = digital::corr_est_cc::make(\n    symbols,\n    ${sps},\n    ${mark_delay},\n    ${threshold},\n    ${threshold_method});", "link": ["gnuradio-digital"], "callbacks": ["set_mark_delay(${mark_delay})", "set_threshold(${threshold})"], "translations": {"digital.": "digital::"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_correlate_access_code_bb.block.yml": {"id": "digital_correlate_access_code_bb", "label": "Correlate Access Code", "flags": ["python", "cpp"], "parameters": [{"id": "access_code", "label": "Access Code", "dtype": "string", "default": "101010"}, {"id": "threshold", "label": "Threshold", "dtype": "int"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.correlate_access_code_bb(${access_code}, ${threshold})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/correlate_access_code_bb.h>"], "declarations": "digital::correlate_access_code_bb::sptr ${id};", "make": "this->${id} = digital::correlate_access_code_bb::make(${access_code}, ${threshold});", "link": ["gnuradio-digital"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_correlate_access_code_tag_xx.block.yml": {"id": "digital_correlate_access_code_tag_xx", "label": "Correlate Access Code - Tag", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["byte", "float"], "option_attributes": {"fcn": ["bb", "ff"]}, "hide": "part"}, {"id": "access_code", "label": "Access Code", "dtype": "string", "default": "101010"}, {"id": "threshold", "label": "Threshold", "dtype": "int"}, {"id": "tagname", "label": "Tag Name", "dtype": "string"}], "inputs": [{"domain": "stream", "dtype": "${ type }"}], "outputs": [{"domain": "stream", "dtype": "${ type }"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.correlate_access_code_tag_${type.fcn}(${access_code}, ${threshold}, ${tagname})", "callbacks": ["set_access_code(${access_code})", "set_threshold(${threshold})", "set_tagname(${tagname})"]}, "cpp_templates": {"includes": ["#include <gnuradio/digital/correlate_access_code_tag_${type.fcn}.h>"], "declarations": "digital::correlate_access_code_tag_${type.fcn}::sptr ${id};", "make": "this->${id} = digital::correlate_access_code_tag_${type.fcn}::make(\n    ${access_code},\n    ${threshold},\n    ${tagname});", "link": ["gnuradio-digital"], "callbacks": ["set_access_code(${access_code})", "set_threshold(${threshold})", "set_tagname(${tagname})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_correlate_access_code_xx_ts.block.yml": {"id": "digital_correlate_access_code_xx_ts", "label": "Correlate Access Code - Tag Stream", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["float", "byte"], "option_attributes": {"fcn": ["ff", "bb"]}, "hide": "part"}, {"id": "access_code", "label": "Access Code", "dtype": "string", "default": "101010"}, {"id": "threshold", "label": "Threshold", "dtype": "int"}, {"id": "tagname", "label": "Tag Name", "dtype": "string"}], "inputs": [{"domain": "stream", "dtype": "${ type }"}], "outputs": [{"domain": "stream", "dtype": "${ type }"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.correlate_access_code_${type.fcn}_ts(${access_code},\n  ${threshold}, ${tagname})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/correlate_access_code_${type.fcn}_ts.h>"], "declarations": "digital::correlate_access_code_${type.fcn}_ts::sptr ${id};", "make": "this->${id} = digital::correlate_access_code_${type.fcn}_ts::make(\n    ${access_code},\n    ${threshold},\n    ${tagname});", "link": ["gnuradio-digital"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_costas_loop_cc.block.yml": {"id": "digital_costas_loop_cc", "label": "Costas Loop", "flags": ["python", "cpp"], "parameters": [{"id": "w", "label": "Loop Bandwidth", "dtype": "real"}, {"id": "order", "label": "Order", "dtype": "int"}, {"id": "use_snr", "label": "Use SNR", "dtype": "enum", "default": "False", "options": ["True", "False"], "option_labels": ["Yes", "No"], "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "complex"}, {"domain": "message", "id": "noise", "optional": true}], "outputs": [{"domain": "stream", "dtype": "complex"}, {"label": "frequency", "domain": "stream", "dtype": "float", "optional": true}, {"label": "phase", "domain": "stream", "dtype": "float", "optional": true}, {"label": "error", "domain": "stream", "dtype": "float", "optional": true}], "templates": {"imports": "from gnuradio import digital", "make": "digital.costas_loop_cc(${w}, ${order}, ${use_snr})", "callbacks": ["set_loop_bandwidth(${w})"]}, "cpp_templates": {"includes": ["#include <gnuradio/digital/costas_loop_cc.h>"], "declarations": "digital::costas_loop_cc::sptr ${id};", "make": "this->${id} = digital::costas_loop_cc::make(\n    ${w},\n    ${order},\n    ${use_snr});", "link": ["gnuradio-digital"], "callbacks": ["set_loop_bandwidth(${w})"], "translations": {"True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_cpmmod_bc.block.yml": {"id": "digital_cpmmod_bc", "label": "Continuous Phase Modulation", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "CPM Type", "dtype": "enum", "options": ["analog.cpm.LREC", "analog.cpm.LRC", "analog.cpm.LSRC", "analog.cpm.TFM", "analog.cpm.GAUSSIAN"], "option_labels": ["L-REC (Rectangular phase response)", "L-RC (Raised Cosine)", "L-SRC (Spectral raised cosine)", "TFM (Tamed frequency modulation)", "Gaussian"]}, {"id": "mod_index", "label": "Modulation Index", "dtype": "real", "default": "0.5"}, {"id": "samples_per_symbol", "label": "Samples/Symbol", "dtype": "int", "default": "4"}, {"id": "L", "label": "Pulse Duration (Symbols)", "dtype": "int", "default": "4"}, {"id": "beta", "label": "Phase Response Parameter (BT or Beta)", "dtype": "real", "default": "0.3"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import gr, digital, analog", "make": "digital.cpmmod_bc(${type}, ${mod_index}, ${samples_per_symbol}, ${L}, ${beta})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/cpmmod_bc.h>"], "declarations": "digital::cpmmod_bc::sptr ${id};", "make": "this->${id} = digital::cpmmod_bc::make(\n    ${type},\n    ${mod_index},\n    ${samples_per_symbol},\n    ${L},\n    ${beta});", "link": ["gnuradio-digital"], "translations": {"analog.cpm.": "analog::cpm::"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_crc32_async_bb.block.yml": {"id": "digital_crc32_async_bb", "label": "Async CRC32", "flags": ["python", "cpp"], "parameters": [{"id": "check", "label": "Mode", "dtype": "enum", "options": ["False", "True"], "option_labels": ["Generate CRC", "Check CRC"]}], "inputs": [{"domain": "message", "id": "in", "optional": true}], "outputs": [{"domain": "message", "id": "out", "optional": true}], "templates": {"imports": "from gnuradio import digital", "make": "digital.crc32_async_bb(${check})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/crc32_async_bb.h>"], "declarations": "digital::crc32_async_bb::sptr ${id};", "make": "this->${id} = digital::crc32_async_bb::make(\n    ${check});", "link": ["gnuradio-digital"], "translations": {"True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_crc32_bb.block.yml": {"id": "digital_crc32_bb", "label": "Stream CRC32", "flags": ["python", "cpp"], "parameters": [{"id": "check", "label": "Mode", "dtype": "enum", "options": ["False", "True"], "option_labels": ["Generate CRC", "Check CRC"]}, {"id": "lengthtagname", "label": "Length tag name", "dtype": "string", "default": "\"packet_len\""}, {"id": "packed", "label": "Packed", "dtype": "bool", "default": "True", "options": ["True", "False"], "option_labels": ["Yes", "No"]}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.crc32_bb(${check}, ${lengthtagname}, ${packed})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/crc32_bb.h>"], "declarations": "digital::crc32_bb::sptr ${id};", "make": "this->${id} = digital::crc32_bb::make(\n    ${check},\n    ${lengthtagname},\n    ${packed});", "link": ["gnuradio-digital"], "translations": {"True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_descrambler_bb.block.yml": {"id": "digital_descrambler_bb", "label": "Descrambler", "flags": ["python", "cpp"], "parameters": [{"id": "mask", "label": "Mask", "dtype": "hex", "default": "0x8A"}, {"id": "seed", "label": "Seed", "dtype": "hex", "default": "0x7F"}, {"id": "len", "label": "Length", "dtype": "int", "default": "7"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.descrambler_bb(${mask}, ${seed}, ${len})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/descrambler_bb.h>"], "declarations": "digital::descrambler_bb::sptr ${id};", "make": "this->${id} = digital::descrambler_bb::make(\n    ${mask},\n    ${seed},\n    ${len});", "link": ["gnuradio-digital"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_diff_decoder_bb.block.yml": {"id": "digital_diff_decoder_bb", "label": "Differential Decoder", "flags": ["python", "cpp"], "parameters": [{"id": "modulus", "label": "Modulus", "dtype": "int"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.diff_decoder_bb(${modulus})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/diff_decoder_bb.h>"], "declarations": "digital::diff_decoder_bb::sptr ${id};", "make": "this->${id} = digital::diff_decoder_bb::make(${modulus});", "link": ["gnuradio-digital"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_diff_encoder_bb.block.yml": {"id": "digital_diff_encoder_bb", "label": "Differential Encoder", "flags": ["python", "cpp"], "parameters": [{"id": "modulus", "label": "Modulus", "dtype": "int"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.diff_encoder_bb(${modulus})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/diff_encoder_bb.h>"], "declarations": "digital::diff_encoder_bb::sptr ${id};", "make": "this->${id} = digital::diff_encoder_bb::make(${modulus});", "link": ["gnuradio-digital"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_diff_phasor_cc.block.yml": {"id": "digital_diff_phasor_cc", "label": "Differential Phasor", "flags": ["python", "cpp"], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.diff_phasor_cc()"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/diff_phasor_cc.h>"], "declarations": "digital::diff_phasor_cc::sptr ${id};", "make": "this->${id} = digital::diff_phasor_cc::make();", "link": ["gnuradio-digital"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_fll_band_edge_cc.block.yml": {"id": "digital_fll_band_edge_cc", "label": "FLL Band-Edge", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["cc"], "option_labels": ["Complex->Complex"], "option_attributes": {"input": ["complex"], "output": ["complex"]}, "hide": "part"}, {"id": "samps_per_sym", "label": "Samples Per Symbol", "dtype": "real"}, {"id": "rolloff", "label": "Filter Rolloff Factor", "dtype": "real"}, {"id": "filter_size", "label": "Prototype Filter Size", "dtype": "int"}, {"id": "w", "label": "Loop Bandwidth", "dtype": "real"}], "inputs": [{"domain": "stream", "dtype": "${ type.input }"}], "outputs": [{"domain": "stream", "dtype": "${ type.output }"}, {"label": "freq", "domain": "stream", "dtype": "float", "optional": true}, {"label": "phase", "domain": "stream", "dtype": "float", "optional": true}, {"label": "error", "domain": "stream", "dtype": "float", "optional": true}], "templates": {"imports": "from gnuradio import digital", "make": "digital.fll_band_edge_cc(${samps_per_sym}, ${rolloff}, ${filter_size}, ${w})", "callbacks": ["set_loop_bandwidth(${w})"]}, "cpp_templates": {"includes": ["#include <gnuradio/digital/fll_band_edge_cc.h>"], "declarations": "digital::fll_band_edge_cc::sptr ${id};", "make": "this->${id} = digital::fll_band_edge_cc::make(\n    ${samps_per_sym},\n    ${rolloff},\n    ${filter_size},\n    ${w});", "link": ["gnuradio-digital"], "callbacks": ["set_loop_bandwidth(${w})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_framer_sink_1.block.yml": {"id": "digital_framer_sink_1", "label": "Framer Sink 1", "flags": ["python", "cpp"], "parameters": [{"id": "target_queue", "label": "Target Message Queue", "dtype": "raw"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.framer_sink_1(${target_queue})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/framer_sink_1.h>"], "declarations": "digital::framer_sink_1::sptr ${id};", "make": "this->${id} = digital::framer_sink_1::make(${target_queue});", "link": ["gnuradio-digital"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_gfsk_demod.block.yml": {"id": "digital_gfsk_demod", "label": "GFSK Demod", "flags": ["python"], "parameters": [{"id": "samples_per_symbol", "label": "Samples/Symbol", "dtype": "int", "default": "2"}, {"id": "sensitivity", "label": "Sensitivity", "dtype": "real", "default": "1.0"}, {"id": "gain_mu", "label": "Gain Mu", "dtype": "real", "default": "0.175"}, {"id": "mu", "label": "Mu", "dtype": "real", "default": "0.5"}, {"id": "omega_relative_limit", "label": "Omega Relative Limit", "dtype": "real", "default": "0.005"}, {"id": "freq_error", "label": "Freq Error", "dtype": "real", "default": "0.0"}, {"id": "verbose", "label": "Verbose", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["On", "Off"], "hide": "${ ('part' if str(verbose) == 'False' else 'none') }"}, {"id": "log", "label": "Log", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["On", "Off"], "hide": "${ ('part' if str(log) == 'False' else 'none') }"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.gfsk_demod(\n    samples_per_symbol=${samples_per_symbol},\n    sensitivity=${sensitivity},\n    gain_mu=${gain_mu},\n    mu=${mu},\n    omega_relative_limit=${omega_relative_limit},\n    freq_error=${freq_error},\n    verbose=${verbose},\n    log=${log})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_gfsk_mod.block.yml": {"id": "digital_gfsk_mod", "label": "GFSK Mod", "flags": ["python"], "parameters": [{"id": "samples_per_symbol", "label": "Samples/Symbol", "dtype": "int", "default": "2"}, {"id": "sensitivity", "label": "Sensitivity", "dtype": "real", "default": "1.0"}, {"id": "bt", "label": "BT", "dtype": "real", "default": "0.35"}, {"id": "verbose", "label": "Verbose", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["On", "Off"], "hide": "${ ('part' if str(verbose) == 'False' else 'none') }"}, {"id": "log", "label": "Log", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["On", "Off"], "hide": "${ ('part' if str(log) == 'False' else 'none') }"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.gfsk_mod(\n    samples_per_symbol=${samples_per_symbol},\n    sensitivity=${sensitivity},\n    bt=${bt},\n    verbose=${verbose},\n    log=${log})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_glfsr_source_x.block.yml": {"id": "digital_glfsr_source_x", "label": "GLFSR Source", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["float", "byte"], "option_attributes": {"fcn": ["f", "b"]}, "hide": "part"}, {"id": "degree", "label": "Degree", "dtype": "int"}, {"id": "repeat", "label": "Repeat", "dtype": "enum", "options": ["True", "False"], "option_labels": ["Yes", "No"]}, {"id": "mask", "label": "Mask", "dtype": "int", "default": "0"}, {"id": "seed", "label": "Seed", "dtype": "int", "default": "1"}], "outputs": [{"domain": "stream", "dtype": "${ type }"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.glfsr_source_${type.fcn}(${degree}, ${repeat}, ${mask}, ${seed})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/glfsr_source_${type.fcn}.h>"], "declarations": "digital::glfsr_source_${type.fcn}::sptr ${id};", "make": "this->${id} = digital::glfsr_source_${type.fcn}::make(\n    ${degree},\n    ${repeat},\n    ${mask},\n    ${seed});", "link": ["gnuradio-digital"], "translations": {"True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_gmsk_demod.block.yml": {"id": "digital_gmsk_demod", "label": "GMSK Demod", "flags": ["python"], "parameters": [{"id": "samples_per_symbol", "label": "Samples/Symbol", "dtype": "int", "default": "2"}, {"id": "gain_mu", "label": "Gain Mu", "dtype": "real", "default": "0.175"}, {"id": "mu", "label": "Mu", "dtype": "real", "default": "0.5"}, {"id": "omega_relative_limit", "label": "Omega Relative Limit", "dtype": "real", "default": "0.005"}, {"id": "freq_error", "label": "Freq Error", "dtype": "real", "default": "0.0"}, {"id": "verbose", "label": "Verbose", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["On", "Off"], "hide": "${ ('part' if str(verbose) == 'False' else 'none') }"}, {"id": "log", "label": "Log", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["On", "Off"], "hide": "${ ('part' if str(log) == 'False' else 'none') }"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.gmsk_demod(\n    samples_per_symbol=${samples_per_symbol},\n    gain_mu=${gain_mu},\n    mu=${mu},\n    omega_relative_limit=${omega_relative_limit},\n    freq_error=${freq_error},\n    verbose=${verbose},log=${log})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_gmsk_mod.block.yml": {"id": "digital_gmsk_mod", "label": "GMSK Mod", "flags": ["python"], "parameters": [{"id": "samples_per_symbol", "label": "Samples/Symbol", "dtype": "int", "default": "2"}, {"id": "bt", "label": "BT", "dtype": "real", "default": "0.35"}, {"id": "verbose", "label": "Verbose", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["On", "Off"], "hide": "${ ('part' if str(verbose) == 'False' else 'none') }"}, {"id": "log", "label": "Log", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["On", "Off"], "hide": "${ ('part' if str(log) == 'False' else 'none') }"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.gmsk_mod(\n    samples_per_symbol=${samples_per_symbol},\n    bt=${bt},\n    verbose=${verbose},\n    log=${log})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_gmskmod_bc.block.yml": {"id": "digital_gmskmod_bc", "label": "GMSK Modulator", "flags": ["python"], "parameters": [{"id": "samples_per_symbol", "label": "Samples/Symbol", "dtype": "int", "default": "2"}, {"id": "bt", "label": "3 dB Time-Bandwith Product", "dtype": "real", "default": "0.3"}, {"id": "L", "label": "Pulse Duration (Symbols)", "dtype": "int", "default": "4"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.gmskmod_bc(${samples_per_symbol}, ${L}, ${bt})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_hdlc_deframer_bp.block.yml": {"id": "digital_hdlc_deframer_bp", "label": "HDLC Deframer", "flags": ["python", "cpp"], "parameters": [{"id": "min", "label": "Min length", "dtype": "int", "default": "32"}, {"id": "max", "label": "Max length", "dtype": "int", "default": "500"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "message", "id": "out"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.hdlc_deframer_bp(${min}, ${max})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/hdlc_deframer_bp.h>"], "declarations": "digital::hdlc_deframer_bp::sptr ${id};", "make": "this->${id} = digital::hdlc_deframer_bp::make(\n    ${min},\n    ${max});", "link": ["gnuradio-digital"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_hdlc_framer_pb.block.yml": {"id": "digital_hdlc_framer_pb", "label": "HDLC Framer", "flags": ["python", "cpp"], "parameters": [{"id": "frame_tag_name", "label": "Frame tag name", "dtype": "string"}], "inputs": [{"domain": "message", "id": "in"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.hdlc_framer_pb(${frame_tag_name})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/hdlc_framer_pb.h>"], "declarations": "digital::hdlc_framer_pb::sptr ${id};", "make": "this->${id} = digital::hdlc_framer_pb::make(${frame_tag_name});", "link": ["gnuradio-digital"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_header_payload_demux.block.yml": {"id": "digital_header_payload_demux", "label": "Header/Payload Demux", "flags": ["python", "cpp"], "parameters": [{"id": "header_len", "label": "Header Length (Symbols)", "dtype": "int"}, {"id": "header_padding", "label": "Header Padding (Uncertainty / Symbols)", "dtype": "int", "default": "0"}, {"id": "items_per_symbol", "label": "Items per symbol", "dtype": "int", "hide": "${ 'none' if output_symbols else 'part' }"}, {"id": "guard_interval", "label": "Guard Interval (items)", "dtype": "int", "default": "0", "hide": "${ ('none' if guard_interval else 'part') }"}, {"id": "length_tag_key", "label": "Length tag key", "dtype": "string", "default": "\"frame_len\""}, {"id": "trigger_tag_key", "label": "Trigger tag key", "dtype": "string", "default": "\"\"", "hide": "${ ('none' if trigger_tag_key else 'part') }"}, {"id": "output_symbols", "label": "Output Format", "dtype": "enum", "options": ["False", "True"], "option_labels": ["Items", "Symbols"], "hide": "${ 'none' if output_symbols else 'part' }"}, {"id": "type", "label": "IO Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"itemsize": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"], "cpp_itemsize": ["sizeof(gr_complex)", "sizeof(gr_float)", "sizeof(gr_int)", "sizeof(gr_short)", "sizeof(gr_char)"]}, "hide": "part"}, {"id": "timing_tag_key", "label": "Timing tag key", "dtype": "string", "default": "\"rx_time\""}, {"id": "samp_rate", "label": "Sampling Rate", "dtype": "int", "default": "samp_rate"}, {"id": "special_tags", "label": "Special Tag Keys", "dtype": "raw", "default": "(,)"}], "inputs": [{"domain": "stream", "dtype": "${ type }"}, {"label": "trigger", "domain": "stream", "dtype": "byte", "optional": true}, {"domain": "message", "id": "header_data"}], "outputs": [{"label": "out_hdr", "domain": "stream", "dtype": "${ type }", "vlen": "${ items_per_symbol if output_symbols else 1 }"}, {"label": "out_payload", "domain": "stream", "dtype": "${ type }", "vlen": "${ items_per_symbol if output_symbols else 1 }"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.header_payload_demux(\n    ${header_len},\n    ${items_per_symbol},\n    ${guard_interval},\n    ${length_tag_key},\n    ${trigger_tag_key},\n    ${output_symbols},\n    ${type.itemsize},\n    ${timing_tag_key},\n    ${samp_rate},\n    ${special_tags},\n    ${header_padding})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/header_payload_demux.h>"], "declarations": "digital::header_payload_demux::sptr ${id};", "make": "this->${id} = digital::header_payload_demux::make(\n    ${header_len},\n    ${items_per_symbol},\n    ${guard_interval},\n    ${length_tag_key},\n    ${trigger_tag_key},\n    ${output_symbols},\n    ${type.cpp_itemsize},\n    ${timing_tag_key},\n    ${samp_rate},\n    ${special_tags},\n    ${header_padding});", "link": ["gnuradio-digital"], "translations": {"True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_kurtotic_equalizer_cc.block.yml": {"id": "digital_kurtotic_equalizer_cc", "label": "Kurtotic Equalizer", "flags": ["python", "cpp"], "parameters": [{"id": "num_taps", "label": "Num. Taps", "dtype": "int"}, {"id": "mu", "label": "Mu", "dtype": "real"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.kurtotic_equalizer_cc(${num_taps}, ${mu})", "callbacks": ["set_gain(${mu})"]}, "cpp_templates": {"includes": ["#include <gnuradio/digital/kurtotic_equalizer_cc.h>"], "declarations": "digital::kurtotic_equalizer_cc::sptr ${id};", "make": "this->${id} = digital::kurtotic_equalizer_cc::make(${num_taps}, ${mu});", "link": ["gnuradio-digital"], "callbacks": ["set_gain(${mu})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_lms_dd_equalizer_cc.block.yml": {"id": "digital_lms_dd_equalizer_cc", "label": "LMS DD Equalizer", "flags": ["python", "cpp"], "parameters": [{"id": "mu", "label": "Gain", "dtype": "real"}, {"id": "num_taps", "label": "Num. Taps", "dtype": "int"}, {"id": "sps", "label": "Samples per Symbol", "dtype": "int"}, {"id": "cnst", "label": "Constellation Object", "dtype": "raw"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.lms_dd_equalizer_cc(${num_taps}, ${mu}, ${sps}, ${cnst})", "callbacks": ["set_gain(${mu})"]}, "cpp_templates": {"includes": ["#include <gnuradio/digital/lms_dd_equalizer_cc.h>"], "declarations": "digital::lms_dd_equalizer_cc::sptr ${id};", "make": "this->${id} = digital::lms_dd_equalizer_cc::make(\n    ${num_taps},\n    ${mu},\n    ${sps},\n    ${cnst});", "link": ["gnuradio-digital"], "callbacks": ["set_gain(${mu})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_map_bb.block.yml": {"id": "digital_map_bb", "label": "Map", "flags": ["python", "cpp"], "parameters": [{"id": "map", "label": "Map", "dtype": "int_vector"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.map_bb(${map})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/map_bb.h>"], "declarations": "digital::map_bb::sptr ${id};", "make": "std::vector<int> map = {${str(map)[1:-1]}};\nthis->${id} = digital::map_bb::make(map);", "link": ["gnuradio-digital"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_modulate_vector.block.yml": {"id": "variable_modulate_vector", "label": "Modulate Vector", "category": "Modulators", "flags": ["show_id", "python", "cpp"], "parameters": [{"id": "mod", "label": "Modulator", "dtype": "raw"}, {"id": "data", "label": "Data vector", "dtype": "int_vector"}, {"id": "taps", "label": "Filter taps", "dtype": "float_vector"}], "value": "${ digital.modulate_vector_bc(mod .to_basic_block(), data, taps) }", "templates": {"imports": "from gnuradio import digital", "var_make": "self.${id} = ${id} = digital.modulate_vector_bc(${mod} .to_basic_block(), ${data}, ${taps})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/modulate_vector.h>"], "declarations": "digital::modulate_vector_bc::sptr ${id};", "var_make": "std::vector<int> data = {${str(data)[1:-1]}};\nstd::vector<float> taps = {${str(taps)[1:-1]}};\nthis->${id} = ${id} = digital::modulate_vector_bc(${mod} .to_basic_block(),\ndata, taps);", "link": ["gnuradio-digital"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_mpsk_snr_est_cc.block.yml": {"id": "digital_mpsk_snr_est_cc", "label": "MPSK SNR Estimator", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["0", "1", "2", "3"], "option_labels": ["Simple", "Skewness", "2nd and 4th Moment", "SVR"]}, {"id": "tag_nsamples", "label": "Samples between tags", "dtype": "int", "default": "10000"}, {"id": "alpha", "label": "Filter Alpha", "dtype": "real", "default": "0.001"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.mpsk_snr_est_cc(${type}, ${tag_nsamples}, ${alpha})", "callbacks": ["set_type(${type})", "set_tag_nsamples(${tag_nsamples})", "set_alpha(${alpha})"]}, "cpp_templates": {"includes": ["#include <gnuradio/digital/mpsk_snr_est_cc.h>"], "declarations": "digital::mpsk_snr_est_cc::sptr ${id};", "make": "this->${id} = digital::mpsk_snr_est_cc::make(\n    ${type},\n    ${tag_nsamples},\n    ${alpha});", "link": ["gnuradio-digital"], "callbacks": ["set_type(${type})", "set_tag_nsamples(${tag_nsamples})", "set_alpha(${alpha})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_msk_timing_recovery_cc.block.yml": {"id": "digital_msk_timing_recovery_cc", "label": "MSK Timing Recovery", "flags": ["python", "cpp"], "parameters": [{"id": "gain", "label": "Gain", "dtype": "float"}, {"id": "sps", "label": "Samples per symbol", "dtype": "float"}, {"id": "limit", "label": "Error limit", "dtype": "float"}, {"id": "osps", "label": "Output samples per symbol", "dtype": "int"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}, {"label": "err", "domain": "stream", "dtype": "float", "optional": true}, {"label": "omega", "domain": "stream", "dtype": "float", "optional": true}], "templates": {"imports": "from gnuradio import digital", "make": "digital.msk_timing_recovery_cc(${sps}, ${gain}, ${limit}, ${osps})", "callbacks": ["set_gain(${gain})", "set_sps(${sps})", "set_limit(${limit})"]}, "cpp_templates": {"includes": ["#include <gnuradio/digital/msk_timing_recovery_cc.h>"], "declarations": "digital::msk_timing_recovery_cc::sptr ${id};", "make": "this->${id} = digital::msk_timing_recovery_cc::make(\n    ${sps},\n    ${gain},\n    ${limit},\n    ${osps});", "link": ["gnuradio-digital"], "callbacks": ["set_gain(${gain})", "set_sps(${sps})", "set_limit(${limit})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_ofdm_carrier_allocator_cvc.block.yml": {"id": "digital_ofdm_carrier_allocator_cvc", "label": "OFDM Carrier Allocator", "flags": ["python", "cpp"], "parameters": [{"id": "fft_len", "label": "FFT length", "dtype": "int", "default": "fft_len", "hide": "${ 'part' if fft_len == 1 else 'none' }"}, {"id": "occupied_carriers", "label": "Occupied Carriers", "dtype": "raw"}, {"id": "pilot_carriers", "label": "Pilot Carriers", "dtype": "raw", "default": "((),)"}, {"id": "pilot_symbols", "label": "Pilot Symbols", "dtype": "raw", "default": "((),)"}, {"id": "sync_words", "label": "Sync Words", "dtype": "raw", "default": "((),)"}, {"id": "len_tag_key", "label": "Length tag key", "dtype": "string", "default": "\"packet_len\""}, {"id": "output_is_shifted", "label": "Shift Output", "dtype": "enum", "default": "True", "options": ["False", "True"], "option_labels": ["No", "Yes"]}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex", "vlen": "${ fft_len }"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.ofdm_carrier_allocator_cvc( ${fft_len}, ${occupied_carriers}, ${pilot_carriers}, ${pilot_symbols}, ${sync_words}, ${len_tag_key}, ${output_is_shifted})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/ofdm_carrier_allocator_cvc.h>"], "declarations": "digital::ofdm_carrier_allocator_cvc::sptr ${id};", "make": "this->${id} = digital::ofdm_carrier_allocator_cvc::make(\n    ${fft_len},\n    ${occupied_carriers},\n    ${pilot_carriers},\n    ${pilot_symbols},\n    ${sync_words},\n    ${len_tag_key},\n    ${output_is_shifted});", "link": ["gnuradio-digital"], "translations": {"True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_ofdm_chanest_vcvc.block.yml": {"id": "digital_ofdm_chanest_vcvc", "label": "OFDM Channel Estimation", "flags": ["python", "cpp"], "parameters": [{"id": "sync_symbol1", "label": "Synch. symbol 1", "dtype": "complex_vector", "hide": "${ 'part' if len(sync_symbol1) == 1 else 'none' }"}, {"id": "sync_symbol2", "label": "Synch. symbol 2", "dtype": "complex_vector", "default": "()"}, {"id": "n_data_symbols", "label": "Number of data symbols", "dtype": "int", "default": "1"}, {"id": "eq_noise_red_len", "label": "Channel taps noise reduction length", "dtype": "int", "default": "0", "hide": "all"}, {"id": "max_carr_offset", "label": "Maximum carrier offset", "dtype": "int", "default": "-1", "hide": "${ ('part' if max_carr_offset < 0 else 'none') }"}, {"id": "force_one_symbol", "label": "Force One Synchronisation Symbol", "dtype": "enum", "options": ["False", "True"], "option_labels": ["No", "Yes"], "hide": "${ ('part' if not force_one_symbol else 'none') }"}], "inputs": [{"domain": "stream", "dtype": "complex", "vlen": "${ len(sync_symbol1) }"}], "outputs": [{"domain": "stream", "dtype": "complex", "vlen": "${ len(sync_symbol1) }"}], "asserts": ["${ len(sync_symbol1) }", "${ len(sync_symbol2) == 0 or len(sync_symbol2) == len(sync_symbol1) }"], "templates": {"imports": "from gnuradio import digital", "make": "digital.ofdm_chanest_vcvc(${sync_symbol1}, ${sync_symbol2}, ${n_data_symbols}, ${eq_noise_red_len}, ${max_carr_offset}, ${force_one_symbol})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/ofdm_chanest_vcvc.h>"], "declarations": "digital::ofdm_chanest_vcvc::sptr ${id};", "make": "std::vector<gr_complex> sync_symbol1 = {${str(sync_symbol1)[1:-1]}};\nstd::vector<gr_complex> sync_symbol2 = {${str(sync_symbol2)[1:-1]}};\nthis->${id} = digital::ofdm_chanest_vcvc::make(\n    sync_symbol1,\n    sync_symbol2,\n    ${n_data_symbols},\n    ${eq_noise_red_len},\n    ${max_carr_offset},\n    ${force_one_symbol});", "link": ["gnuradio-digital"], "translations": {"True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_ofdm_cyclic_prefixer.block.yml": {"id": "digital_ofdm_cyclic_prefixer", "label": "OFDM Cyclic Prefixer", "flags": ["python", "cpp"], "parameters": [{"id": "input_size", "label": "FFT Length", "dtype": "int", "default": "fft_len"}, {"id": "cp_len", "label": "CP Length", "dtype": "int", "default": "fft_len/4"}, {"id": "rolloff", "label": "Rolloff", "dtype": "int", "default": "0", "hide": "${ ('none' if rolloff else 'part') }"}, {"id": "tagname", "label": "Length Tag Key", "dtype": "string", "default": "\"frame_len\""}], "inputs": [{"domain": "stream", "dtype": "complex", "vlen": "${ input_size }"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.ofdm_cyclic_prefixer(${input_size}, ${input_size} + ${cp_len}, ${rolloff}, ${tagname})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/ofdm_cyclic_prefixer.h>"], "declarations": "digital::ofdm_cyclic_prefixer::sptr ${id};", "make": "this->${id} = digital::ofdm_cyclic_prefixer::make(\n    ${input_size},\n    ${input_size} + ${cp_len},\n    ${rolloff},\n    ${tagname});", "link": ["gnuradio-digital"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_ofdm_frame_equalizer_vcvc.block.yml": {"id": "digital_ofdm_frame_equalizer_vcvc", "label": "OFDM Frame Equalizer", "flags": ["python", "cpp"], "parameters": [{"id": "fft_len", "label": "FFT length", "dtype": "int", "default": "fft_len", "hide": "${ 'part' if fft_len == 1 else 'none' }"}, {"id": "cp_len", "label": "CP length", "dtype": "int", "default": "fft_len/4"}, {"id": "equalizer", "label": "Equalizer", "dtype": "raw"}, {"id": "len_tag_key", "label": "Length Tag Key", "dtype": "string"}, {"id": "propagate_channel_state", "label": "Propagate Channel State", "dtype": "enum", "options": ["True", "False"], "option_labels": ["Yes", "No"]}, {"id": "fixed_frame_len", "label": "Fixed frame length", "dtype": "int", "default": "0", "hide": "${ ('none' if fixed_frame_len else 'part') }"}], "inputs": [{"domain": "stream", "dtype": "complex", "vlen": "${ fft_len }"}], "outputs": [{"domain": "stream", "dtype": "complex", "vlen": "${ fft_len }"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.ofdm_frame_equalizer_vcvc(${equalizer}, ${cp_len}, ${len_tag_key}, ${propagate_channel_state}, ${fixed_frame_len})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/ofdm_frame_equalizer_vcvc.h>"], "declarations": "digital::ofdm_frame_equalizer_vcvc::sptr ${id};", "make": "this->${id} = digital::ofdm_frame_equalizer_vcvc::make(\n    ${equalizer},\n    ${cp_len},\n    ${len_tag_key},\n    ${propagate_channel_state},\n    ${fixed_frame_len});", "link": ["gnuradio-digital"], "translations": {"True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_ofdm_rx.block.yml": {"id": "digital_ofdm_rx", "label": "OFDM Receiver", "flags": ["python"], "parameters": [{"id": "fft_len", "label": "FFT Length", "dtype": "int", "default": "64"}, {"id": "cp_len", "label": "Cyclic Prefix Length", "dtype": "int", "default": "16"}, {"id": "packet_len_key", "label": "Packet Length Tag Key", "dtype": "string", "default": "\"length\""}, {"id": "occupied_carriers", "label": "Occupied Carriers", "dtype": "raw", "default": "()", "hide": "${ 'none' if occupied_carriers else 'part' }"}, {"id": "pilot_carriers", "label": "Pilot Carriers", "dtype": "raw", "default": "()", "hide": "${ 'none' if pilot_carriers else 'part' }"}, {"id": "pilot_symbols", "label": "Pilot Symbols", "dtype": "raw", "default": "()", "hide": "${ 'none' if pilot_symbols else 'part' }"}, {"id": "sync_word1", "label": "Sync Word 1", "dtype": "raw", "default": "()", "hide": "${ 'none' if sync_word1 else 'part' }"}, {"id": "sync_word2", "label": "Sync Word 2", "dtype": "raw", "default": "()", "hide": "${ 'none' if sync_word2 else 'part' }"}, {"id": "header_mod", "label": "Header Modulation", "dtype": "enum", "options": ["\"BPSK\"", "\"QPSK\""], "option_labels": ["BPSK", "QPSK"], "option_attributes": {"bps": ["1", "2"]}}, {"id": "payload_mod", "label": "Payload Modulation", "dtype": "enum", "options": ["\"BPSK\"", "\"QPSK\"", "\"8-PSK\""], "option_labels": ["BPSK", "QPSK", "8-PSK"], "option_attributes": {"bps": ["1", "2", "3"]}}, {"id": "scramble_bits", "label": "Scramble Bits", "dtype": "enum", "default": "False", "options": ["False", "True"], "option_labels": ["No", "Yes"], "hide": "${ ('part' if scramble_bits else 'none') }"}, {"id": "log", "label": "Log Debug Info", "dtype": "enum", "default": "False", "options": ["False", "True"], "option_labels": ["No", "Yes"], "hide": "${ ('none' if log else 'part') }"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "asserts": ["${ fft_len > 0 }", "${ cp_len > 0 }", "${ cp_len < fft_len }"], "templates": {"imports": "from gnuradio import digital", "make": "digital.ofdm_rx(\n    fft_len=${fft_len}, cp_len=${cp_len},\n    frame_length_tag_key='frame_'+${packet_len_key},\n    packet_length_tag_key=${packet_len_key},\n    % if occupied_carriers:\n    occupied_carriers=${occupied_carriers},\n    % endif\n    % if pilot_carriers:\n    pilot_carriers=${pilot_carriers},\n    % endif\n    % if pilot_symbols:\n    pilot_symbols=${pilot_symbols},\n    % endif\n    % if sync_word1:\n    sync_word1=${sync_word1},\n    % endif\n    % if sync_word2:\n    sync_word2=${sync_word2},\n    % endif\n    bps_header=${header_mod.bps},\n    bps_payload=${payload_mod.bps},\n    debug_log=${log},\n    scramble_bits=${scramble_bits})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_ofdm_serializer_vcc.block.yml": {"id": "digital_ofdm_serializer_vcc", "label": "OFDM Serializer", "flags": ["python", "cpp"], "parameters": [{"id": "fft_len", "label": "FFT length", "dtype": "int", "default": "fft_len", "hide": "${ 'part' if fft_len == 1 else 'none' }"}, {"id": "occupied_carriers", "label": "Occupied Carriers", "dtype": "raw"}, {"id": "len_tag_key", "label": "Length Tag Key", "dtype": "string"}, {"id": "packet_len_tag_key", "label": "Packet Length Tag Key", "dtype": "string", "default": "\"\"", "hide": "${ ('none' if packet_len_tag_key else 'part') }"}, {"id": "symbols_skipped", "label": "Symbols skipped", "dtype": "int", "default": "0", "hide": "${ ('none' if symbols_skipped else 'part') }"}, {"id": "carr_offset_key", "label": "Carrier Offset Key", "dtype": "string", "default": "\"\"", "hide": "${ ('none' if carr_offset_key else 'part') }"}, {"id": "input_is_shifted", "label": "Input is shifted", "dtype": "bool", "default": "True", "hide": "${ ('part' if input_is_shifted else 'none') }"}], "inputs": [{"domain": "stream", "dtype": "complex", "vlen": "${ fft_len }"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.ofdm_serializer_vcc(${fft_len}, ${occupied_carriers}, ${len_tag_key}, ${packet_len_tag_key}, ${symbols_skipped}, ${carr_offset_key}, ${input_is_shifted})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/ofdm_serializer_vcc.h>"], "declarations": "digital::ofdm_serializer_vcc::sptr ${id};", "make": "this->${id} = digital::ofdm_serializer_vcc::make(\n    ${fft_len},\n    ${occupied_carriers},\n    ${len_tag_key},\n    ${packet_len_tag_key},\n    ${symbols_skipped},\n    ${carr_offset_key},\n    ${input_is_shifted});", "link": ["gnuradio-digital"], "translations": {"True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_ofdm_sync_sc_cfb.block.yml": {"id": "digital_ofdm_sync_sc_cfb", "label": "Schmidl & Cox OFDM synch.", "flags": ["python", "cpp"], "parameters": [{"id": "fft_len", "label": "FFT length", "dtype": "int"}, {"id": "cp_len", "label": "Cyclic Prefix length", "dtype": "int"}, {"id": "use_even_carriers", "label": "Preamble Carriers", "dtype": "enum", "default": "False", "options": ["False", "True"], "option_labels": ["Odd", "Even"], "hide": "part"}, {"id": "threshold", "label": "Threshold", "dtype": "real", "default": "0.9"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"label": "freq_offset", "domain": "stream", "dtype": "float"}, {"label": "detect", "domain": "stream", "dtype": "byte"}], "asserts": ["${ fft_len > 0}", "${ cp_len >= 0}"], "templates": {"imports": "from gnuradio import digital", "make": "digital.ofdm_sync_sc_cfb(${fft_len}, ${cp_len}, ${use_even_carriers}, ${threshold})", "callbacks": ["set_threshold(${threshold})"]}, "cpp_templates": {"includes": ["#include <gnuradio/digital/ofdm_sync_sc_cfb.h>"], "declarations": "digital::ofdm_sync_sc_cfb::sptr ${id};", "make": "this->${id} = digital::ofdm_sync_sc_cfb::make(\n    ${fft_len},\n    ${cp_len},\n    ${use_even_carriers},\n    ${threshold});", "link": ["gnuradio-digital"], "callbacks": ["set_threshold(${threshold})"], "translations": {"True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_ofdm_tx.block.yml": {"id": "digital_ofdm_tx", "label": "OFDM Transmitter", "flags": ["python"], "parameters": [{"id": "fft_len", "label": "FFT Length", "dtype": "int", "default": "64"}, {"id": "cp_len", "label": "Cyclic Prefix Length", "dtype": "int", "default": "16"}, {"id": "packet_len_key", "label": "Length Tag Name", "dtype": "string", "default": "length"}, {"id": "occupied_carriers", "label": "Occupied Carriers", "dtype": "raw", "default": "()", "hide": "${ 'none' if occupied_carriers else 'part' }"}, {"id": "pilot_carriers", "label": "Pilot Carriers", "dtype": "raw", "default": "()", "hide": "${ 'none' if pilot_carriers else 'part' }"}, {"id": "pilot_symbols", "label": "Pilot Symbols", "dtype": "raw", "default": "()", "hide": "${ 'none' if pilot_symbols else 'part' }"}, {"id": "sync_word1", "label": "Sync Word 1", "dtype": "raw", "default": "()", "hide": "${ 'none' if sync_word1 else 'part' }"}, {"id": "sync_word2", "label": "Sync Word 2", "dtype": "raw", "default": "()", "hide": "${ 'none' if sync_word2 else 'part' }"}, {"id": "header_mod", "label": "Header Modulation", "dtype": "enum", "options": ["\"BPSK\"", "\"QPSK\""], "option_labels": ["BPSK", "QPSK"], "option_attributes": {"bps": ["1", "2"]}}, {"id": "payload_mod", "label": "Payload Modulation", "dtype": "enum", "options": ["\"BPSK\"", "\"QPSK\"", "\"8-PSK\""], "option_labels": ["BPSK", "QPSK", "8-PSK"], "option_attributes": {"bps": ["1", "2", "3"]}}, {"id": "rolloff", "label": "Rolloff length (samples)", "dtype": "int", "default": "0"}, {"id": "scramble_bits", "label": "Scramble Bits", "dtype": "enum", "default": "False", "options": ["False", "True"], "option_labels": ["No", "Yes"], "hide": "${ ('part' if scramble_bits else 'none') }"}, {"id": "log", "label": "Log Debug Info", "dtype": "enum", "default": "False", "options": ["False", "True"], "option_labels": ["No", "Yes"], "hide": "${ ('none' if log else 'part') }"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "asserts": ["${ fft_len > 0 }", "${ cp_len > 0 }", "${ cp_len < fft_len }", "${ rolloff >= 0 }"], "templates": {"imports": "from gnuradio import digital", "make": "digital.ofdm_tx(\n    fft_len=${fft_len}, \n    cp_len=${cp_len},\n    packet_length_tag_key=${packet_len_key},\n    % if occupied_carriers:\n    occupied_carriers=${occupied_carriers},\n    % endif\n    % if pilot_carriers:\n    pilot_carriers=${pilot_carriers},\n    % endif\n    % if pilot_carriers:\n    pilot_symbols=${pilot_symbols},\n    % endif\n    % if sync_word1:\n    sync_word1=${sync_word1},\n    % endif\n    % if sync_word2:\n    sync_word2=${sync_word2},\n    % endif\n    bps_header=${header_mod.bps},\n    bps_payload=${payload_mod.bps},\n    rolloff=${rolloff}, \n    debug_log=${log},\n    scramble_bits=${scramble_bits})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_packet_headergenerator_bb.block.yml": {"id": "digital_packet_headergenerator_bb", "label": "Packet Header Generator", "flags": ["python", "cpp"], "parameters": [{"id": "header_formatter", "label": "Formatter Object", "dtype": "raw"}, {"id": "len_tag_key", "label": "Length Tag Name", "dtype": "string", "default": "\"packet_len\""}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.packet_headergenerator_bb(${header_formatter}, ${len_tag_key})", "callbacks": ["set_header_formatter(${header_formatter})"]}, "cpp_templates": {"includes": ["#include <gnuradio/digital/packet_headergenerator_bb.h>"], "declarations": "digital::packet_headergenerator_bb::sptr ${id};", "make": "this->${id} = digital::packet_headergenerator_bb::make(\n    ${header_len},\n    ${len_tag_key});", "link": ["gnuradio-digital"], "callbacks": ["set_header_formatter(${header_formatter})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_packet_headergenerator_bb_default.block.yml": {"id": "digital_packet_headergenerator_bb_default", "label": "Packet Header Generator (Default)", "flags": ["python", "cpp"], "parameters": [{"id": "header_len", "label": "Header Length", "dtype": "int"}, {"id": "len_tag_key", "label": "Length Tag Name", "dtype": "string", "default": "\"packet_len\""}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.packet_headergenerator_bb(${header_len}, ${len_tag_key})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/packet_headergenerator_bb.h>"], "declarations": "digital::packet_headergenerator_bb::sptr ${id};", "make": "this->${id} = digital::packet_headergenerator_bb::make(\n    ${header_len},\n    ${len_tag_key});", "link": ["gnuradio-digital"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_packet_headerparser_b.block.yml": {"id": "digital_packet_headerparser_b", "label": "Packet Header Parser", "parameters": [{"id": "header_formatter", "label": "Formatter Object", "dtype": "raw"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "message", "id": "header_data"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.packet_headerparser_b(${header_formatter})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/packet_headerparser_b.h>"], "declarations": "digital::packet_headerparser_b::sptr ${id};", "make": "this->${id} = digital::packet_headerparser_b::make(${header_formatter});", "link": ["gnuradio-digital"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_packet_headerparser_b_default.block.yml": {"id": "digital_packet_headerparser_b_default", "label": "Packet Header Parser (Default)", "flags": ["python", "cpp"], "parameters": [{"id": "header_len", "label": "Header Length", "dtype": "int"}, {"id": "len_tag_key", "label": "Length Tag Name", "dtype": "string", "default": "\"packet_len\""}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "message", "id": "header_data"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.packet_headerparser_b(${header_len}, ${len_tag_key})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/packet_headerparser_b.h>"], "declarations": "digital::packet_headerparser_b::sptr ${id};", "make": "this->${id} = digital::packet_headerparser_b::make(\n    ${header_len},\n    ${len_tag_key});", "link": ["gnuradio-digital"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_packet_sink.block.yml": {"id": "digital_packet_sink", "label": "Packet Sink", "flags": ["python", "cpp"], "parameters": [{"id": "sync_vector", "label": "Sync Vector", "dtype": "int_vector"}, {"id": "target_queue", "label": "Target Message Queue", "dtype": "raw"}, {"id": "threshold", "label": "Threshold", "dtype": "int", "default": "-1"}], "inputs": [{"domain": "stream", "dtype": "float"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.packet_sink(${sync_vector}, ${target_queue}, ${threshold})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/packet_sink.h>"], "declarations": "digital::packet_sink::sptr ${id};", "make": "std::vector<int> sync_vector = {${str(sync_vector)[1:-1]}};\nthis->${id} = digital::packet_sink::make(\n    sync_vector,\n    ${target_queue},\n    ${threshold});", "link": ["gnuradio-digital"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_pfb_clock_sync.block.yml": {"id": "digital_pfb_clock_sync_xxx", "label": "Polyphase Clock Sync", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["ccf", "fff"], "option_labels": ["Complex->Complex (Real Taps)", "Float->Float (Real Taps)"], "option_attributes": {"input": ["complex", "float"], "output": ["complex", "float"], "taps": ["real_vector", "real_vector"]}, "hide": "part"}, {"id": "sps", "label": "Samples/Symbol", "dtype": "real"}, {"id": "loop_bw", "label": "Loop Bandwidth", "dtype": "real"}, {"id": "taps", "label": "Taps", "dtype": "real_vector"}, {"id": "filter_size", "label": "Filter Size", "dtype": "int", "default": "32"}, {"id": "init_phase", "label": "Initial Phase", "dtype": "real", "default": "16"}, {"id": "max_dev", "label": "Maximum Rate Deviation", "dtype": "real", "default": "1.5"}, {"id": "osps", "label": "Output SPS", "dtype": "int", "default": "1"}], "inputs": [{"domain": "stream", "dtype": "${ type.input }"}], "outputs": [{"domain": "stream", "dtype": "${ type.output }"}, {"label": "err", "domain": "stream", "dtype": "float", "optional": true}, {"label": "rate", "domain": "stream", "dtype": "float", "optional": true}, {"label": "phase", "domain": "stream", "dtype": "float", "optional": true}], "templates": {"imports": "from gnuradio import digital", "make": "digital.pfb_clock_sync_${type}(${sps}, ${loop_bw}, ${taps}, ${filter_size}, ${init_phase}, ${max_dev}, ${osps})", "callbacks": ["update_taps(${taps})", "set_loop_bandwidth(${loop_bw})"]}, "cpp_templates": {"includes": ["#include <gnuradio/digital/pfb_clock_sync_${type}.h>"], "declarations": "digital::pfb_clock_sync_${type}::sptr ${id};", "make": "std::vector<float> taps = {${str(taps)[1:-1]}};\nthis->${id} = digital::pfb_clock_sync_${type}::make(\n    ${sps},\n    ${loop_bw},\n    taps,\n    ${filter_size},\n    ${init_phase},\n    ${max_dev},\n    ${osps});", "link": ["gnuradio-digital"], "callbacks": ["update_taps(taps)", "set_loop_bandwidth(${loop_bw})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_pn_correlator_cc.block.yml": {"id": "digital_pn_correlator_cc", "label": "PN Correlator", "flags": ["python", "cpp"], "parameters": [{"id": "degree", "label": "Degree", "dtype": "int"}, {"id": "mask", "label": "Mask", "dtype": "int", "default": "0"}, {"id": "seed", "label": "Seed", "dtype": "int", "default": "1"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.pn_correlator_cc(${degree}, ${mask}, ${seed})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/pn_correlator_cc.h>"], "declarations": "digital::pn_correlator_cc::sptr ${id};", "make": "this->${id} = digital::pn_correlator_cc::make(\n    ${degree},\n    ${mask},\n    ${seed});", "link": ["gnuradio-digital"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_probe_density_b.block.yml": {"id": "digital_probe_density_b", "label": "Probe Density", "flags": ["python", "cpp"], "parameters": [{"id": "alpha", "label": "Alpha", "dtype": "real", "default": "1"}, {"id": "probe_rate", "label": "Probe Rate", "dtype": "real", "default": "10"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.probe_density_b(${alpha})", "callbacks": ["set_alpha(${alpha})"]}, "cpp_templates": {"includes": ["#include <gnuradio/digital/probe_density_b.h>"], "declarations": "digital::probe_density_b::sptr ${id};", "make": "this->${id} = digital::probe_density_b::make(${alpha});", "link": ["gnuradio-digital"], "callbacks": ["set_alpha(${alpha})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_probe_mpsk_snr_est_c.block.yml": {"id": "digital_probe_mpsk_snr_est_c", "label": "MPSK SNR Estimator Probe", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["0", "1", "2", "3"], "option_labels": ["Simple", "Skewness", "2nd and 4th Moment", "SVR"]}, {"id": "msg_nsamples", "label": "Samples between SNR messages", "dtype": "int", "default": "10000"}, {"id": "alpha", "label": "Filter Alpha", "dtype": "real", "default": "0.001"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "message", "id": "snr", "optional": true}, {"domain": "message", "id": "signal", "optional": true}, {"domain": "message", "id": "noise", "optional": true}], "templates": {"imports": "from gnuradio import digital", "make": "digital.probe_mpsk_snr_est_c(${type}, ${msg_nsamples}, ${alpha})", "callbacks": ["set_type(${type})", "set_msg_nsample(${msg_nsamples})", "set_alpha(${alpha})"]}, "cpp_templates": {"includes": ["#include <gnuradio/digital/probe_mpsk_snr_est_c.h>"], "declarations": "digital::probe_mpsk_snr_est_c::sptr ${id};", "make": "this->${id} = digital::probe_mpsk_snr_est_c::make(\n    ${type},\n    ${msg_nsamples},\n    ${alpha});", "link": ["gnuradio-digital"], "callbacks": ["set_type(${type})", "set_msg_nsample(${msg_nsamples})", "set_alpha(${alpha})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_protocol_formatter_async.block.yml": {"id": "digital_protocol_formatter_async", "label": "Protocol Formatter (Async)", "flags": ["python", "cpp"], "parameters": [{"id": "format", "label": "Format Obj.", "dtype": "raw"}], "inputs": [{"domain": "message", "id": "in", "optional": true}], "outputs": [{"domain": "message", "id": "header", "optional": true}, {"domain": "message", "id": "payload", "optional": true}], "templates": {"imports": "from gnuradio import digital", "make": "digital.protocol_formatter_async(${format})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/protocol_formatter_async.h>"], "declarations": "digital::protocol_formatter_async::sptr ${id};", "make": "this->${id} = digital::protocol_formatter_async::make(${format});", "link": ["gnuradio-digital"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_protocol_formatter_bb.block.yml": {"id": "digital_protocol_formatter_bb", "label": "Protocol Formatter", "flags": ["python", "cpp"], "parameters": [{"id": "format", "label": "Format Obj.", "dtype": "raw"}, {"id": "len_tag_key", "label": "Length Tag Name", "dtype": "string", "default": "\"packet_len\""}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.protocol_formatter_bb(${format}, ${len_tag_key})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/protocol_formatter_bb.h>"], "declarations": "digital::protocol_formatter_bb::sptr ${id};", "make": "this->${id} = digital::protocol_formatter_bb::make(${format}, ${len_tag_key});", "link": ["gnuradio-digital"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_protocol_parser_b.block.yml": {"id": "digital_protocol_parser_b", "label": "Protocol Parser", "flags": ["python", "cpp"], "parameters": [{"id": "format", "label": "Format Obj.", "dtype": "raw"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "message", "id": "info", "optional": true}], "templates": {"imports": "from gnuradio import digital", "make": "digital.protocol_parser_b(${format})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/protocol_parser_b.h>"], "declarations": "digital::protocol_parser_b::sptr ${id};", "make": "this->${id} = fft::ctrlport_probe_psd::make(${format});", "link": ["gnuradio-digital"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_psk_demod.block.yml": {"id": "digital_psk_demod", "label": "PSK Demod", "category": "[Core]/Deprecated", "flags": ["python"], "parameters": [{"id": "constellation_points", "label": "Number of Constellation Points", "dtype": "int", "default": "8"}, {"id": "differential", "label": "Differential Encoding", "dtype": "bool", "default": "True", "options": ["True", "False"], "option_labels": ["Yes", "No"]}, {"id": "samples_per_symbol", "label": "Samples/Symbol", "dtype": "int", "default": "2"}, {"id": "excess_bw", "label": "Excess BW", "dtype": "real", "default": "0.35"}, {"id": "freq_bw", "label": "Frequency BW", "dtype": "real", "default": "6.28/100.0"}, {"id": "timing_bw", "label": "Timing BW", "dtype": "real", "default": "6.28/100.0"}, {"id": "phase_bw", "label": "Phase BW", "dtype": "real", "default": "6.28/100.0"}, {"id": "mod_code", "label": "Gray Code", "dtype": "enum", "options": ["\"gray\"", "\"none\""], "option_labels": ["Yes", "No"]}, {"id": "verbose", "label": "Verbose", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["On", "Off"], "hide": "${ ('part' if str(verbose) == 'False' else 'none') }"}, {"id": "log", "label": "Log", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["On", "Off"], "hide": "${ ('part' if str(log) == 'False' else 'none') }"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.psk.psk_demod(\n    constellation_points=${constellation_points},\n    differential=${differential},\n    samples_per_symbol=${samples_per_symbol},\n    excess_bw=${excess_bw},\n    phase_bw=${phase_bw},\n    timing_bw=${timing_bw},\n    mod_code=${mod_code},\n    verbose=${verbose},\n    log=${log})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_psk_mod.block.yml": {"id": "digital_psk_mod", "label": "PSK Mod", "category": "[Core]/Deprecated", "flags": ["python"], "parameters": [{"id": "constellation_points", "label": "Number of Constellation Points", "dtype": "int", "default": "8"}, {"id": "mod_code", "label": "Gray Code", "dtype": "enum", "options": ["\"gray\"", "\"none\""], "option_labels": ["Yes", "No"]}, {"id": "differential", "label": "Differential Encoding", "dtype": "bool", "default": "True", "options": ["True", "False"], "option_labels": ["Yes", "No"]}, {"id": "samples_per_symbol", "label": "Samples/Symbol", "dtype": "int", "default": "2"}, {"id": "excess_bw", "label": "Excess BW", "dtype": "real", "default": "0.35"}, {"id": "verbose", "label": "Verbose", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["On", "Off"], "hide": "${ ('part' if str(verbose) == 'False' else 'none') }"}, {"id": "log", "label": "Log", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["On", "Off"], "hide": "${ ('part' if str(log) == 'False' else 'none') }"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.psk.psk_mod(\n    constellation_points=${constellation_points},\n    mod_code=${mod_code},\n    differential=${differential},\n    samples_per_symbol=${samples_per_symbol},\n    excess_bw=${excess_bw},\n    verbose=${verbose},\n    log=${log})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_qam_demod.block.yml": {"id": "digital_qam_demod", "label": "QAM Demod", "category": "[Core]/Deprecated", "flags": ["python"], "parameters": [{"id": "constellation_points", "label": "Number of Constellation Points", "dtype": "int", "default": "16"}, {"id": "differential", "label": "Differential Encoding", "dtype": "bool", "default": "True", "options": ["True", "False"], "option_labels": ["Yes", "No"]}, {"id": "samples_per_symbol", "label": "Samples/Symbol", "dtype": "int", "default": "2"}, {"id": "excess_bw", "label": "Excess BW", "dtype": "real", "default": "0.35"}, {"id": "freq_bw", "label": "Frequency BW", "dtype": "real", "default": "6.28/100.0"}, {"id": "timing_bw", "label": "Timing BW", "dtype": "real", "default": "6.28/100.0"}, {"id": "phase_bw", "label": "Phase BW", "dtype": "real", "default": "6.28/100.0"}, {"id": "mod_code", "label": "Gray Code", "dtype": "enum", "options": ["\"gray\"", "\"none\""], "option_labels": ["Yes", "No"]}, {"id": "verbose", "label": "Verbose", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["On", "Off"], "hide": "${ ('part' if str(verbose) == 'False' else 'none') }"}, {"id": "log", "label": "Log", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["On", "Off"], "hide": "${ ('part' if str(log) == 'False' else 'none') }"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.qam.qam_demod(\n    constellation_points=${constellation_points},\n    differential=${differential},\n    samples_per_symbol=${samples_per_symbol},\n    excess_bw=${excess_bw},\n    freq_bw=${freq_bw},\n    timing_bw=${timing_bw},\n    phase_bw=${phase_bw},\n    mod_code=${mod_code},\n    verbose=${verbose},\n    log=${log})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_qam_mod.block.yml": {"id": "digital_qam_mod", "label": "QAM Mod", "category": "[Core]/Deprecated", "flags": ["python"], "parameters": [{"id": "constellation_points", "label": "Number of Constellation Points", "dtype": "int", "default": "16"}, {"id": "mod_code", "label": "Gray Code", "dtype": "enum", "options": ["\"gray\"", "\"none\""], "option_labels": ["Yes", "No"]}, {"id": "differential", "label": "Differential Encoding", "dtype": "bool", "default": "True", "options": ["True", "False"], "option_labels": ["Yes", "No"]}, {"id": "samples_per_symbol", "label": "Samples/Symbol", "dtype": "int", "default": "2"}, {"id": "excess_bw", "label": "Excess BW", "dtype": "real", "default": "0.35"}, {"id": "verbose", "label": "Verbose", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["On", "Off"], "hide": "${ ('part' if str(verbose) == 'False' else 'none') }"}, {"id": "log", "label": "Log", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["On", "Off"], "hide": "${ ('part' if str(log) == 'False' else 'none') }"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.qam.qam_mod(\n    constellation_points=${constellation_points},\n    mod_code=${mod_code},\n    differential=${differential},\n    samples_per_symbol=${samples_per_symbol},\n    excess_bw=${excess_bw},\n    verbose=${verbose},\n    log=${log})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_scrambler_bb.block.yml": {"id": "digital_scrambler_bb", "label": "Scrambler", "flags": ["python", "cpp"], "parameters": [{"id": "mask", "label": "Mask", "dtype": "hex", "default": "0x8A"}, {"id": "seed", "label": "Seed", "dtype": "hex", "default": "0x7F"}, {"id": "len", "label": "Length", "dtype": "int", "default": "7"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.scrambler_bb(${mask}, ${seed}, ${len})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/scrambler_bb.h>"], "declarations": "digital::scrambler_bb::sptr ${id};", "make": "this->${id} = digital::scrambler_bb::make(${mask}, ${seed}, ${len});", "link": ["gnuradio-digital"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_simple_correlator.block.yml": {"id": "digital_simple_correlator", "label": "Simple Correlator", "flags": ["python", "cpp"], "parameters": [{"id": "payload_bytesize", "label": "Payload Byte Size", "dtype": "int"}], "inputs": [{"domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.simple_correlator(${payload_bytesize})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/simple_correlator.h>"], "declarations": "digital::simple_correlator::sptr ${id};", "make": "this->${id} = digital::simple_correlator::make(${payload_bytesize});", "link": ["gnuradio-digital"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_simple_framer.block.yml": {"id": "digital_simple_framer", "label": "Simple Framer", "flags": ["python", "cpp"], "parameters": [{"id": "payload_bytesize", "label": "Payload Byte Size", "dtype": "int"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import digital", "make": "digital.simple_framer(${payload_bytesize})"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/simple_framer.h>"], "declarations": "digital::simple_framer::sptr ${id};", "make": "this->${id} = digital::simple_framer::make(${payload_bytesize});", "link": ["gnuradio-digital"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/digital_symbol_sync_xx.block.yml": {"id": "digital_symbol_sync_xx", "label": "Symbol Sync", "category": "[Core]/Synchronizers", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "I/O Type", "dtype": "enum", "options": ["cc", "ff"], "option_labels": ["Complex", "Float"], "option_attributes": {"input": ["complex", "float"], "output": ["complex", "float"]}, "hide": "part"}, {"id": "ted_type", "label": "Timing Error Detector", "dtype": "enum", "options": ["digital.TED_MUELLER_AND_MULLER", "digital.TED_MOD_MUELLER_AND_MULLER", "digital.TED_ZERO_CROSSING", "digital.TED_GARDNER", "digital.TED_EARLY_LATE", "digital.TED_DANDREA_AND_MENGALI_GEN_MSK", "digital.TED_MENGALI_AND_DANDREA_GMSK", "digital.TED_SIGNAL_TIMES_SLOPE_ML", "digital.TED_SIGNUM_TIMES_SLOPE_ML"], "option_labels": ["Mueller and Mueller", "Modified Mueller and Mueller", "Zero Crossing", "Gardner", "Early-Late", "D'Andrea and Mengali Gen MSK", "Mengali and D'Andrea GMSK", "y[n]y'[n] Maximum Likelyhood", "sgn(y[n])y'[n] Maximum Likelyhood"], "option_attributes": {"hide_constellation": ["part", "part", "part", "all", "all", "all", "all", "all", "all"]}}, {"id": "constellation", "label": "TED Slicer Constellation", "dtype": "raw", "default": "digital.constellation_bpsk().base()", "hide": "${ ted_type.hide_constellation }"}, {"id": "sps", "label": "Samples per Symbol", "dtype": "real", "default": "sps"}, {"id": "ted_gain", "label": "Expected TED Gain", "dtype": "real", "default": "1.0"}, {"id": "loop_bw", "label": "Loop Bandwidth", "dtype": "real", "default": "0.045"}, {"id": "damping", "label": "Damping Factor", "dtype": "real", "default": "1.0"}, {"id": "max_dev", "label": "Maximum Deviation", "dtype": "real", "default": "1.5"}, {"id": "osps", "label": "Output Samples/Symbol", "dtype": "int", "default": "1"}, {"id": "resamp_type", "label": "Interpolating Resampler", "dtype": "enum", "options": ["digital.IR_MMSE_8TAP", "digital.IR_PFB_NO_MF", "digital.IR_PFB_MF"], "option_labels": ["MMSE, 8 tap FIR", "Polyphase Filterbank, MMSE", "Polyphase Filterbank, MF"], "option_attributes": {"hide_nfilters": ["all", "none", "none"], "hide_pfb_mf_taps": ["all", "all", "none"]}}, {"id": "nfilters", "label": "Filterbank Arms", "dtype": "int", "default": "128", "hide": "${ resamp_type.hide_nfilters }"}, {"id": "pfb_mf_taps", "label": "PFB MF Taps", "dtype": "real_vector", "default": "[]", "hide": "${ resamp_type.hide_pfb_mf_taps }"}], "inputs": [{"domain": "stream", "dtype": "${ type.input }"}], "outputs": [{"domain": "stream", "dtype": "${ type.output }"}, {"label": "error", "domain": "stream", "dtype": "float", "optional": true}, {"label": "T_inst", "domain": "stream", "dtype": "float", "optional": true}, {"label": "T_avg", "domain": "stream", "dtype": "float", "optional": true}], "templates": {"imports": "from gnuradio import digital\nfrom gnuradio import filter", "make": "digital.symbol_sync_${type}(\n    ${ted_type}, \n    ${sps}, \n    ${loop_bw}, \n    ${damping},\n    ${ted_gain}, \n    ${max_dev}, \n    ${osps}, \n    ${constellation}, \n    ${resamp_type}, \n    ${nfilters},\n    ${pfb_mf_taps})", "callbacks": ["set_loop_bandwidth(${loop_bw})", "set_damping_factor(${damping})", "set_ted_gain(${ted_gain})"]}, "cpp_templates": {"includes": ["#include <gnuradio/digital/symbol_sync_${type}.h>"], "declarations": "digital::symbol_sync_${type}::sptr ${id};", "make": "std::vector<float> pfb_mf_taps = {${str(pfb_mf_taps)[1:-1]}};\nthis->${id} = digital::symbol_sync_${type}::make(\n    ${ted_type}, \n    ${sps}, \n    ${loop_bw}, \n    ${damping},\n    ${ted_gain}, \n    ${max_dev}, \n    ${osps}, \n    ${constellation}, \n    ${resamp_type}, \n    ${nfilters},\n    pfb_mf_taps);", "link": ["gnuradio-digital"], "callbacks": ["set_loop_bandwidth(${loop_bw})", "set_damping_factor(${damping})", "set_ted_gain(${ted_gain})"], "translations": {"digital.": "digital::"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv.tree.yml": {"[Core]": [{"Digital Television": [{"ATSC": ["dtv_atsc_deinterleaver", "dtv_atsc_depad", "dtv_atsc_derandomizer", "dtv_atsc_equalizer", "dtv_atsc_fpll", "dtv_atsc_fs_checker", "dtv_atsc_rs_decoder", "dtv_atsc_rx", "dtv_atsc_rx_filter", "dtv_atsc_sync", "dtv_atsc_viterbi_decoder", "dtv_atsc_pad", "dtv_atsc_randomizer", "dtv_atsc_rs_encoder", "dtv_atsc_interleaver", "dtv_atsc_trellis_encoder", "dtv_atsc_field_sync_mux"]}, {"DVB": ["dtv_dvb_bbheader_bb", "dtv_dvb_bbscrambler_bb", "dtv_dvb_bch_bb", "dtv_dvb_ldpc_bb"]}, {"DVB-T2": ["dtv_dvbt2_interleaver_bb", "dtv_dvbt2_modulator_bc", "dtv_dvbt2_cellinterleaver_cc", "dtv_dvbt2_framemapper_cc", "dtv_dvbt2_freqinterleaver_cc", "dtv_dvbt2_pilotgenerator_cc", "dtv_dvbt2_paprtr_cc", "dtv_dvbt2_p1insertion_cc", "dtv_dvbt2_miso_cc"]}, {"DVB-S2": ["dtv_dvbs2_interleaver_bb", "dtv_dvbs2_modulator_bc", "dtv_dvbs2_physical_cc"]}, {"DVB-T": ["dtv_dvbt_energy_dispersal", "dtv_dvbt_reed_solomon_enc", "dtv_dvbt_convolutional_interleaver", "dtv_dvbt_inner_coder", "dtv_dvbt_bit_inner_interleaver", "dtv_dvbt_symbol_inner_interleaver", "dtv_dvbt_map", "dtv_dvbt_reference_signals", "dtv_dvbt_ofdm_sym_acquisition", "dtv_dvbt_demod_reference_signals", "dtv_dvbt_demap", "dtv_dvbt_bit_inner_deinterleaver", "dtv_dvbt_viterbi_decoder", "dtv_dvbt_convolutional_deinterleaver", "dtv_dvbt_reed_solomon_dec", "dtv_dvbt_energy_descramble"]}, {"ITU-T J.83B": ["dtv_catv_transport_framing_enc_bb", "dtv_catv_reed_solomon_enc_bb", "dtv_catv_randomizer_bb", "dtv_catv_frame_sync_enc_bb", "dtv_catv_trellis_enc_bb"]}]}]}, "/usr/local/share/gnuradio/grc/blocks/dtv_atsc_deinterleaver.block.yml": {"id": "dtv_atsc_deinterleaver", "label": "ATSC Deinterleaver", "inputs": [{"domain": "stream", "dtype": "byte", "vlen": 256}], "outputs": [{"domain": "stream", "dtype": "byte", "vlen": 256}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.atsc_deinterleaver()"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_atsc_depad.block.yml": {"id": "dtv_atsc_depad", "label": "ATSC Depad", "inputs": [{"domain": "stream", "dtype": "byte", "vlen": 256}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.atsc_depad()"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_atsc_derandomizer.block.yml": {"id": "dtv_atsc_derandomizer", "label": "ATSC Derandomizer", "inputs": [{"domain": "stream", "dtype": "byte", "vlen": 256}], "outputs": [{"domain": "stream", "dtype": "byte", "vlen": 256}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.atsc_derandomizer()"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_atsc_equalizer.block.yml": {"id": "dtv_atsc_equalizer", "label": "ATSC Equalizer", "inputs": [{"domain": "stream", "dtype": "byte", "vlen": 4096}], "outputs": [{"domain": "stream", "dtype": "byte", "vlen": 4096}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.atsc_equalizer()"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_atsc_field_sync_mux.block.yml": {"id": "dtv_atsc_field_sync_mux", "label": "ATSC Field Sync Mux", "inputs": [{"domain": "stream", "dtype": "byte", "vlen": 256}], "outputs": [{"domain": "stream", "dtype": "byte", "vlen": 1024}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.atsc_field_sync_mux()"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_atsc_fpll.block.yml": {"id": "dtv_atsc_fpll", "label": "ATSC Receiver FPLL", "parameters": [{"id": "rate", "label": "Sample Rate", "dtype": "float"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "float"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.atsc_fpll(${rate})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_atsc_fs_checker.block.yml": {"id": "dtv_atsc_fs_checker", "label": "ATSC Field Sync Checker", "inputs": [{"domain": "stream", "dtype": "byte", "vlen": 4096}], "outputs": [{"domain": "stream", "dtype": "byte", "vlen": 4096}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.atsc_fs_checker()"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_atsc_interleaver.block.yml": {"id": "dtv_atsc_interleaver", "label": "ATSC Interleaver", "inputs": [{"domain": "stream", "dtype": "byte", "vlen": 256}], "outputs": [{"domain": "stream", "dtype": "byte", "vlen": 256}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.atsc_interleaver()"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_atsc_pad.block.yml": {"id": "dtv_atsc_pad", "label": "ATSC Pad", "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte", "vlen": 256}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.atsc_pad()"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_atsc_randomizer.block.yml": {"id": "dtv_atsc_randomizer", "label": "ATSC Randomizer", "inputs": [{"domain": "stream", "dtype": "byte", "vlen": 256}], "outputs": [{"domain": "stream", "dtype": "byte", "vlen": 256}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.atsc_randomizer()"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_atsc_rs_decoder.block.yml": {"id": "dtv_atsc_rs_decoder", "label": "ATSC Reed–Solomon Decoder", "inputs": [{"domain": "stream", "dtype": "byte", "vlen": 256}], "outputs": [{"domain": "stream", "dtype": "byte", "vlen": 256}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.atsc_rs_decoder()"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_atsc_rs_encoder.block.yml": {"id": "dtv_atsc_rs_encoder", "label": "ATSC RS Encoder", "inputs": [{"domain": "stream", "dtype": "byte", "vlen": 256}], "outputs": [{"domain": "stream", "dtype": "byte", "vlen": 256}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.atsc_rs_encoder()"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_atsc_rx.block.yml": {"id": "dtv_atsc_rx", "label": "ATSC Receive Pipeline", "parameters": [{"id": "rate", "label": "Input Rate", "dtype": "float"}, {"id": "sps", "label": "Oversampling Ratio", "dtype": "float"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.atsc_rx(${rate},${sps})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_atsc_rx_filter.block.yml": {"id": "dtv_atsc_rx_filter", "label": "ATSC RX Filter", "parameters": [{"id": "rate", "label": "Input Rate", "dtype": "float"}, {"id": "sps", "label": "Oversampling Ratio", "dtype": "float"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.atsc_rx_filter(${rate},${sps})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_atsc_sync.block.yml": {"id": "dtv_atsc_sync", "label": "ATSC Receiver SYNC", "parameters": [{"id": "rate", "label": "Sample Rate", "dtype": "float"}], "inputs": [{"domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "byte", "vlen": 4096}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.atsc_sync(${rate})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_atsc_trellis_encoder.block.yml": {"id": "dtv_atsc_trellis_encoder", "label": "ATSC Trellis Encoder", "inputs": [{"domain": "stream", "dtype": "byte", "vlen": 256}], "outputs": [{"domain": "stream", "dtype": "byte", "vlen": 256}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.atsc_trellis_encoder()"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_atsc_viterbi_decoder.block.yml": {"id": "dtv_atsc_viterbi_decoder", "label": "ATSC Viterbi Decoder", "inputs": [{"domain": "stream", "dtype": "byte", "vlen": 4096}], "outputs": [{"domain": "stream", "dtype": "byte", "vlen": 256}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.atsc_viterbi_decoder()"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_catv_frame_sync_enc_bb.block.yml": {"id": "dtv_catv_frame_sync_enc_bb", "label": "Frame Sync Encoder", "parameters": [{"id": "constellation", "label": "Constellation", "dtype": "enum", "options": ["CATV_MOD_64QAM", "CATV_MOD_256QAM"], "option_labels": ["64QAM", "256QAM"], "option_attributes": {"val": ["dtv.CATV_MOD_64QAM", "dtv.CATV_MOD_256QAM"]}}, {"id": "ctrlword", "label": "Control Word", "dtype": "int", "default": "6"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.catv_frame_sync_enc_bb(${constellation.val}, ${ctrlword})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_catv_randomizer_bb.block.yml": {"id": "dtv_catv_randomizer_bb", "label": "Randomizer", "parameters": [{"id": "constellation", "label": "Constellation", "dtype": "enum", "options": ["CATV_MOD_64QAM", "CATV_MOD_256QAM"], "option_labels": ["64QAM", "256QAM"], "option_attributes": {"val": ["dtv.CATV_MOD_64QAM", "dtv.CATV_MOD_256QAM"]}}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.catv_randomizer_bb(${constellation.val})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_catv_reed_solomon_enc_bb.block.yml": {"id": "dtv_catv_reed_solomon_enc_bb", "label": "Reed-Solomon Encoder", "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.catv_reed_solomon_enc_bb()"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_catv_transport_framing_enc_bb.block.yml": {"id": "dtv_catv_transport_framing_enc_bb", "label": "Transport Framing Encoder", "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.catv_transport_framing_enc_bb()"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_catv_trellis_enc_bb.block.yml": {"id": "dtv_catv_trellis_enc_bb", "label": "Trellis Encoder", "parameters": [{"id": "constellation", "label": "Constellation", "dtype": "enum", "options": ["CATV_MOD_64QAM", "CATV_MOD_256QAM"], "option_labels": ["64QAM", "256QAM"], "option_attributes": {"val": ["dtv.CATV_MOD_64QAM", "dtv.CATV_MOD_256QAM"]}}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.catv_trellis_enc_bb(${constellation.val})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_dvb_bbheader_bb.block.yml": {"id": "dtv_dvb_bbheader_bb", "label": "BBheader", "parameters": [{"id": "standard", "label": "Standard", "dtype": "enum", "options": ["STANDARD_DVBS2", "STANDARD_DVBT2"], "option_labels": ["DVB-S2", "DVB-T2"], "option_attributes": {"hide_dvbs2": ["none", "all"], "hide_dvbt2": ["all", "none"], "val": ["dtv.STANDARD_DVBS2", "dtv.STANDARD_DVBT2"]}}, {"id": "framesize1", "label": "FECFRAME size", "dtype": "enum", "options": ["FECFRAME_NORMAL", "FECFRAME_SHORT"], "option_labels": ["Normal", "Short"], "option_attributes": {"hide_medium": ["all", "all"], "hide_normal": ["none", "all"], "hide_short": ["all", "none"], "val": ["dtv.FECFRAME_NORMAL", "dtv.FECFRAME_SHORT"]}, "hide": "${ standard.hide_dvbt2 }"}, {"id": "framesize2", "label": "FECFRAME size", "dtype": "enum", "options": ["FECFRAME_NORMAL", "FECFRAME_MEDIUM", "FECFRAME_SHORT"], "option_labels": ["Normal", "Medium", "Short"], "option_attributes": {"hide_medium": ["all", "none", "all"], "hide_normal": ["none", "all", "all"], "hide_short": ["all", "all", "none"], "val": ["dtv.FECFRAME_NORMAL", "dtv.FECFRAME_MEDIUM", "dtv.FECFRAME_SHORT"]}, "hide": "${ standard.hide_dvbs2 }"}, {"id": "rate1", "label": "Code rate", "dtype": "enum", "options": ["C1_2", "C3_5", "C2_3", "C3_4", "C4_5", "C5_6"], "option_labels": ["1/2", "3/5", "2/3", "3/4", "4/5", "5/6"], "option_attributes": {"val": ["dtv.C1_2", "dtv.C3_5", "dtv.C2_3", "dtv.C3_4", "dtv.C4_5", "dtv.C5_6"]}, "hide": "${ (framesize1.hide_normal if str(standard) == 'STANDARD_DVBT2' else 'all') }"}, {"id": "rate2", "label": "Code rate", "dtype": "enum", "options": ["C1_3", "C2_5", "C1_2", "C3_5", "C2_3", "C3_4", "C4_5", "C5_6"], "option_labels": ["1/3", "2/5", "1/2", "3/5", "2/3", "3/4", "4/5", "5/6"], "option_attributes": {"val": ["dtv.C1_3", "dtv.C2_5", "dtv.C1_2", "dtv.C3_5", "dtv.C2_3", "dtv.C3_4", "dtv.C4_5", "dtv.C5_6"]}, "hide": "${ (framesize1.hide_short if str(standard) == 'STANDARD_DVBT2' else 'all') }"}, {"id": "rate3", "label": "Code rate", "dtype": "enum", "options": ["C1_4", "C1_3", "C2_5", "C1_2", "C3_5", "C2_3", "C3_4", "C4_5", "C5_6", "C8_9", "C9_10", "C2_9_VLSNR", "C13_45", "C9_20", "C90_180", "C96_180", "C11_20", "C100_180", "C104_180", "C26_45", "C18_30", "C28_45", "C23_36", "C116_180", "C20_30", "C124_180", "C25_36", "C128_180", "C13_18", "C132_180", "C22_30", "C135_180", "C140_180", "C7_9", "C154_180"], "option_labels": ["1/4", "1/3", "2/5", "1/2", "3/5", "2/3", "3/4", "4/5", "5/6", "8/9", "9/10", "2/9 VL-SNR", "13/45", "9/20", "90/180", "96/180", "11/20", "100/180", "104/180", "26/45", "18/30", "28/45", "23/36", "116/180", "20/30", "124/180", "25/36", "128/180", "13/18", "132/180", "22/30", "135/180", "140/180", "7/9", "154/180"], "option_attributes": {"val": ["dtv.C1_4", "dtv.C1_3", "dtv.C2_5", "dtv.C1_2", "dtv.C3_5", "dtv.C2_3", "dtv.C3_4", "dtv.C4_5", "dtv.C5_6", "dtv.C8_9", "dtv.C9_10", "dtv.C2_9_VLSNR", "dtv.C13_45", "dtv.C9_20", "dtv.C90_180", "dtv.C96_180", "dtv.C11_20", "dtv.C100_180", "dtv.C104_180", "dtv.C26_45", "dtv.C18_30", "dtv.C28_45", "dtv.C23_36", "dtv.C116_180", "dtv.C20_30", "dtv.C124_180", "dtv.C25_36", "dtv.C128_180", "dtv.C13_18", "dtv.C132_180", "dtv.C22_30", "dtv.C135_180", "dtv.C140_180", "dtv.C7_9", "dtv.C154_180"]}, "hide": "${ (framesize2.hide_normal if str(standard) == 'STANDARD_DVBS2' else 'all') }"}, {"id": "rate4", "label": "Code rate", "dtype": "enum", "options": ["C1_5_MEDIUM", "C11_45_MEDIUM", "C1_3_MEDIUM"], "option_labels": ["1/5", "11/45", "1/3"], "option_attributes": {"val": ["dtv.C1_5_MEDIUM", "dtv.C11_45_MEDIUM", "dtv.C1_3_MEDIUM"]}, "hide": "${ (framesize2.hide_medium if str(standard) == 'STANDARD_DVBS2' else 'all') }"}, {"id": "rate5", "label": "Code rate", "dtype": "enum", "options": ["C1_4", "C1_3", "C2_5", "C1_2", "C3_5", "C2_3", "C3_4", "C4_5", "C5_6", "C8_9", "C11_45", "C4_15", "C14_45", "C7_15", "C8_15", "C26_45", "C32_45", "C1_5_VLSNR_SF2", "C11_45_VLSNR_SF2", "C1_5_VLSNR", "C4_15_VLSNR", "C1_3_VLSNR"], "option_labels": ["1/4", "1/3", "2/5", "1/2", "3/5", "2/3", "3/4", "4/5", "5/6", "8/9", "11/45", "4/15", "14/45", "7/15", "8/15", "26/45", "32/45", "1/5 VL-SNR SF2", "11/45 VL-SNR SF2", "1/5 VL-SNR", "4/15 VL-SNR", "1/3 VL-SNR"], "option_attributes": {"val": ["dtv.C1_4", "dtv.C1_3", "dtv.C2_5", "dtv.C1_2", "dtv.C3_5", "dtv.C2_3", "dtv.C3_4", "dtv.C4_5", "dtv.C5_6", "dtv.C8_9", "dtv.C11_45", "dtv.C4_15", "dtv.C14_45", "dtv.C7_15", "dtv.C8_15", "dtv.C26_45", "dtv.C32_45", "dtv.C1_5_VLSNR_SF2", "dtv.C11_45_VLSNR_SF2", "dtv.C1_5_VLSNR", "dtv.C4_15_VLSNR", "dtv.C1_3_VLSNR"]}, "hide": "${ (framesize2.hide_short if str(standard) == 'STANDARD_DVBS2' else 'all') }"}, {"id": "rolloff", "label": "Rolloff factor", "dtype": "enum", "options": ["RO_0_35", "RO_0_25", "RO_0_20", "RO_0_15", "RO_0_10", "RO_0_05"], "option_labels": ["0.35", "0.25", "0.20", "0.15", "0.10", "0.05"], "option_attributes": {"val": ["dtv.RO_0_35", "dtv.RO_0_25", "dtv.RO_0_20", "dtv.RO_0_15", "dtv.RO_0_10", "dtv.RO_0_05"]}, "hide": "${ standard.hide_dvbs2 }"}, {"id": "mode", "label": "Baseband Framing Mode", "dtype": "enum", "options": ["INPUTMODE_NORMAL", "INPUTMODE_HIEFF"], "option_labels": ["Normal", "High Efficiency"], "option_attributes": {"val": ["dtv.INPUTMODE_NORMAL", "dtv.INPUTMODE_HIEFF"]}, "hide": "${ standard.hide_dvbt2 }"}, {"id": "inband", "label": "In-band Signalling", "dtype": "enum", "options": ["INBAND_OFF", "INBAND_ON"], "option_labels": ["Off", "Type B"], "option_attributes": {"hide_rate": ["all", "none"], "val": ["dtv.INBAND_OFF", "dtv.INBAND_ON"]}, "hide": "${ standard.hide_dvbt2 }"}, {"id": "fecblocks", "label": "FEC blocks per frame", "dtype": "int", "default": "168", "hide": "${ inband.hide_rate }"}, {"id": "tsrate", "label": "Transport Stream Rate", "dtype": "int", "default": "4000000", "hide": "${ inband.hide_rate }"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.dvb_bbheader_bb(\n${standard.val},\n% if str(standard) == 'STANDARD_DVBT2':\n${framesize1.val},\n% else:\n${framesize2.val},\n% endif\n% if str(standard) == 'STANDARD_DVBT2':\n% if str(framesize1) == 'FECFRAME_NORMAL':\n${rate1.val},\n% else:\n${rate2.val},\n% endif\n% else:\n% if str(framesize2) == 'FECFRAME_NORMAL':\n${rate3.val},\n% elif str(framesize2) == 'FECFRAME_MEDIUM':\n${rate4.val},\n% else:\n${rate5.val},\n% endif\n% endif\n${rolloff.val},\n${mode.val},\n${inband.val},\n${fecblocks},\n${tsrate})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_dvb_bbscrambler_bb.block.yml": {"id": "dtv_dvb_bbscrambler_bb", "label": "BBscrambler", "parameters": [{"id": "standard", "label": "Standard", "dtype": "enum", "options": ["STANDARD_DVBS2", "STANDARD_DVBT2"], "option_labels": ["DVB-S2", "DVB-T2"], "option_attributes": {"hide_dvbs2": ["none", "all"], "hide_dvbt2": ["all", "none"], "val": ["dtv.STANDARD_DVBS2", "dtv.STANDARD_DVBT2"]}}, {"id": "framesize1", "label": "FECFRAME size", "dtype": "enum", "options": ["FECFRAME_NORMAL", "FECFRAME_SHORT"], "option_labels": ["Normal", "Short"], "option_attributes": {"hide_medium": ["all", "all"], "hide_normal": ["none", "all"], "hide_short": ["all", "none"], "val": ["dtv.FECFRAME_NORMAL", "dtv.FECFRAME_SHORT"]}, "hide": "${ standard.hide_dvbt2 }"}, {"id": "framesize2", "label": "FECFRAME size", "dtype": "enum", "options": ["FECFRAME_NORMAL", "FECFRAME_MEDIUM", "FECFRAME_SHORT"], "option_labels": ["Normal", "Medium", "Short"], "option_attributes": {"hide_medium": ["all", "none", "all"], "hide_normal": ["none", "all", "all"], "hide_short": ["all", "all", "none"], "val": ["dtv.FECFRAME_NORMAL", "dtv.FECFRAME_MEDIUM", "dtv.FECFRAME_SHORT"]}, "hide": "${ standard.hide_dvbs2 }"}, {"id": "rate1", "label": "Code rate", "dtype": "enum", "options": ["C1_2", "C3_5", "C2_3", "C3_4", "C4_5", "C5_6"], "option_labels": ["1/2", "3/5", "2/3", "3/4", "4/5", "5/6"], "option_attributes": {"val": ["dtv.C1_2", "dtv.C3_5", "dtv.C2_3", "dtv.C3_4", "dtv.C4_5", "dtv.C5_6"]}, "hide": "${ (framesize1.hide_normal if str(standard) == 'STANDARD_DVBT2' else 'all') }"}, {"id": "rate2", "label": "Code rate", "dtype": "enum", "options": ["C1_3", "C2_5", "C1_2", "C3_5", "C2_3", "C3_4", "C4_5", "C5_6"], "option_labels": ["1/3", "2/5", "1/2", "3/5", "2/3", "3/4", "4/5", "5/6"], "option_attributes": {"val": ["dtv.C1_3", "dtv.C2_5", "dtv.C1_2", "dtv.C3_5", "dtv.C2_3", "dtv.C3_4", "dtv.C4_5", "dtv.C5_6"]}, "hide": "${ (framesize1.hide_short if str(standard) == 'STANDARD_DVBT2' else 'all') }"}, {"id": "rate3", "label": "Code rate", "dtype": "enum", "options": ["C1_4", "C1_3", "C2_5", "C1_2", "C3_5", "C2_3", "C3_4", "C4_5", "C5_6", "C8_9", "C9_10", "C2_9_VLSNR", "C13_45", "C9_20", "C90_180", "C96_180", "C11_20", "C100_180", "C104_180", "C26_45", "C18_30", "C28_45", "C23_36", "C116_180", "C20_30", "C124_180", "C25_36", "C128_180", "C13_18", "C132_180", "C22_30", "C135_180", "C140_180", "C7_9", "C154_180"], "option_labels": ["1/4", "1/3", "2/5", "1/2", "3/5", "2/3", "3/4", "4/5", "5/6", "8/9", "9/10", "2/9 VL-SNR", "13/45", "9/20", "90/180", "96/180", "11/20", "100/180", "104/180", "26/45", "18/30", "28/45", "23/36", "116/180", "20/30", "124/180", "25/36", "128/180", "13/18", "132/180", "22/30", "135/180", "140/180", "7/9", "154/180"], "option_attributes": {"val": ["dtv.C1_4", "dtv.C1_3", "dtv.C2_5", "dtv.C1_2", "dtv.C3_5", "dtv.C2_3", "dtv.C3_4", "dtv.C4_5", "dtv.C5_6", "dtv.C8_9", "dtv.C9_10", "dtv.C2_9_VLSNR", "dtv.C13_45", "dtv.C9_20", "dtv.C90_180", "dtv.C96_180", "dtv.C11_20", "dtv.C100_180", "dtv.C104_180", "dtv.C26_45", "dtv.C18_30", "dtv.C28_45", "dtv.C23_36", "dtv.C116_180", "dtv.C20_30", "dtv.C124_180", "dtv.C25_36", "dtv.C128_180", "dtv.C13_18", "dtv.C132_180", "dtv.C22_30", "dtv.C135_180", "dtv.C140_180", "dtv.C7_9", "dtv.C154_180"]}, "hide": "${ (framesize2.hide_normal if str(standard) == 'STANDARD_DVBS2' else 'all') }"}, {"id": "rate4", "label": "Code rate", "dtype": "enum", "options": ["C1_5_MEDIUM", "C11_45_MEDIUM", "C1_3_MEDIUM"], "option_labels": ["1/5", "11/45", "1/3"], "option_attributes": {"val": ["dtv.C1_5_MEDIUM", "dtv.C11_45_MEDIUM", "dtv.C1_3_MEDIUM"]}, "hide": "${ (framesize2.hide_medium if str(standard) == 'STANDARD_DVBS2' else 'all') }"}, {"id": "rate5", "label": "Code rate", "dtype": "enum", "options": ["C1_4", "C1_3", "C2_5", "C1_2", "C3_5", "C2_3", "C3_4", "C4_5", "C5_6", "C8_9", "C11_45", "C4_15", "C14_45", "C7_15", "C8_15", "C26_45", "C32_45", "C1_5_VLSNR_SF2", "C11_45_VLSNR_SF2", "C1_5_VLSNR", "C4_15_VLSNR", "C1_3_VLSNR"], "option_labels": ["1/4", "1/3", "2/5", "1/2", "3/5", "2/3", "3/4", "4/5", "5/6", "8/9", "11/45", "4/15", "14/45", "7/15", "8/15", "26/45", "32/45", "1/5 VL-SNR SF2", "11/45 VL-SNR SF2", "1/5 VL-SNR", "4/15 VL-SNR", "1/3 VL-SNR"], "option_attributes": {"val": ["dtv.C1_4", "dtv.C1_3", "dtv.C2_5", "dtv.C1_2", "dtv.C3_5", "dtv.C2_3", "dtv.C3_4", "dtv.C4_5", "dtv.C5_6", "dtv.C8_9", "dtv.C11_45", "dtv.C4_15", "dtv.C14_45", "dtv.C7_15", "dtv.C8_15", "dtv.C26_45", "dtv.C32_45", "dtv.C1_5_VLSNR_SF2", "dtv.C11_45_VLSNR_SF2", "dtv.C1_5_VLSNR", "dtv.C4_15_VLSNR", "dtv.C1_3_VLSNR"]}, "hide": "${ (framesize2.hide_short if str(standard) == 'STANDARD_DVBS2' else 'all') }"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.dvb_bbscrambler_bb(\n    ${standard.val},\n    % if str(standard) == 'STANDARD_DVBT2':\n    ${framesize1.val},\n    % else:\n    ${framesize2.val},\n    % endif\n    % if str(standard) == 'STANDARD_DVBT2':\n    % if str(framesize1) == 'FECFRAME_NORMAL':\n    ${rate1.val}\n    % else:\n    ${rate2.val}\n    % endif\n    % else:\n    % if str(framesize2) == 'FECFRAME_NORMAL':\n    ${rate3.val}\n    % elif str(framesize2) == 'FECFRAME_MEDIUM':\n    ${rate4.val}\n    % else:\n    ${rate5.val}\n    % endif\n    % endif\n    )"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_dvb_bch_bb.block.yml": {"id": "dtv_dvb_bch_bb", "label": "BCH Encoder", "parameters": [{"id": "standard", "label": "Standard", "dtype": "enum", "options": ["STANDARD_DVBS2", "STANDARD_DVBT2"], "option_labels": ["DVB-S2", "DVB-T2"], "option_attributes": {"hide_dvbs2": ["none", "all"], "hide_dvbt2": ["all", "none"], "val": ["dtv.STANDARD_DVBS2", "dtv.STANDARD_DVBT2"]}}, {"id": "framesize1", "label": "FECFRAME size", "dtype": "enum", "options": ["FECFRAME_NORMAL", "FECFRAME_SHORT"], "option_labels": ["Normal", "Short"], "option_attributes": {"hide_medium": ["all", "all"], "hide_normal": ["none", "all"], "hide_short": ["all", "none"], "val": ["dtv.FECFRAME_NORMAL", "dtv.FECFRAME_SHORT"]}, "hide": "${ standard.hide_dvbt2 }"}, {"id": "framesize2", "label": "FECFRAME size", "dtype": "enum", "options": ["FECFRAME_NORMAL", "FECFRAME_MEDIUM", "FECFRAME_SHORT"], "option_labels": ["Normal", "Medium", "Short"], "option_attributes": {"hide_medium": ["all", "none", "all"], "hide_normal": ["none", "all", "all"], "hide_short": ["all", "all", "none"], "val": ["dtv.FECFRAME_NORMAL", "dtv.FECFRAME_MEDIUM", "dtv.FECFRAME_SHORT"]}, "hide": "${ standard.hide_dvbs2 }"}, {"id": "rate1", "label": "Code rate", "dtype": "enum", "options": ["C1_2", "C3_5", "C2_3", "C3_4", "C4_5", "C5_6"], "option_labels": ["1/2", "3/5", "2/3", "3/4", "4/5", "5/6"], "option_attributes": {"val": ["dtv.C1_2", "dtv.C3_5", "dtv.C2_3", "dtv.C3_4", "dtv.C4_5", "dtv.C5_6"]}, "hide": "${ (framesize1.hide_normal if str(standard) == 'STANDARD_DVBT2' else 'all') }"}, {"id": "rate2", "label": "Code rate", "dtype": "enum", "options": ["C1_3", "C2_5", "C1_2", "C3_5", "C2_3", "C3_4", "C4_5", "C5_6"], "option_labels": ["1/3", "2/5", "1/2", "3/5", "2/3", "3/4", "4/5", "5/6"], "option_attributes": {"val": ["dtv.C1_3", "dtv.C2_5", "dtv.C1_2", "dtv.C3_5", "dtv.C2_3", "dtv.C3_4", "dtv.C4_5", "dtv.C5_6"]}, "hide": "${ (framesize1.hide_short if str(standard) == 'STANDARD_DVBT2' else 'all') }"}, {"id": "rate3", "label": "Code rate", "dtype": "enum", "options": ["C1_4", "C1_3", "C2_5", "C1_2", "C3_5", "C2_3", "C3_4", "C4_5", "C5_6", "C8_9", "C9_10", "C2_9_VLSNR", "C13_45", "C9_20", "C90_180", "C96_180", "C11_20", "C100_180", "C104_180", "C26_45", "C18_30", "C28_45", "C23_36", "C116_180", "C20_30", "C124_180", "C25_36", "C128_180", "C13_18", "C132_180", "C22_30", "C135_180", "C140_180", "C7_9", "C154_180"], "option_labels": ["1/4", "1/3", "2/5", "1/2", "3/5", "2/3", "3/4", "4/5", "5/6", "8/9", "9/10", "2/9 VL-SNR", "13/45", "9/20", "90/180", "96/180", "11/20", "100/180", "104/180", "26/45", "18/30", "28/45", "23/36", "116/180", "20/30", "124/180", "25/36", "128/180", "13/18", "132/180", "22/30", "135/180", "140/180", "7/9", "154/180"], "option_attributes": {"val": ["dtv.C1_4", "dtv.C1_3", "dtv.C2_5", "dtv.C1_2", "dtv.C3_5", "dtv.C2_3", "dtv.C3_4", "dtv.C4_5", "dtv.C5_6", "dtv.C8_9", "dtv.C9_10", "dtv.C2_9_VLSNR", "dtv.C13_45", "dtv.C9_20", "dtv.C90_180", "dtv.C96_180", "dtv.C11_20", "dtv.C100_180", "dtv.C104_180", "dtv.C26_45", "dtv.C18_30", "dtv.C28_45", "dtv.C23_36", "dtv.C116_180", "dtv.C20_30", "dtv.C124_180", "dtv.C25_36", "dtv.C128_180", "dtv.C13_18", "dtv.C132_180", "dtv.C22_30", "dtv.C135_180", "dtv.C140_180", "dtv.C7_9", "dtv.C154_180"]}, "hide": "${ (framesize2.hide_normal if str(standard) == 'STANDARD_DVBS2' else 'all') }"}, {"id": "rate4", "label": "Code rate", "dtype": "enum", "options": ["C1_5_MEDIUM", "C11_45_MEDIUM", "C1_3_MEDIUM"], "option_labels": ["1/5", "11/45", "1/3"], "option_attributes": {"val": ["dtv.C1_5_MEDIUM", "dtv.C11_45_MEDIUM", "dtv.C1_3_MEDIUM"]}, "hide": "${ (framesize2.hide_medium if str(standard) == 'STANDARD_DVBS2' else 'all') }"}, {"id": "rate5", "label": "Code rate", "dtype": "enum", "options": ["C1_4", "C1_3", "C2_5", "C1_2", "C3_5", "C2_3", "C3_4", "C4_5", "C5_6", "C8_9", "C11_45", "C4_15", "C14_45", "C7_15", "C8_15", "C26_45", "C32_45", "C1_5_VLSNR_SF2", "C11_45_VLSNR_SF2", "C1_5_VLSNR", "C4_15_VLSNR", "C1_3_VLSNR"], "option_labels": ["1/4", "1/3", "2/5", "1/2", "3/5", "2/3", "3/4", "4/5", "5/6", "8/9", "11/45", "4/15", "14/45", "7/15", "8/15", "26/45", "32/45", "1/5 VL-SNR SF2", "11/45 VL-SNR SF2", "1/5 VL-SNR", "4/15 VL-SNR", "1/3 VL-SNR"], "option_attributes": {"val": ["dtv.C1_4", "dtv.C1_3", "dtv.C2_5", "dtv.C1_2", "dtv.C3_5", "dtv.C2_3", "dtv.C3_4", "dtv.C4_5", "dtv.C5_6", "dtv.C8_9", "dtv.C11_45", "dtv.C4_15", "dtv.C14_45", "dtv.C7_15", "dtv.C8_15", "dtv.C26_45", "dtv.C32_45", "dtv.C1_5_VLSNR_SF2", "dtv.C11_45_VLSNR_SF2", "dtv.C1_5_VLSNR", "dtv.C4_15_VLSNR", "dtv.C1_3_VLSNR"]}, "hide": "${ (framesize2.hide_short if str(standard) == 'STANDARD_DVBS2' else 'all') }"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.dvb_bch_bb(\n    ${standard.val},\n    % if str(standard) == 'STANDARD_DVBT2':\n    ${framesize1.val},\n    % else:\n    ${framesize2.val},\n    % endif\n    % if str(standard) == 'STANDARD_DVBT2':\n    % if str(framesize1) == 'FECFRAME_NORMAL':\n    ${rate1.val}\n    % else:\n    ${rate2.val}\n    % endif\n    % else:\n    % if str(framesize2) == 'FECFRAME_NORMAL':\n    ${rate3.val}\n    % elif str(framesize2) == 'FECFRAME_MEDIUM':\n    ${rate4.val}\n    % else:\n    ${rate5.val}\n    % endif\n    % endif\n    )"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_dvb_ldpc_bb.block.yml": {"id": "dtv_dvb_ldpc_bb", "label": "LDPC Encoder", "parameters": [{"id": "standard", "label": "Standard", "dtype": "enum", "options": ["STANDARD_DVBS2", "STANDARD_DVBT2"], "option_labels": ["DVB-S2", "DVB-T2"], "option_attributes": {"hide_dvbs2": ["none", "all"], "hide_dvbt2": ["all", "none"], "val": ["dtv.STANDARD_DVBS2", "dtv.STANDARD_DVBT2"]}}, {"id": "framesize1", "label": "FECFRAME size", "dtype": "enum", "options": ["FECFRAME_NORMAL", "FECFRAME_SHORT"], "option_labels": ["Normal", "Short"], "option_attributes": {"hide_medium": ["all", "all"], "hide_normal": ["none", "all"], "hide_short": ["all", "none"], "val": ["dtv.FECFRAME_NORMAL", "dtv.FECFRAME_SHORT"]}, "hide": "${ standard.hide_dvbt2 }"}, {"id": "framesize2", "label": "FECFRAME size", "dtype": "enum", "options": ["FECFRAME_NORMAL", "FECFRAME_MEDIUM", "FECFRAME_SHORT"], "option_labels": ["Normal", "Medium", "Short"], "option_attributes": {"hide_medium": ["all", "none", "all"], "hide_normal": ["none", "all", "all"], "hide_short": ["all", "all", "none"], "val": ["dtv.FECFRAME_NORMAL", "dtv.FECFRAME_MEDIUM", "dtv.FECFRAME_SHORT"]}, "hide": "${ standard.hide_dvbs2 }"}, {"id": "rate1", "label": "Code rate", "dtype": "enum", "options": ["C1_2", "C3_5", "C2_3", "C3_4", "C4_5", "C5_6"], "option_labels": ["1/2", "3/5", "2/3", "3/4", "4/5", "5/6"], "option_attributes": {"val": ["dtv.C1_2", "dtv.C3_5", "dtv.C2_3", "dtv.C3_4", "dtv.C4_5", "dtv.C5_6"]}, "hide": "${ (framesize1.hide_normal if str(standard) == 'STANDARD_DVBT2' else 'all') }"}, {"id": "rate2", "label": "Code rate", "dtype": "enum", "options": ["C1_3", "C2_5", "C1_2", "C3_5", "C2_3", "C3_4", "C4_5", "C5_6"], "option_labels": ["1/3", "2/5", "1/2", "3/5", "2/3", "3/4", "4/5", "5/6"], "option_attributes": {"val": ["dtv.C1_3", "dtv.C2_5", "dtv.C1_2", "dtv.C3_5", "dtv.C2_3", "dtv.C3_4", "dtv.C4_5", "dtv.C5_6"]}, "hide": "${ (framesize1.hide_short if str(standard) == 'STANDARD_DVBT2' else 'all') }"}, {"id": "rate3", "label": "Code rate", "dtype": "enum", "options": ["C1_4", "C1_3", "C2_5", "C1_2", "C3_5", "C2_3", "C3_4", "C4_5", "C5_6", "C8_9", "C9_10", "C2_9_VLSNR", "C13_45", "C9_20", "C90_180", "C96_180", "C11_20", "C100_180", "C104_180", "C26_45", "C18_30", "C28_45", "C23_36", "C116_180", "C20_30", "C124_180", "C25_36", "C128_180", "C13_18", "C132_180", "C22_30", "C135_180", "C140_180", "C7_9", "C154_180"], "option_labels": ["1/4", "1/3", "2/5", "1/2", "3/5", "2/3", "3/4", "4/5", "5/6", "8/9", "9/10", "2/9 VL-SNR", "13/45", "9/20", "90/180", "96/180", "11/20", "100/180", "104/180", "26/45", "18/30", "28/45", "23/36", "116/180", "20/30", "124/180", "25/36", "128/180", "13/18", "132/180", "22/30", "135/180", "140/180", "7/9", "154/180"], "option_attributes": {"val": ["dtv.C1_4", "dtv.C1_3", "dtv.C2_5", "dtv.C1_2", "dtv.C3_5", "dtv.C2_3", "dtv.C3_4", "dtv.C4_5", "dtv.C5_6", "dtv.C8_9", "dtv.C9_10", "dtv.C2_9_VLSNR", "dtv.C13_45", "dtv.C9_20", "dtv.C90_180", "dtv.C96_180", "dtv.C11_20", "dtv.C100_180", "dtv.C104_180", "dtv.C26_45", "dtv.C18_30", "dtv.C28_45", "dtv.C23_36", "dtv.C116_180", "dtv.C20_30", "dtv.C124_180", "dtv.C25_36", "dtv.C128_180", "dtv.C13_18", "dtv.C132_180", "dtv.C22_30", "dtv.C135_180", "dtv.C140_180", "dtv.C7_9", "dtv.C154_180"]}, "hide": "${ (framesize2.hide_normal if str(standard) == 'STANDARD_DVBS2' else 'all') }"}, {"id": "rate4", "label": "Code rate", "dtype": "enum", "options": ["C1_5_MEDIUM", "C11_45_MEDIUM", "C1_3_MEDIUM"], "option_labels": ["1/5", "11/45", "1/3"], "option_attributes": {"val": ["dtv.C1_5_MEDIUM", "dtv.C11_45_MEDIUM", "dtv.C1_3_MEDIUM"]}, "hide": "${ (framesize2.hide_medium if str(standard) == 'STANDARD_DVBS2' else 'all') }"}, {"id": "rate5", "label": "Code rate", "dtype": "enum", "options": ["C1_4", "C1_3", "C2_5", "C1_2", "C3_5", "C2_3", "C3_4", "C4_5", "C5_6", "C8_9", "C11_45", "C4_15", "C14_45", "C7_15", "C8_15", "C26_45", "C32_45", "C1_5_VLSNR_SF2", "C11_45_VLSNR_SF2", "C1_5_VLSNR", "C4_15_VLSNR", "C1_3_VLSNR"], "option_labels": ["1/4", "1/3", "2/5", "1/2", "3/5", "2/3", "3/4", "4/5", "5/6", "8/9", "11/45", "4/15", "14/45", "7/15", "8/15", "26/45", "32/45", "1/5 VL-SNR SF2", "11/45 VL-SNR SF2", "1/5 VL-SNR", "4/15 VL-SNR", "1/3 VL-SNR"], "option_attributes": {"val": ["dtv.C1_4", "dtv.C1_3", "dtv.C2_5", "dtv.C1_2", "dtv.C3_5", "dtv.C2_3", "dtv.C3_4", "dtv.C4_5", "dtv.C5_6", "dtv.C8_9", "dtv.C11_45", "dtv.C4_15", "dtv.C14_45", "dtv.C7_15", "dtv.C8_15", "dtv.C26_45", "dtv.C32_45", "dtv.C1_5_VLSNR_SF2", "dtv.C11_45_VLSNR_SF2", "dtv.C1_5_VLSNR", "dtv.C4_15_VLSNR", "dtv.C1_3_VLSNR"]}, "hide": "${ (framesize2.hide_short if str(standard) == 'STANDARD_DVBS2' else 'all') }"}, {"id": "constellation", "label": "Constellation", "dtype": "enum", "options": ["MOD_OTHER", "MOD_128APSK"], "option_labels": ["Other", "128APSK"], "option_attributes": {"val": ["dtv.MOD_OTHER", "dtv.MOD_128APSK"]}, "hide": "${ standard.hide_dvbs2 }"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.dvb_ldpc_bb(\n    ${standard.val},\n    % if str(standard) == 'STANDARD_DVBT2':\n    ${framesize1.val},\n    % else:\n    ${framesize2.val},\n    % endif\n    % if str(standard) == 'STANDARD_DVBT2':\n    % if str(framesize1) == 'FECFRAME_NORMAL':\n    ${rate1.val},\n    % else:\n    ${rate2.val},\n    % endif\n    % else:\n    % if str(framesize2) == 'FECFRAME_NORMAL':\n    ${rate3.val},\n    % elif str(framesize2) == 'FECFRAME_MEDIUM':\n    ${rate4.val},\n    % else:\n    ${rate5.val},\n    % endif\n    % endif\n    ${constellation.val})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_dvbs2_interleaver_bb.block.yml": {"id": "dtv_dvbs2_interleaver_bb", "label": "Interleaver", "parameters": [{"id": "framesize", "label": "FECFRAME size", "dtype": "enum", "options": ["FECFRAME_NORMAL", "FECFRAME_MEDIUM", "FECFRAME_SHORT"], "option_labels": ["Normal", "Medium", "Short"], "option_attributes": {"hide_medium": ["all", "none", "all"], "hide_normal": ["none", "all", "all"], "hide_short": ["all", "all", "none"], "val": ["dtv.FECFRAME_NORMAL", "dtv.FECFRAME_MEDIUM", "dtv.FECFRAME_SHORT"]}}, {"id": "rate1", "label": "Code rate", "dtype": "enum", "options": ["C1_4", "C1_3", "C2_5", "C1_2", "C3_5", "C2_3", "C3_4", "C4_5", "C5_6", "C8_9", "C9_10", "C2_9_VLSNR", "C13_45", "C9_20", "C90_180", "C96_180", "C11_20", "C100_180", "C104_180", "C26_45", "C18_30", "C28_45", "C23_36", "C116_180", "C20_30", "C124_180", "C25_36", "C128_180", "C13_18", "C132_180", "C22_30", "C135_180", "C140_180", "C7_9", "C154_180"], "option_labels": ["1/4", "1/3", "2/5", "1/2", "3/5", "2/3", "3/4", "4/5", "5/6", "8/9", "9/10", "2/9 VL-SNR", "13/45", "9/20", "90/180", "96/180", "11/20", "100/180", "104/180", "26/45", "18/30", "28/45", "23/36", "116/180", "20/30", "124/180", "25/36", "128/180", "13/18", "132/180", "22/30", "135/180", "140/180", "7/9", "154/180"], "option_attributes": {"val": ["dtv.C1_4", "dtv.C1_3", "dtv.C2_5", "dtv.C1_2", "dtv.C3_5", "dtv.C2_3", "dtv.C3_4", "dtv.C4_5", "dtv.C5_6", "dtv.C8_9", "dtv.C9_10", "dtv.C2_9_VLSNR", "dtv.C13_45", "dtv.C9_20", "dtv.C90_180", "dtv.C96_180", "dtv.C11_20", "dtv.C100_180", "dtv.C104_180", "dtv.C26_45", "dtv.C18_30", "dtv.C28_45", "dtv.C23_36", "dtv.C116_180", "dtv.C20_30", "dtv.C124_180", "dtv.C25_36", "dtv.C128_180", "dtv.C13_18", "dtv.C132_180", "dtv.C22_30", "dtv.C135_180", "dtv.C140_180", "dtv.C7_9", "dtv.C154_180"]}, "hide": "${ framesize.hide_normal }"}, {"id": "rate2", "label": "Code rate", "dtype": "enum", "options": ["C1_5_MEDIUM", "C11_45_MEDIUM", "C1_3_MEDIUM"], "option_labels": ["1/5", "11/45", "1/3"], "option_attributes": {"val": ["dtv.C1_5_MEDIUM", "dtv.C11_45_MEDIUM", "dtv.C1_3_MEDIUM"]}, "hide": "${ framesize.hide_medium }"}, {"id": "rate3", "label": "Code rate", "dtype": "enum", "options": ["C1_4", "C1_3", "C2_5", "C1_2", "C3_5", "C2_3", "C3_4", "C4_5", "C5_6", "C8_9", "C11_45", "C4_15", "C14_45", "C7_15", "C8_15", "C26_45", "C32_45", "C1_5_VLSNR_SF2", "C11_45_VLSNR_SF2", "C1_5_VLSNR", "C4_15_VLSNR", "C1_3_VLSNR"], "option_labels": ["1/4", "1/3", "2/5", "1/2", "3/5", "2/3", "3/4", "4/5", "5/6", "8/9", "11/45", "4/15", "14/45", "7/15", "8/15", "26/45", "32/45", "1/5 VL-SNR SF2", "11/45 VL-SNR SF2", "1/5 VL-SNR", "4/15 VL-SNR", "1/3 VL-SNR"], "option_attributes": {"val": ["dtv.C1_4", "dtv.C1_3", "dtv.C2_5", "dtv.C1_2", "dtv.C3_5", "dtv.C2_3", "dtv.C3_4", "dtv.C4_5", "dtv.C5_6", "dtv.C8_9", "dtv.C11_45", "dtv.C4_15", "dtv.C14_45", "dtv.C7_15", "dtv.C8_15", "dtv.C26_45", "dtv.C32_45", "dtv.C1_5_VLSNR_SF2", "dtv.C11_45_VLSNR_SF2", "dtv.C1_5_VLSNR", "dtv.C4_15_VLSNR", "dtv.C1_3_VLSNR"]}, "hide": "${ framesize.hide_short }"}, {"id": "constellation", "label": "Constellation", "dtype": "enum", "options": ["MOD_QPSK", "MOD_8PSK", "MOD_8APSK", "MOD_16APSK", "MOD_8_8APSK", "MOD_32APSK", "MOD_4_12_16APSK", "MOD_4_8_4_16APSK", "MOD_64APSK", "MOD_8_16_20_20APSK", "MOD_4_12_20_28APSK", "MOD_128APSK", "MOD_256APSK", "MOD_BPSK", "MOD_BPSK_SF2"], "option_labels": ["QPSK", "8PSK", "8APSK", "16APSK", "8+8APSK", "32APSK", "4+12+16rbAPSK", "4+8+4+16APSK", "64APSK", "8+16+20+20APSK", "4+12+20+28APSK", "128APSK", "256APSK", "PI/2 BPSK", "PI/2 BPSK-SF2"], "option_attributes": {"val": ["dtv.MOD_QPSK", "dtv.MOD_8PSK", "dtv.MOD_8APSK", "dtv.MOD_16APSK", "dtv.MOD_8_8APSK", "dtv.MOD_32APSK", "dtv.MOD_4_12_16APSK", "dtv.MOD_4_8_4_16APSK", "dtv.MOD_64APSK", "dtv.MOD_8_16_20_20APSK", "dtv.MOD_4_12_20_28APSK", "dtv.MOD_128APSK", "dtv.MOD_256APSK", "dtv.MOD_BPSK", "dtv.MOD_BPSK_SF2"]}}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.dvbs2_interleaver_bb(\n    ${framesize.val},\n    % if str(framesize) == 'FECFRAME_NORMAL':\n    ${rate1.val},\n    % elif str(framesize) == 'FECFRAME_MEDIUM':\n    ${rate2.val},\n    % else:\n    ${rate3.val},\n    % endif\n    ${constellation.val})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_dvbs2_modulator_bc.block.yml": {"id": "dtv_dvbs2_modulator_bc", "label": "DVB-S2X Modulator", "parameters": [{"id": "framesize", "label": "FECFRAME size", "dtype": "enum", "options": ["FECFRAME_NORMAL", "FECFRAME_MEDIUM", "FECFRAME_SHORT"], "option_labels": ["Normal", "Medium", "Short"], "option_attributes": {"hide_medium": ["all", "none", "all"], "hide_normal": ["none", "all", "all"], "hide_short": ["all", "all", "none"], "val": ["dtv.FECFRAME_NORMAL", "dtv.FECFRAME_MEDIUM", "dtv.FECFRAME_SHORT"]}, "hide": "${ constellation.hide_dvb }"}, {"id": "rate1", "label": "Code rate", "dtype": "enum", "options": ["C1_4", "C1_3", "C2_5", "C1_2", "C3_5", "C2_3", "C3_4", "C4_5", "C5_6", "C8_9", "C9_10", "C2_9_VLSNR", "C13_45", "C9_20", "C90_180", "C96_180", "C11_20", "C100_180", "C104_180", "C26_45", "C18_30", "C28_45", "C23_36", "C116_180", "C20_30", "C124_180", "C25_36", "C128_180", "C13_18", "C132_180", "C22_30", "C135_180", "C140_180", "C7_9", "C154_180"], "option_labels": ["1/4", "1/3", "2/5", "1/2", "3/5", "2/3", "3/4", "4/5", "5/6", "8/9", "9/10", "2/9 VL-SNR", "13/45", "9/20", "90/180", "96/180", "11/20", "100/180", "104/180", "26/45", "18/30", "28/45", "23/36", "116/180", "20/30", "124/180", "25/36", "128/180", "13/18", "132/180", "22/30", "135/180", "140/180", "7/9", "154/180"], "option_attributes": {"val": ["dtv.C1_4", "dtv.C1_3", "dtv.C2_5", "dtv.C1_2", "dtv.C3_5", "dtv.C2_3", "dtv.C3_4", "dtv.C4_5", "dtv.C5_6", "dtv.C8_9", "dtv.C9_10", "dtv.C2_9_VLSNR", "dtv.C13_45", "dtv.C9_20", "dtv.C90_180", "dtv.C96_180", "dtv.C11_20", "dtv.C100_180", "dtv.C104_180", "dtv.C26_45", "dtv.C18_30", "dtv.C28_45", "dtv.C23_36", "dtv.C116_180", "dtv.C20_30", "dtv.C124_180", "dtv.C25_36", "dtv.C128_180", "dtv.C13_18", "dtv.C132_180", "dtv.C22_30", "dtv.C135_180", "dtv.C140_180", "dtv.C7_9", "dtv.C154_180"]}, "hide": "${ (constellation.hide_dvb if str(constellation) == 'MOD_8VSB' or str(constellation) == 'MOD_64QAM' or str(constellation) == 'MOD_256QAM' else framesize.hide_normal) }"}, {"id": "rate2", "label": "Code rate", "dtype": "enum", "options": ["C1_5_MEDIUM", "C11_45_MEDIUM", "C1_3_MEDIUM"], "option_labels": ["1/5", "11/45", "1/3"], "option_attributes": {"val": ["dtv.C1_5_MEDIUM", "dtv.C11_45_MEDIUM", "dtv.C1_3_MEDIUM"]}, "hide": "${ (constellation.hide_dvb if str(constellation) == 'MOD_8VSB' or str(constellation) == 'MOD_64QAM' or str(constellation) == 'MOD_256QAM' else framesize.hide_medium) }"}, {"id": "rate3", "label": "Code rate", "dtype": "enum", "options": ["C1_4", "C1_3", "C2_5", "C1_2", "C3_5", "C2_3", "C3_4", "C4_5", "C5_6", "C8_9", "C11_45", "C4_15", "C14_45", "C7_15", "C8_15", "C26_45", "C32_45", "C1_5_VLSNR_SF2", "C11_45_VLSNR_SF2", "C1_5_VLSNR", "C4_15_VLSNR", "C1_3_VLSNR"], "option_labels": ["1/4", "1/3", "2/5", "1/2", "3/5", "2/3", "3/4", "4/5", "5/6", "8/9", "11/45", "4/15", "14/45", "7/15", "8/15", "26/45", "32/45", "1/5 VL-SNR SF2", "11/45 VL-SNR SF2", "1/5 VL-SNR", "4/15 VL-SNR", "1/3 VL-SNR"], "option_attributes": {"val": ["dtv.C1_4", "dtv.C1_3", "dtv.C2_5", "dtv.C1_2", "dtv.C3_5", "dtv.C2_3", "dtv.C3_4", "dtv.C4_5", "dtv.C5_6", "dtv.C8_9", "dtv.C11_45", "dtv.C4_15", "dtv.C14_45", "dtv.C7_15", "dtv.C8_15", "dtv.C26_45", "dtv.C32_45", "dtv.C1_5_VLSNR_SF2", "dtv.C11_45_VLSNR_SF2", "dtv.C1_5_VLSNR", "dtv.C4_15_VLSNR", "dtv.C1_3_VLSNR"]}, "hide": "${ (constellation.hide_dvb if str(constellation) == 'MOD_8VSB' or str(constellation) == 'MOD_64QAM' or str(constellation) == 'MOD_256QAM' else framesize.hide_short) }"}, {"id": "constellation", "label": "Constellation", "dtype": "enum", "options": ["MOD_QPSK", "MOD_8PSK", "MOD_8APSK", "MOD_16APSK", "MOD_8_8APSK", "MOD_32APSK", "MOD_4_12_16APSK", "MOD_4_8_4_16APSK", "MOD_64APSK", "MOD_8_16_20_20APSK", "MOD_4_12_20_28APSK", "MOD_128APSK", "MOD_256APSK", "MOD_64QAM", "MOD_256QAM", "MOD_BPSK", "MOD_BPSK_SF2", "MOD_8VSB"], "option_labels": ["QPSK", "8PSK", "8APSK", "16APSK", "8+8APSK", "32APSK", "4+12+16rbAPSK", "4+8+4+16APSK", "64APSK", "8+16+20+20APSK", "4+12+20+28APSK", "128APSK", "256APSK", "64QAM (ITU-T J.83B)", "256QAM (ITU-T J.83B)", "PI/2 BPSK", "PI/2 BPSK-SF2", "8VSB (ATSC)"], "option_attributes": {"hide_dvb": ["none", "none", "none", "none", "none", "none", "none", "none", "none", "none", "none", "none", "none", "all", "all", "none", "none", "all"], "val": ["dtv.MOD_QPSK", "dtv.MOD_8PSK", "dtv.MOD_8APSK", "dtv.MOD_16APSK", "dtv.MOD_8_8APSK", "dtv.MOD_32APSK", "dtv.MOD_4_12_16APSK", "dtv.MOD_4_8_4_16APSK", "dtv.MOD_64APSK", "dtv.MOD_8_16_20_20APSK", "dtv.MOD_4_12_20_28APSK", "dtv.MOD_128APSK", "dtv.MOD_256APSK", "dtv.MOD_64QAM", "dtv.MOD_256QAM", "dtv.MOD_BPSK", "dtv.MOD_BPSK_SF2", "dtv.MOD_8VSB"]}}, {"id": "interpolation", "label": "2X Interpolation", "dtype": "enum", "options": ["INTERPOLATION_OFF", "INTERPOLATION_ON"], "option_labels": ["Off", "On"], "option_attributes": {"val": ["dtv.INTERPOLATION_OFF", "dtv.INTERPOLATION_ON"]}}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.dvbs2_modulator_bc(\n    ${framesize.val},\n    % if str(framesize) == 'FECFRAME_NORMAL':\n    ${rate1.val},\n    % elif str(framesize) == 'FECFRAME_MEDIUM':\n    ${rate2.val},\n    % else:\n    ${rate3.val},\n    % endif\n    ${constellation.val},\n    ${interpolation.val})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_dvbs2_physical_cc.block.yml": {"id": "dtv_dvbs2_physical_cc", "label": "Physical Layer Framer", "parameters": [{"id": "framesize", "label": "FECFRAME size", "dtype": "enum", "options": ["FECFRAME_NORMAL", "FECFRAME_MEDIUM", "FECFRAME_SHORT"], "option_labels": ["Normal", "Medium", "Short"], "option_attributes": {"hide_medium": ["all", "none", "all"], "hide_normal": ["none", "all", "all"], "hide_short": ["all", "all", "none"], "val": ["dtv.FECFRAME_NORMAL", "dtv.FECFRAME_MEDIUM", "dtv.FECFRAME_SHORT"]}}, {"id": "rate1", "label": "Code rate", "dtype": "enum", "options": ["C1_4", "C1_3", "C2_5", "C1_2", "C3_5", "C2_3", "C3_4", "C4_5", "C5_6", "C8_9", "C9_10", "C2_9_VLSNR", "C13_45", "C9_20", "C90_180", "C96_180", "C11_20", "C100_180", "C104_180", "C26_45", "C18_30", "C28_45", "C23_36", "C116_180", "C20_30", "C124_180", "C25_36", "C128_180", "C13_18", "C132_180", "C22_30", "C135_180", "C140_180", "C7_9", "C154_180"], "option_labels": ["1/4", "1/3", "2/5", "1/2", "3/5", "2/3", "3/4", "4/5", "5/6", "8/9", "9/10", "2/9 VL-SNR", "13/45", "9/20", "90/180", "96/180", "11/20", "100/180", "104/180", "26/45", "18/30", "28/45", "23/36", "116/180", "20/30", "124/180", "25/36", "128/180", "13/18", "132/180", "22/30", "135/180", "140/180", "7/9", "154/180"], "option_attributes": {"val": ["dtv.C1_4", "dtv.C1_3", "dtv.C2_5", "dtv.C1_2", "dtv.C3_5", "dtv.C2_3", "dtv.C3_4", "dtv.C4_5", "dtv.C5_6", "dtv.C8_9", "dtv.C9_10", "dtv.C2_9_VLSNR", "dtv.C13_45", "dtv.C9_20", "dtv.C90_180", "dtv.C96_180", "dtv.C11_20", "dtv.C100_180", "dtv.C104_180", "dtv.C26_45", "dtv.C18_30", "dtv.C28_45", "dtv.C23_36", "dtv.C116_180", "dtv.C20_30", "dtv.C124_180", "dtv.C25_36", "dtv.C128_180", "dtv.C13_18", "dtv.C132_180", "dtv.C22_30", "dtv.C135_180", "dtv.C140_180", "dtv.C7_9", "dtv.C154_180"]}, "hide": "${ framesize.hide_normal }"}, {"id": "rate2", "label": "Code rate", "dtype": "enum", "options": ["C1_5_MEDIUM", "C11_45_MEDIUM", "C1_3_MEDIUM"], "option_labels": ["1/5", "11/45", "1/3"], "option_attributes": {"val": ["dtv.C1_5_MEDIUM", "dtv.C11_45_MEDIUM", "dtv.C1_3_MEDIUM"]}, "hide": "${ framesize.hide_medium }"}, {"id": "rate3", "label": "Code rate", "dtype": "enum", "options": ["C1_4", "C1_3", "C2_5", "C1_2", "C3_5", "C2_3", "C3_4", "C4_5", "C5_6", "C8_9", "C11_45", "C4_15", "C14_45", "C7_15", "C8_15", "C26_45", "C32_45", "C1_5_VLSNR_SF2", "C11_45_VLSNR_SF2", "C1_5_VLSNR", "C4_15_VLSNR", "C1_3_VLSNR"], "option_labels": ["1/4", "1/3", "2/5", "1/2", "3/5", "2/3", "3/4", "4/5", "5/6", "8/9", "11/45", "4/15", "14/45", "7/15", "8/15", "26/45", "32/45", "1/5 VL-SNR SF2", "11/45 VL-SNR SF2", "1/5 VL-SNR", "4/15 VL-SNR", "1/3 VL-SNR"], "option_attributes": {"val": ["dtv.C1_4", "dtv.C1_3", "dtv.C2_5", "dtv.C1_2", "dtv.C3_5", "dtv.C2_3", "dtv.C3_4", "dtv.C4_5", "dtv.C5_6", "dtv.C8_9", "dtv.C11_45", "dtv.C4_15", "dtv.C14_45", "dtv.C7_15", "dtv.C8_15", "dtv.C26_45", "dtv.C32_45", "dtv.C1_5_VLSNR_SF2", "dtv.C11_45_VLSNR_SF2", "dtv.C1_5_VLSNR", "dtv.C4_15_VLSNR", "dtv.C1_3_VLSNR"]}, "hide": "${ framesize.hide_short }"}, {"id": "constellation", "label": "Constellation", "dtype": "enum", "options": ["MOD_QPSK", "MOD_8PSK", "MOD_8APSK", "MOD_16APSK", "MOD_8_8APSK", "MOD_32APSK", "MOD_4_12_16APSK", "MOD_4_8_4_16APSK", "MOD_64APSK", "MOD_8_16_20_20APSK", "MOD_4_12_20_28APSK", "MOD_128APSK", "MOD_256APSK", "MOD_BPSK", "MOD_BPSK_SF2"], "option_labels": ["QPSK", "8PSK", "8APSK", "16APSK", "8+8APSK", "32APSK", "4+12+16rbAPSK", "4+8+4+16APSK", "64APSK", "8+16+20+20APSK", "4+12+20+28APSK", "128APSK", "256APSK", "PI/2 BPSK", "PI/2 BPSK-SF2"], "option_attributes": {"val": ["dtv.MOD_QPSK", "dtv.MOD_8PSK", "dtv.MOD_8APSK", "dtv.MOD_16APSK", "dtv.MOD_8_8APSK", "dtv.MOD_32APSK", "dtv.MOD_4_12_16APSK", "dtv.MOD_4_8_4_16APSK", "dtv.MOD_64APSK", "dtv.MOD_8_16_20_20APSK", "dtv.MOD_4_12_20_28APSK", "dtv.MOD_128APSK", "dtv.MOD_256APSK", "dtv.MOD_BPSK", "dtv.MOD_BPSK_SF2"]}}, {"id": "pilots", "label": "Pilots", "dtype": "enum", "options": ["PILOTS_OFF", "PILOTS_ON"], "option_labels": ["Off", "On"], "option_attributes": {"val": ["dtv.PILOTS_OFF", "dtv.PILOTS_ON"]}}, {"id": "goldcode", "label": "Gold Code", "dtype": "int", "default": "0"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.dvbs2_physical_cc(\n    ${framesize.val},\n    % if str(framesize) == 'FECFRAME_NORMAL':\n    ${rate1.val},\n    % elif str(framesize) == 'FECFRAME_MEDIUM':\n    ${rate2.val},\n    % else:\n    ${rate3.val},\n    % endif\n    ${constellation.val},\n    ${pilots.val},\n    ${goldcode})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_dvbt2_cellinterleaver_cc.block.yml": {"id": "dtv_dvbt2_cellinterleaver_cc", "label": "Cell/Time Interleaver", "parameters": [{"id": "framesize", "label": "FECFRAME size", "dtype": "enum", "options": ["FECFRAME_NORMAL", "FECFRAME_SHORT"], "option_labels": ["Normal", "Short"], "option_attributes": {"val": ["dtv.FECFRAME_NORMAL", "dtv.FECFRAME_SHORT"]}}, {"id": "constellation", "label": "Constellation", "dtype": "enum", "options": ["MOD_QPSK", "MOD_16QAM", "MOD_64QAM", "MOD_256QAM"], "option_labels": ["QPSK", "16QAM", "64QAM", "256QAM"], "option_attributes": {"val": ["dtv.MOD_QPSK", "dtv.MOD_16QAM", "dtv.MOD_64QAM", "dtv.MOD_256QAM"]}}, {"id": "fecblocks", "label": "FEC blocks per frame", "dtype": "int", "default": "168"}, {"id": "tiblocks", "label": "TI blocks per frame", "dtype": "int", "default": "3"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.dvbt2_cellinterleaver_cc(${framesize.val}, ${constellation.val}, ${fecblocks}, ${tiblocks})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_dvbt2_framemapper_cc.block.yml": {"id": "dtv_dvbt2_framemapper_cc", "label": "Frame Mapper", "parameters": [{"id": "framesize", "label": "FECFRAME size", "dtype": "enum", "options": ["FECFRAME_NORMAL", "FECFRAME_SHORT"], "option_labels": ["Normal", "Short"], "option_attributes": {"val": ["dtv.FECFRAME_NORMAL", "dtv.FECFRAME_SHORT"]}}, {"id": "rate", "label": "Code rate", "dtype": "enum", "options": ["C1_3", "C2_5", "C1_2", "C3_5", "C2_3", "C3_4", "C4_5", "C5_6"], "option_labels": ["1/3", "2/5", "1/2", "3/5", "2/3", "3/4", "4/5", "5/6"], "option_attributes": {"val": ["dtv.C1_3", "dtv.C2_5", "dtv.C1_2", "dtv.C3_5", "dtv.C2_3", "dtv.C3_4", "dtv.C4_5", "dtv.C5_6"]}}, {"id": "constellation", "label": "Constellation", "dtype": "enum", "options": ["MOD_QPSK", "MOD_16QAM", "MOD_64QAM", "MOD_256QAM"], "option_labels": ["QPSK", "16QAM", "64QAM", "256QAM"], "option_attributes": {"val": ["dtv.MOD_QPSK", "dtv.MOD_16QAM", "dtv.MOD_64QAM", "dtv.MOD_256QAM"]}}, {"id": "rotation", "label": "Constellation rotation", "dtype": "enum", "options": ["ROTATION_OFF", "ROTATION_ON"], "option_labels": ["Off", "On"], "option_attributes": {"val": ["dtv.ROTATION_OFF", "dtv.ROTATION_ON"]}}, {"id": "fecblocks", "label": "FEC blocks per frame", "dtype": "int", "default": "168"}, {"id": "tiblocks", "label": "TI blocks per frame", "dtype": "int", "default": "3"}, {"id": "carriermode", "label": "Extended Carrier Mode", "dtype": "enum", "options": ["CARRIERS_NORMAL", "CARRIERS_EXTENDED"], "option_labels": ["Normal", "Extended"], "option_attributes": {"val": ["dtv.CARRIERS_NORMAL", "dtv.CARRIERS_EXTENDED"]}}, {"id": "fftsize1", "label": "FFT Size", "dtype": "enum", "options": ["FFTSIZE_1K", "FFTSIZE_2K", "FFTSIZE_4K", "FFTSIZE_8K", "FFTSIZE_8K_T2GI", "FFTSIZE_16K", "FFTSIZE_32K", "FFTSIZE_32K_T2GI"], "option_labels": ["1K", "2K", "4K", "8K", "8K DVB-T2 GI", "16K", "32K", "32K DVB-T2 GI"], "option_attributes": {"val": ["dtv.FFTSIZE_1K", "dtv.FFTSIZE_2K", "dtv.FFTSIZE_4K", "dtv.FFTSIZE_8K", "dtv.FFTSIZE_8K_T2GI", "dtv.FFTSIZE_16K", "dtv.FFTSIZE_32K", "dtv.FFTSIZE_32K_T2GI"]}, "hide": "${ (preamble1.hide_base if str(version) == 'VERSION_111' else preamble2.hide_base) }"}, {"id": "fftsize2", "label": "FFT Size", "dtype": "enum", "options": ["FFTSIZE_2K", "FFTSIZE_4K", "FFTSIZE_8K", "FFTSIZE_8K_T2GI", "FFTSIZE_16K", "FFTSIZE_16K_T2GI"], "option_labels": ["2K", "4K", "8K", "8K DVB-T2 GI", "16K", "16K DVB-T2 GI"], "option_attributes": {"val": ["dtv.FFTSIZE_2K", "dtv.FFTSIZE_4K", "dtv.FFTSIZE_8K", "dtv.FFTSIZE_8K_T2GI", "dtv.FFTSIZE_16K", "dtv.FFTSIZE_16K_T2GI"]}, "hide": "${ (preamble1.hide_lite if str(version) == 'VERSION_111' else preamble2.hide_lite) }"}, {"id": "guardinterval", "label": "Guard Interval", "dtype": "enum", "options": ["GI_1_32", "GI_1_16", "GI_1_8", "GI_1_4", "GI_1_128", "GI_19_128", "GI_19_256"], "option_labels": ["1/32", "1/16", "1/8", "1/4", "1/128", "19/128", "19/256"], "option_attributes": {"val": ["dtv.GI_1_32", "dtv.GI_1_16", "dtv.GI_1_8", "dtv.GI_1_4", "dtv.GI_1_128", "dtv.GI_19_128", "dtv.GI_19_256"]}}, {"id": "l1constellation", "label": "L1 Constellation", "dtype": "enum", "options": ["L1_MOD_BPSK", "L1_MOD_QPSK", "L1_MOD_16QAM", "L1_MOD_64QAM"], "option_labels": ["BPSK", "QPSK", "16QAM", "64QAM"], "option_attributes": {"val": ["dtv.L1_MOD_BPSK", "dtv.L1_MOD_QPSK", "dtv.L1_MOD_16QAM", "dtv.L1_MOD_64QAM"]}}, {"id": "pilotpattern", "label": "Pilot Pattern", "dtype": "enum", "options": ["PILOT_PP1", "PILOT_PP2", "PILOT_PP3", "PILOT_PP4", "PILOT_PP5", "PILOT_PP6", "PILOT_PP7", "PILOT_PP8"], "option_labels": ["PP1", "PP2", "PP3", "PP4", "PP5", "PP6", "PP7", "PP8"], "option_attributes": {"val": ["dtv.PILOT_PP1", "dtv.PILOT_PP2", "dtv.PILOT_PP3", "dtv.PILOT_PP4", "dtv.PILOT_PP5", "dtv.PILOT_PP6", "dtv.PILOT_PP7", "dtv.PILOT_PP8"]}}, {"id": "t2frames", "label": "T2 Frames per Super-frame", "dtype": "int", "default": "2"}, {"id": "numdatasyms", "label": "Number of Data Symbols", "dtype": "int", "default": "100"}, {"id": "paprmode1", "label": "PAPR Mode", "dtype": "enum", "options": ["PAPR_OFF", "PAPR_ACE", "PAPR_TR", "PAPR_BOTH"], "option_labels": ["Off", "Active Constellation Extension", "Tone Reservation", "Both ACE and TR"], "option_attributes": {"val": ["dtv.PAPR_OFF", "dtv.PAPR_ACE", "dtv.PAPR_TR", "dtv.PAPR_BOTH"]}, "hide": "${ version.hide_111 }"}, {"id": "paprmode2", "label": "PAPR Mode", "dtype": "enum", "options": ["PAPR_OFF", "PAPR_ACE", "PAPR_TR", "PAPR_BOTH"], "option_labels": ["P2 Only", "Active Constellation Extension", "Tone Reservation", "Both ACE and TR"], "option_attributes": {"val": ["dtv.PAPR_OFF", "dtv.PAPR_ACE", "dtv.PAPR_TR", "dtv.PAPR_BOTH"]}, "hide": "${ version.hide_131 }"}, {"id": "version", "label": "Specification Version", "dtype": "enum", "options": ["VERSION_111", "VERSION_131"], "option_labels": ["1.1.1", "1.3.1"], "option_attributes": {"hide_111": ["none", "all"], "hide_131": ["all", "none"], "val": ["dtv.VERSION_111", "dtv.VERSION_131"]}}, {"id": "preamble1", "label": "Preamble", "dtype": "enum", "options": ["PREAMBLE_T2_SISO", "PREAMBLE_T2_MISO"], "option_labels": ["T2 SISO", "T2 MISO"], "option_attributes": {"hide_base": ["none", "none"], "hide_lite": ["all", "all"], "val": ["dtv.PREAMBLE_T2_SISO", "dtv.PREAMBLE_T2_MISO"]}, "hide": "${ version.hide_111 }"}, {"id": "preamble2", "label": "Preamble", "dtype": "enum", "options": ["PREAMBLE_T2_SISO", "PREAMBLE_T2_MISO", "PREAMBLE_T2_LITE_SISO", "PREAMBLE_T2_LITE_MISO"], "option_labels": ["T2 SISO", "T2 MISO", "T2-Lite SISO", "T2-Lite MISO"], "option_attributes": {"hide_base": ["none", "none", "all", "all"], "hide_lite": ["all", "all", "none", "none"], "val": ["dtv.PREAMBLE_T2_SISO", "dtv.PREAMBLE_T2_MISO", "dtv.PREAMBLE_T2_LITE_SISO", "dtv.PREAMBLE_T2_LITE_MISO"]}, "hide": "${ version.hide_131 }"}, {"id": "inputmode", "label": "Baseband Framing Mode", "dtype": "enum", "options": ["INPUTMODE_NORMAL", "INPUTMODE_HIEFF"], "option_labels": ["Normal", "High Efficiency"], "option_attributes": {"val": ["dtv.INPUTMODE_NORMAL", "dtv.INPUTMODE_HIEFF"]}, "hide": "${ version.hide_131 }"}, {"id": "reservedbiasbits", "label": "Reserved Bits Bias Balancing", "dtype": "enum", "options": ["RESERVED_OFF", "RESERVED_ON"], "option_labels": ["Off", "On"], "option_attributes": {"val": ["dtv.RESERVED_OFF", "dtv.RESERVED_ON"]}, "hide": "${ version.hide_131 }"}, {"id": "l1scrambled", "label": "L1-post Scrambling", "dtype": "enum", "options": ["L1_SCRAMBLED_OFF", "L1_SCRAMBLED_ON"], "option_labels": ["Off", "On"], "option_attributes": {"val": ["dtv.L1_SCRAMBLED_OFF", "dtv.L1_SCRAMBLED_ON"]}, "hide": "${ version.hide_131 }"}, {"id": "inband", "label": "In-band Signalling", "dtype": "enum", "options": ["INBAND_OFF", "INBAND_ON"], "option_labels": ["Off", "Type B"], "option_attributes": {"val": ["dtv.INBAND_OFF", "dtv.INBAND_ON"]}, "hide": "${ version.hide_131 }"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.dvbt2_framemapper_cc(\n    ${framesize.val},\n    ${rate.val},\n    ${constellation.val},\n    ${rotation.val},\n    ${fecblocks},\n    ${tiblocks},\n    ${carriermode.val},\n    % if str(version) == 'VERSION_111':\n    ${fftsize1.val},\n    % else:\n    % if str(preamble2) == 'PREAMBLE_T2_SISO' or str(preamble2) == 'PREAMBLE_T2_MISO':\n    ${fftsize1.val},\n    % else:\n    ${fftsize2.val},\n    % endif\n    % endif\n    ${guardinterval.val},\n    ${l1constellation.val},\n    ${pilotpattern.val},\n    ${t2frames},\n    ${numdatasyms},\n    % if str(version) == 'VERSION_111':\n    ${paprmode1.val},\n    % else:\n    ${paprmode2.val},\n    % endif\n    ${version.val},\n    % if str(version) == 'VERSION_111':\n    ${preamble1.val},\n    % else:\n    ${preamble2.val},\n    % endif\n    ${inputmode.val},\n    ${reservedbiasbits.val},\n    ${l1scrambled.val},\n    ${inband.val})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_dvbt2_freqinterleaver_cc.block.yml": {"id": "dtv_dvbt2_freqinterleaver_cc", "label": "Frequency Interleaver", "parameters": [{"id": "carriermode", "label": "Extended Carrier Mode", "dtype": "enum", "options": ["CARRIERS_NORMAL", "CARRIERS_EXTENDED"], "option_labels": ["Normal", "Extended"], "option_attributes": {"val": ["dtv.CARRIERS_NORMAL", "dtv.CARRIERS_EXTENDED"]}}, {"id": "fftsize", "label": "FFT Size", "dtype": "enum", "options": ["FFTSIZE_1K", "FFTSIZE_2K", "FFTSIZE_4K", "FFTSIZE_8K", "FFTSIZE_8K_T2GI", "FFTSIZE_16K", "FFTSIZE_16K_T2GI", "FFTSIZE_32K", "FFTSIZE_32K_T2GI"], "option_labels": ["1K", "2K", "4K", "8K", "8K DVB-T2 GI", "16K", "16K DVB-T2 GI", "32K", "32K DVB-T2 GI"], "option_attributes": {"val": ["dtv.FFTSIZE_1K", "dtv.FFTSIZE_2K", "dtv.FFTSIZE_4K", "dtv.FFTSIZE_8K", "dtv.FFTSIZE_8K_T2GI", "dtv.FFTSIZE_16K", "dtv.FFTSIZE_16K_T2GI", "dtv.FFTSIZE_32K", "dtv.FFTSIZE_32K_T2GI"]}}, {"id": "pilotpattern", "label": "Pilot Pattern", "dtype": "enum", "options": ["PILOT_PP1", "PILOT_PP2", "PILOT_PP3", "PILOT_PP4", "PILOT_PP5", "PILOT_PP6", "PILOT_PP7", "PILOT_PP8"], "option_labels": ["PP1", "PP2", "PP3", "PP4", "PP5", "PP6", "PP7", "PP8"], "option_attributes": {"val": ["dtv.PILOT_PP1", "dtv.PILOT_PP2", "dtv.PILOT_PP3", "dtv.PILOT_PP4", "dtv.PILOT_PP5", "dtv.PILOT_PP6", "dtv.PILOT_PP7", "dtv.PILOT_PP8"]}}, {"id": "guardinterval", "label": "Guard Interval", "dtype": "enum", "options": ["GI_1_32", "GI_1_16", "GI_1_8", "GI_1_4", "GI_1_128", "GI_19_128", "GI_19_256"], "option_labels": ["1/32", "1/16", "1/8", "1/4", "1/128", "19/128", "19/256"], "option_attributes": {"val": ["dtv.GI_1_32", "dtv.GI_1_16", "dtv.GI_1_8", "dtv.GI_1_4", "dtv.GI_1_128", "dtv.GI_19_128", "dtv.GI_19_256"]}}, {"id": "numdatasyms", "label": "Number of Data Symbols", "dtype": "int", "default": "100"}, {"id": "paprmode1", "label": "PAPR Mode", "dtype": "enum", "options": ["PAPR_OFF", "PAPR_ACE", "PAPR_TR", "PAPR_BOTH"], "option_labels": ["Off", "Active Constellation Extension", "Tone Reservation", "Both ACE and TR"], "option_attributes": {"val": ["dtv.PAPR_OFF", "dtv.PAPR_ACE", "dtv.PAPR_TR", "dtv.PAPR_BOTH"]}, "hide": "${ version.hide_111 }"}, {"id": "paprmode2", "label": "PAPR Mode", "dtype": "enum", "options": ["PAPR_OFF", "PAPR_ACE", "PAPR_TR", "PAPR_BOTH"], "option_labels": ["P2 Only", "Active Constellation Extension", "Tone Reservation", "Both ACE and TR"], "option_attributes": {"val": ["dtv.PAPR_OFF", "dtv.PAPR_ACE", "dtv.PAPR_TR", "dtv.PAPR_BOTH"]}, "hide": "${ version.hide_131 }"}, {"id": "version", "label": "Specification Version", "dtype": "enum", "options": ["VERSION_111", "VERSION_131"], "option_labels": ["1.1.1", "1.3.1"], "option_attributes": {"hide_111": ["none", "all"], "hide_131": ["all", "none"], "val": ["dtv.VERSION_111", "dtv.VERSION_131"]}}, {"id": "preamble1", "label": "Preamble", "dtype": "enum", "options": ["PREAMBLE_T2_SISO", "PREAMBLE_T2_MISO"], "option_labels": ["T2 SISO", "T2 MISO"], "option_attributes": {"val": ["dtv.PREAMBLE_T2_SISO", "dtv.PREAMBLE_T2_MISO"]}, "hide": "${ version.hide_111 }"}, {"id": "preamble2", "label": "Preamble", "dtype": "enum", "options": ["PREAMBLE_T2_SISO", "PREAMBLE_T2_MISO", "PREAMBLE_T2_LITE_SISO", "PREAMBLE_T2_LITE_MISO"], "option_labels": ["T2 SISO", "T2 MISO", "T2-Lite SISO", "T2-Lite MISO"], "option_attributes": {"val": ["dtv.PREAMBLE_T2_SISO", "dtv.PREAMBLE_T2_MISO", "dtv.PREAMBLE_T2_LITE_SISO", "dtv.PREAMBLE_T2_LITE_MISO"]}, "hide": "${ version.hide_131 }"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.dvbt2_freqinterleaver_cc(\n    ${carriermode.val},\n    ${fftsize.val},\n    ${pilotpattern.val},\n    ${guardinterval.val},\n    ${numdatasyms},\n    % if str(version) == 'VERSION_111':\n    ${paprmode1.val},\n    % else:\n    ${paprmode2.val},\n    % endif\n    ${version.val},\n    % if str(version) == 'VERSION_111':\n    ${preamble1.val}\n    % else:\n    ${preamble2.val}\n    % endif\n    )"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_dvbt2_interleaver_bb.block.yml": {"id": "dtv_dvbt2_interleaver_bb", "label": "Bit Interleaver", "parameters": [{"id": "framesize", "label": "FECFRAME size", "dtype": "enum", "options": ["FECFRAME_NORMAL", "FECFRAME_SHORT"], "option_labels": ["Normal", "Short"], "option_attributes": {"val": ["dtv.FECFRAME_NORMAL", "dtv.FECFRAME_SHORT"]}}, {"id": "rate", "label": "Code rate", "dtype": "enum", "options": ["C1_3", "C2_5", "C1_2", "C3_5", "C2_3", "C3_4", "C4_5", "C5_6"], "option_labels": ["1/3", "2/5", "1/2", "3/5", "2/3", "3/4", "4/5", "5/6"], "option_attributes": {"val": ["dtv.C1_3", "dtv.C2_5", "dtv.C1_2", "dtv.C3_5", "dtv.C2_3", "dtv.C3_4", "dtv.C4_5", "dtv.C5_6"]}}, {"id": "constellation", "label": "Constellation", "dtype": "enum", "options": ["MOD_QPSK", "MOD_16QAM", "MOD_64QAM", "MOD_256QAM"], "option_labels": ["QPSK", "16QAM", "64QAM", "256QAM"], "option_attributes": {"val": ["dtv.MOD_QPSK", "dtv.MOD_16QAM", "dtv.MOD_64QAM", "dtv.MOD_256QAM"]}}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.dvbt2_interleaver_bb(${framesize.val}, ${rate.val}, ${constellation.val})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_dvbt2_miso_cc.block.yml": {"id": "dtv_dvbt2_miso_cc", "label": "MISO Processing", "parameters": [{"id": "carriermode", "label": "Extended Carrier Mode", "dtype": "enum", "options": ["CARRIERS_NORMAL", "CARRIERS_EXTENDED"], "option_labels": ["Normal", "Extended"], "option_attributes": {"val": ["dtv.CARRIERS_NORMAL", "dtv.CARRIERS_EXTENDED"]}}, {"id": "fftsize", "label": "FFT Size", "dtype": "enum", "options": ["FFTSIZE_1K", "FFTSIZE_2K", "FFTSIZE_4K", "FFTSIZE_8K", "FFTSIZE_8K_T2GI", "FFTSIZE_16K", "FFTSIZE_16K_T2GI", "FFTSIZE_32K", "FFTSIZE_32K_T2GI"], "option_labels": ["1K", "2K", "4K", "8K", "8K DVB-T2 GI", "16K", "16K DVB-T2 GI", "32K", "32K DVB-T2 GI"], "option_attributes": {"val": ["dtv.FFTSIZE_1K", "dtv.FFTSIZE_2K", "dtv.FFTSIZE_4K", "dtv.FFTSIZE_8K", "dtv.FFTSIZE_8K_T2GI", "dtv.FFTSIZE_16K", "dtv.FFTSIZE_16K_T2GI", "dtv.FFTSIZE_32K", "dtv.FFTSIZE_32K_T2GI"]}}, {"id": "pilotpattern", "label": "Pilot Pattern", "dtype": "enum", "options": ["PILOT_PP1", "PILOT_PP2", "PILOT_PP3", "PILOT_PP4", "PILOT_PP5", "PILOT_PP6", "PILOT_PP7", "PILOT_PP8"], "option_labels": ["PP1", "PP2", "PP3", "PP4", "PP5", "PP6", "PP7", "PP8"], "option_attributes": {"val": ["dtv.PILOT_PP1", "dtv.PILOT_PP2", "dtv.PILOT_PP3", "dtv.PILOT_PP4", "dtv.PILOT_PP5", "dtv.PILOT_PP6", "dtv.PILOT_PP7", "dtv.PILOT_PP8"]}}, {"id": "guardinterval", "label": "Guard Interval", "dtype": "enum", "options": ["GI_1_32", "GI_1_16", "GI_1_8", "GI_1_4", "GI_1_128", "GI_19_128", "GI_19_256"], "option_labels": ["1/32", "1/16", "1/8", "1/4", "1/128", "19/128", "19/256"], "option_attributes": {"val": ["dtv.GI_1_32", "dtv.GI_1_16", "dtv.GI_1_8", "dtv.GI_1_4", "dtv.GI_1_128", "dtv.GI_19_128", "dtv.GI_19_256"]}}, {"id": "numdatasyms", "label": "Number of Data Symbols", "dtype": "int", "default": "100"}, {"id": "paprmode1", "label": "PAPR Mode", "dtype": "enum", "options": ["PAPR_OFF", "PAPR_ACE", "PAPR_TR", "PAPR_BOTH"], "option_labels": ["Off", "Active Constellation Extension", "Tone Reservation", "Both ACE and TR"], "option_attributes": {"val": ["dtv.PAPR_OFF", "dtv.PAPR_ACE", "dtv.PAPR_TR", "dtv.PAPR_BOTH"]}, "hide": "${ version.hide_111 }"}, {"id": "paprmode2", "label": "PAPR Mode", "dtype": "enum", "options": ["PAPR_OFF", "PAPR_ACE", "PAPR_TR", "PAPR_BOTH"], "option_labels": ["P2 Only", "Active Constellation Extension", "Tone Reservation", "Both ACE and TR"], "option_attributes": {"val": ["dtv.PAPR_OFF", "dtv.PAPR_ACE", "dtv.PAPR_TR", "dtv.PAPR_BOTH"]}, "hide": "${ version.hide_131 }"}, {"id": "version", "label": "Specification Version", "dtype": "enum", "options": ["VERSION_111", "VERSION_131"], "option_labels": ["1.1.1", "1.3.1"], "option_attributes": {"hide_111": ["none", "all"], "hide_131": ["all", "none"], "val": ["dtv.VERSION_111", "dtv.VERSION_131"]}}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex", "multiplicity": "2"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.dvbt2_miso_cc(\n    ${carriermode.val},\n    ${fftsize.val},\n    ${pilotpattern.val},\n    ${guardinterval.val},\n    ${numdatasyms},\n    % if str(version) == 'VERSION_111':\n    ${paprmode1.val}\n    % else:\n    ${paprmode2.val}\n    % endif\n    )"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_dvbt2_modulator_bc.block.yml": {"id": "dtv_dvbt2_modulator_bc", "label": "DVB-T2 Modulator", "parameters": [{"id": "framesize", "label": "FECFRAME size", "dtype": "enum", "options": ["FECFRAME_NORMAL", "FECFRAME_SHORT"], "option_labels": ["Normal", "Short"], "option_attributes": {"val": ["dtv.FECFRAME_NORMAL", "dtv.FECFRAME_SHORT"]}}, {"id": "constellation", "label": "Constellation", "dtype": "enum", "options": ["MOD_QPSK", "MOD_16QAM", "MOD_64QAM", "MOD_256QAM"], "option_labels": ["QPSK", "16QAM", "64QAM", "256QAM"], "option_attributes": {"val": ["dtv.MOD_QPSK", "dtv.MOD_16QAM", "dtv.MOD_64QAM", "dtv.MOD_256QAM"]}}, {"id": "rotation", "label": "Constellation rotation", "dtype": "enum", "options": ["ROTATION_OFF", "ROTATION_ON"], "option_labels": ["Off", "On"], "option_attributes": {"val": ["dtv.ROTATION_OFF", "dtv.ROTATION_ON"]}}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.dvbt2_modulator_bc(${framesize.val}, ${constellation.val}, ${rotation.val})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_dvbt2_p1insertion_cc.block.yml": {"id": "dtv_dvbt2_p1insertion_cc", "label": "P1 Symbol Insertion", "parameters": [{"id": "carriermode", "label": "Extended Carrier Mode", "dtype": "enum", "options": ["CARRIERS_NORMAL", "CARRIERS_EXTENDED"], "option_labels": ["Normal", "Extended"], "option_attributes": {"val": ["dtv.CARRIERS_NORMAL", "dtv.CARRIERS_EXTENDED"]}}, {"id": "fftsize1", "label": "FFT Size", "dtype": "enum", "options": ["FFTSIZE_1K", "FFTSIZE_2K", "FFTSIZE_4K", "FFTSIZE_8K", "FFTSIZE_8K_T2GI", "FFTSIZE_16K", "FFTSIZE_32K", "FFTSIZE_32K_T2GI"], "option_labels": ["1K", "2K", "4K", "8K", "8K DVB-T2 GI", "16K", "32K", "32K DVB-T2 GI"], "option_attributes": {"val": ["dtv.FFTSIZE_1K", "dtv.FFTSIZE_2K", "dtv.FFTSIZE_4K", "dtv.FFTSIZE_8K", "dtv.FFTSIZE_8K_T2GI", "dtv.FFTSIZE_16K", "dtv.FFTSIZE_32K", "dtv.FFTSIZE_32K_T2GI"]}, "hide": "${ (preamble1.hide_base if str(version) == 'VERSION_111' else preamble2.hide_base) }"}, {"id": "fftsize2", "label": "FFT Size", "dtype": "enum", "options": ["FFTSIZE_2K", "FFTSIZE_4K", "FFTSIZE_8K", "FFTSIZE_8K_T2GI", "FFTSIZE_16K", "FFTSIZE_16K_T2GI"], "option_labels": ["2K", "4K", "8K", "8K DVB-T2 GI", "16K", "16K DVB-T2 GI"], "option_attributes": {"val": ["dtv.FFTSIZE_2K", "dtv.FFTSIZE_4K", "dtv.FFTSIZE_8K", "dtv.FFTSIZE_8K_T2GI", "dtv.FFTSIZE_16K", "dtv.FFTSIZE_16K_T2GI"]}, "hide": "${ (preamble1.hide_lite if str(version) == 'VERSION_111' else preamble2.hide_lite) }"}, {"id": "guardinterval", "label": "Guard Interval", "dtype": "enum", "options": ["GI_1_32", "GI_1_16", "GI_1_8", "GI_1_4", "GI_1_128", "GI_19_128", "GI_19_256"], "option_labels": ["1/32", "1/16", "1/8", "1/4", "1/128", "19/128", "19/256"], "option_attributes": {"val": ["dtv.GI_1_32", "dtv.GI_1_16", "dtv.GI_1_8", "dtv.GI_1_4", "dtv.GI_1_128", "dtv.GI_19_128", "dtv.GI_19_256"]}}, {"id": "numdatasyms", "label": "Number of Data Symbols", "dtype": "int", "default": "100"}, {"id": "version", "label": "Specification Version", "dtype": "enum", "options": ["VERSION_111", "VERSION_131"], "option_labels": ["1.1.1", "1.3.1"], "option_attributes": {"hide_111": ["none", "all"], "hide_131": ["all", "none"], "val": ["dtv.VERSION_111", "dtv.VERSION_131"]}}, {"id": "preamble1", "label": "Preamble", "dtype": "enum", "options": ["PREAMBLE_T2_SISO", "PREAMBLE_T2_MISO"], "option_labels": ["T2 SISO", "T2 MISO"], "option_attributes": {"hide_base": ["none", "none"], "hide_lite": ["all", "all"], "val": ["dtv.PREAMBLE_T2_SISO", "dtv.PREAMBLE_T2_MISO"]}, "hide": "${ version.hide_111 }"}, {"id": "preamble2", "label": "Preamble", "dtype": "enum", "options": ["PREAMBLE_T2_SISO", "PREAMBLE_T2_MISO", "PREAMBLE_T2_LITE_SISO", "PREAMBLE_T2_LITE_MISO"], "option_labels": ["T2 SISO", "T2 MISO", "T2-Lite SISO", "T2-Lite MISO"], "option_attributes": {"hide_base": ["none", "none", "all", "all"], "hide_lite": ["all", "all", "none", "none"], "val": ["dtv.PREAMBLE_T2_SISO", "dtv.PREAMBLE_T2_MISO", "dtv.PREAMBLE_T2_LITE_SISO", "dtv.PREAMBLE_T2_LITE_MISO"]}, "hide": "${ version.hide_131 }"}, {"id": "showlevels", "label": "Show Peak IQ Levels", "dtype": "enum", "options": ["SHOWLEVELS_OFF", "SHOWLEVELS_ON"], "option_labels": ["Off", "On"], "option_attributes": {"hide_vclip": ["all", "none"], "val": ["dtv.SHOWLEVELS_OFF", "dtv.SHOWLEVELS_ON"]}}, {"id": "vclip", "label": "Vclip", "dtype": "float", "default": "3.3", "hide": "${ showlevels.hide_vclip }"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.dvbt2_p1insertion_cc(\n    ${carriermode.val},\n    % if str(version) == 'VERSION_111':\n    ${fftsize1.val},\n    % else:\n    % if str(preamble2) == 'PREAMBLE_T2_SISO' or str(preamble2) == 'PREAMBLE_T2_MISO':\n    ${fftsize1.val},\n    % else:\n    ${fftsize2.val},\n    % endif\n    % endif\n    ${guardinterval.val},\n    ${numdatasyms},\n    % if str(version) == 'VERSION_111':\n    ${preamble1.val},\n    % else:\n    ${preamble2.val},\n    % endif\n    ${showlevels.val},\n    ${vclip}\n    )"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_dvbt2_paprtr_cc.block.yml": {"id": "dtv_dvbt2_paprtr_cc", "label": "Tone Reservation PAPR", "parameters": [{"id": "carriermode", "label": "Extended Carrier Mode", "dtype": "enum", "options": ["CARRIERS_NORMAL", "CARRIERS_EXTENDED"], "option_labels": ["Normal", "Extended"], "option_attributes": {"val": ["dtv.CARRIERS_NORMAL", "dtv.CARRIERS_EXTENDED"]}}, {"id": "fftsize", "label": "FFT Size", "dtype": "enum", "options": ["FFTSIZE_1K", "FFTSIZE_2K", "FFTSIZE_4K", "FFTSIZE_8K", "FFTSIZE_8K_T2GI", "FFTSIZE_16K", "FFTSIZE_16K_T2GI", "FFTSIZE_32K", "FFTSIZE_32K_T2GI"], "option_labels": ["1K", "2K", "4K", "8K", "8K DVB-T2 GI", "16K", "16K DVB-T2 GI", "32K", "32K DVB-T2 GI"], "option_attributes": {"val": ["dtv.FFTSIZE_1K", "dtv.FFTSIZE_2K", "dtv.FFTSIZE_4K", "dtv.FFTSIZE_8K", "dtv.FFTSIZE_8K_T2GI", "dtv.FFTSIZE_16K", "dtv.FFTSIZE_16K_T2GI", "dtv.FFTSIZE_32K", "dtv.FFTSIZE_32K_T2GI"], "vlength": [1024, 2048, 4096, 8192, 8192, 16384, 16384, 32768, 32768]}}, {"id": "pilotpattern", "label": "Pilot Pattern", "dtype": "enum", "options": ["PILOT_PP1", "PILOT_PP2", "PILOT_PP3", "PILOT_PP4", "PILOT_PP5", "PILOT_PP6", "PILOT_PP7", "PILOT_PP8"], "option_labels": ["PP1", "PP2", "PP3", "PP4", "PP5", "PP6", "PP7", "PP8"], "option_attributes": {"val": ["dtv.PILOT_PP1", "dtv.PILOT_PP2", "dtv.PILOT_PP3", "dtv.PILOT_PP4", "dtv.PILOT_PP5", "dtv.PILOT_PP6", "dtv.PILOT_PP7", "dtv.PILOT_PP8"]}}, {"id": "guardinterval", "label": "Guard Interval", "dtype": "enum", "options": ["GI_1_32", "GI_1_16", "GI_1_8", "GI_1_4", "GI_1_128", "GI_19_128", "GI_19_256"], "option_labels": ["1/32", "1/16", "1/8", "1/4", "1/128", "19/128", "19/256"], "option_attributes": {"val": ["dtv.GI_1_32", "dtv.GI_1_16", "dtv.GI_1_8", "dtv.GI_1_4", "dtv.GI_1_128", "dtv.GI_19_128", "dtv.GI_19_256"]}}, {"id": "numdatasyms", "label": "Number of Data Symbols", "dtype": "int", "default": "100"}, {"id": "paprmode1", "label": "PAPR Mode", "dtype": "enum", "options": ["PAPR_OFF", "PAPR_ACE", "PAPR_TR", "PAPR_BOTH"], "option_labels": ["Off", "Active Constellation Extension", "Tone Reservation", "Both ACE and TR"], "option_attributes": {"hide_vclip": ["all", "all", "none", "none"], "val": ["dtv.PAPR_OFF", "dtv.PAPR_ACE", "dtv.PAPR_TR", "dtv.PAPR_BOTH"]}, "hide": "${ version.hide_111 }"}, {"id": "paprmode2", "label": "PAPR Mode", "dtype": "enum", "options": ["PAPR_OFF", "PAPR_ACE", "PAPR_TR", "PAPR_BOTH"], "option_labels": ["P2 Only", "Active Constellation Extension", "Tone Reservation", "Both ACE and TR"], "option_attributes": {"hide_vclip": ["all", "all", "none", "none"], "val": ["dtv.PAPR_OFF", "dtv.PAPR_ACE", "dtv.PAPR_TR", "dtv.PAPR_BOTH"]}, "hide": "${ version.hide_131 }"}, {"id": "version", "label": "Specification Version", "dtype": "enum", "options": ["VERSION_111", "VERSION_131"], "option_labels": ["1.1.1", "1.3.1"], "option_attributes": {"hide_111": ["none", "all"], "hide_131": ["all", "none"], "val": ["dtv.VERSION_111", "dtv.VERSION_131"]}}, {"id": "vclip", "label": "Vclip", "dtype": "float", "default": "3.3", "hide": "${ (paprmode1.hide_vclip if str(version) == 'VERSION_111' else paprmode2.hide_vclip) }"}, {"id": "iterations", "label": "Iterations", "dtype": "int", "default": "10", "hide": "${ (paprmode1.hide_vclip if str(version) == 'VERSION_111' else paprmode2.hide_vclip) }"}], "inputs": [{"domain": "stream", "dtype": "complex", "vlen": "${ fftsize.vlength }"}], "outputs": [{"domain": "stream", "dtype": "complex", "vlen": "${ fftsize.vlength }"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.dvbt2_paprtr_cc(\n    ${carriermode.val},\n    ${fftsize.val},\n    ${pilotpattern.val},\n    ${guardinterval.val},\n    ${numdatasyms},\n    % if str(version) == 'VERSION_111':\n    ${paprmode1.val},\n    % else:\n    ${paprmode2.val},\n    % endif\n    ${version.val},\n    ${vclip},\n    ${iterations},\n    ${fftsize.vlength}\n    )"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_dvbt2_pilotgenerator_cc.block.yml": {"id": "dtv_dvbt2_pilotgenerator_cc", "label": "Pilot Generator and IFFT", "parameters": [{"id": "carriermode", "label": "Extended Carrier Mode", "dtype": "enum", "options": ["CARRIERS_NORMAL", "CARRIERS_EXTENDED"], "option_labels": ["Normal", "Extended"], "option_attributes": {"val": ["dtv.CARRIERS_NORMAL", "dtv.CARRIERS_EXTENDED"]}}, {"id": "fftsize", "label": "FFT Size", "dtype": "enum", "options": ["FFTSIZE_1K", "FFTSIZE_2K", "FFTSIZE_4K", "FFTSIZE_8K", "FFTSIZE_8K_T2GI", "FFTSIZE_16K", "FFTSIZE_16K_T2GI", "FFTSIZE_32K", "FFTSIZE_32K_T2GI"], "option_labels": ["1K", "2K", "4K", "8K", "8K DVB-T2 GI", "16K", "16K DVB-T2 GI", "32K", "32K DVB-T2 GI"], "option_attributes": {"val": ["dtv.FFTSIZE_1K", "dtv.FFTSIZE_2K", "dtv.FFTSIZE_4K", "dtv.FFTSIZE_8K", "dtv.FFTSIZE_8K_T2GI", "dtv.FFTSIZE_16K", "dtv.FFTSIZE_16K_T2GI", "dtv.FFTSIZE_32K", "dtv.FFTSIZE_32K_T2GI"], "vlength": [1024, 2048, 4096, 8192, 8192, 16384, 16384, 32768, 32768]}}, {"id": "pilotpattern", "label": "Pilot Pattern", "dtype": "enum", "options": ["PILOT_PP1", "PILOT_PP2", "PILOT_PP3", "PILOT_PP4", "PILOT_PP5", "PILOT_PP6", "PILOT_PP7", "PILOT_PP8"], "option_labels": ["PP1", "PP2", "PP3", "PP4", "PP5", "PP6", "PP7", "PP8"], "option_attributes": {"val": ["dtv.PILOT_PP1", "dtv.PILOT_PP2", "dtv.PILOT_PP3", "dtv.PILOT_PP4", "dtv.PILOT_PP5", "dtv.PILOT_PP6", "dtv.PILOT_PP7", "dtv.PILOT_PP8"]}}, {"id": "guardinterval", "label": "Guard Interval", "dtype": "enum", "options": ["GI_1_32", "GI_1_16", "GI_1_8", "GI_1_4", "GI_1_128", "GI_19_128", "GI_19_256"], "option_labels": ["1/32", "1/16", "1/8", "1/4", "1/128", "19/128", "19/256"], "option_attributes": {"val": ["dtv.GI_1_32", "dtv.GI_1_16", "dtv.GI_1_8", "dtv.GI_1_4", "dtv.GI_1_128", "dtv.GI_19_128", "dtv.GI_19_256"]}}, {"id": "numdatasyms", "label": "Number of Data Symbols", "dtype": "int", "default": "100"}, {"id": "paprmode1", "label": "PAPR Mode", "dtype": "enum", "options": ["PAPR_OFF", "PAPR_ACE", "PAPR_TR", "PAPR_BOTH"], "option_labels": ["Off", "Active Constellation Extension", "Tone Reservation", "Both ACE and TR"], "option_attributes": {"val": ["dtv.PAPR_OFF", "dtv.PAPR_ACE", "dtv.PAPR_TR", "dtv.PAPR_BOTH"]}, "hide": "${ version.hide_111 }"}, {"id": "paprmode2", "label": "PAPR Mode", "dtype": "enum", "options": ["PAPR_OFF", "PAPR_ACE", "PAPR_TR", "PAPR_BOTH"], "option_labels": ["P2 Only", "Active Constellation Extension", "Tone Reservation", "Both ACE and TR"], "option_attributes": {"val": ["dtv.PAPR_OFF", "dtv.PAPR_ACE", "dtv.PAPR_TR", "dtv.PAPR_BOTH"]}, "hide": "${ version.hide_131 }"}, {"id": "version", "label": "Specification Version", "dtype": "enum", "options": ["VERSION_111", "VERSION_131"], "option_labels": ["1.1.1", "1.3.1"], "option_attributes": {"hide_111": ["none", "all"], "hide_131": ["all", "none"], "val": ["dtv.VERSION_111", "dtv.VERSION_131"]}}, {"id": "preamble1", "label": "Preamble", "dtype": "enum", "options": ["PREAMBLE_T2_SISO", "PREAMBLE_T2_MISO"], "option_labels": ["T2 SISO", "T2 MISO"], "option_attributes": {"hide_miso": ["all", "none"], "val": ["dtv.PREAMBLE_T2_SISO", "dtv.PREAMBLE_T2_MISO"]}, "hide": "${ version.hide_111 }"}, {"id": "preamble2", "label": "Preamble", "dtype": "enum", "options": ["PREAMBLE_T2_SISO", "PREAMBLE_T2_MISO", "PREAMBLE_T2_LITE_SISO", "PREAMBLE_T2_LITE_MISO"], "option_labels": ["T2 SISO", "T2 MISO", "T2-Lite SISO", "T2-Lite MISO"], "option_attributes": {"hide_miso": ["all", "none", "all", "none"], "val": ["dtv.PREAMBLE_T2_SISO", "dtv.PREAMBLE_T2_MISO", "dtv.PREAMBLE_T2_LITE_SISO", "dtv.PREAMBLE_T2_LITE_MISO"]}, "hide": "${ version.hide_131 }"}, {"id": "misogroup", "label": "MISO Group", "dtype": "enum", "options": ["MISO_TX1", "MISO_TX2"], "option_labels": ["TX1", "TX2"], "option_attributes": {"val": ["dtv.MISO_TX1", "dtv.MISO_TX2"]}, "hide": "${ (preamble1.hide_miso if str(version) == 'VERSION_111' else preamble2.hide_miso) }"}, {"id": "equalization", "label": "Sin(x)/x Equalization", "dtype": "enum", "options": ["EQUALIZATION_OFF", "EQUALIZATION_ON"], "option_labels": ["Off", "On"], "option_attributes": {"hide_bandwidth": ["all", "none"], "val": ["dtv.EQUALIZATION_OFF", "dtv.EQUALIZATION_ON"]}}, {"id": "bandwidth", "label": "Bandwidth", "dtype": "enum", "options": ["BANDWIDTH_1_7_MHZ", "BANDWIDTH_5_0_MHZ", "BANDWIDTH_6_0_MHZ", "BANDWIDTH_7_0_MHZ", "BANDWIDTH_8_0_MHZ", "BANDWIDTH_10_0_MHZ"], "option_labels": ["1.7 MHz", "5 MHz", "6 MHz", "7 MHz", "8 MHz", "10 MHz"], "option_attributes": {"val": ["dtv.BANDWIDTH_1_7_MHZ", "dtv.BANDWIDTH_5_0_MHZ", "dtv.BANDWIDTH_6_0_MHZ", "dtv.BANDWIDTH_7_0_MHZ", "dtv.BANDWIDTH_8_0_MHZ", "dtv.BANDWIDTH_10_0_MHZ"]}, "hide": "${ equalization.hide_bandwidth }"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex", "vlen": "${ fftsize.vlength }"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.dvbt2_pilotgenerator_cc(\n    ${carriermode.val},\n    ${fftsize.val},\n    ${pilotpattern.val},\n    ${guardinterval.val},\n    ${numdatasyms},\n    % if str(version) == 'VERSION_111':\n    ${paprmode1.val},\n    % else:\n    ${paprmode2.val},\n    % endif\n    ${version.val},\n    % if str(version) == 'VERSION_111':\n    ${preamble1.val},\n    % else:\n    ${preamble2.val},\n    % endif\n    ${misogroup.val},\n    ${equalization.val},\n    ${bandwidth.val},\n    ${fftsize.vlength}\n    )"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_dvbt_bit_inner_deinterleaver.block.yml": {"id": "dtv_dvbt_bit_inner_deinterleaver", "label": "Bit Inner Deinterleaver", "parameters": [{"id": "constellation", "label": "Constellation Type", "dtype": "enum", "options": ["qpsk", "16qam", "64qam"], "option_labels": ["QPSK", "16QAM", "64QAM"], "option_attributes": {"val": ["dtv.MOD_QPSK", "dtv.MOD_16QAM", "dtv.MOD_64QAM"]}}, {"id": "hierarchy", "label": "Hierarchy Type", "dtype": "enum", "options": ["nh", "alpha1", "alpha2", "alpha4"], "option_labels": ["Non Hierarchical", "Alpha 1", "Alpha 2", "Alpha 4"], "option_attributes": {"num_streams": ["1", "2", "2", "2"], "val": ["dtv.NH", "dtv.ALPHA1", "dtv.ALPHA2", "dtv.ALPHA4"]}, "hide": "part"}, {"id": "transmission_mode", "label": "Transmission Mode", "dtype": "enum", "options": ["T2k", "T8k"], "option_labels": ["2K", "8K"], "option_attributes": {"payload_length": [1512, 6048], "val": ["dtv.T2k", "dtv.T8k"]}}], "inputs": [{"domain": "stream", "dtype": "byte", "vlen": "${ transmission_mode.payload_length }"}], "outputs": [{"domain": "stream", "dtype": "byte", "vlen": "${ transmission_mode.payload_length }", "multiplicity": "${ hierarchy.num_streams }"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.dvbt_bit_inner_deinterleaver(${transmission_mode.payload_length}, ${constellation.val}, ${hierarchy.val}, ${transmission_mode.val})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_dvbt_bit_inner_interleaver.block.yml": {"id": "dtv_dvbt_bit_inner_interleaver", "label": "Bit Inner Interleaver", "parameters": [{"id": "constellation", "label": "Constellation Type", "dtype": "enum", "options": ["qpsk", "16qam", "64qam"], "option_labels": ["QPSK", "16QAM", "64QAM"], "option_attributes": {"val": ["dtv.MOD_QPSK", "dtv.MOD_16QAM", "dtv.MOD_64QAM"]}}, {"id": "hierarchy", "label": "Hierarchy Type", "dtype": "enum", "options": ["nh", "alpha1", "alpha2", "alpha4"], "option_labels": ["Non Hierarchical", "Alpha 1", "Alpha 2", "Alpha 4"], "option_attributes": {"num_streams": ["1", "2", "2", "2"], "val": ["dtv.NH", "dtv.ALPHA1", "dtv.ALPHA2", "dtv.ALPHA4"]}, "hide": "part"}, {"id": "transmission_mode", "label": "Transmission Mode", "dtype": "enum", "options": ["T2k", "T8k"], "option_labels": ["2K", "8K"], "option_attributes": {"payload_length": [1512, 6048], "val": ["dtv.T2k", "dtv.T8k"]}}], "inputs": [{"domain": "stream", "dtype": "byte", "vlen": "${ transmission_mode.payload_length }", "multiplicity": "${ hierarchy.num_streams }"}], "outputs": [{"domain": "stream", "dtype": "byte", "vlen": "${ transmission_mode.payload_length }"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.dvbt_bit_inner_interleaver(${transmission_mode.payload_length}, ${constellation.val}, ${hierarchy.val}, ${transmission_mode.val})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_dvbt_convolutional_deinterleaver.block.yml": {"id": "dtv_dvbt_convolutional_deinterleaver", "label": "Convolutional Deinterleaver", "parameters": [{"id": "blocks", "label": "Blocks (12 Bytes)", "dtype": "int", "default": "136"}, {"id": "I", "label": "Number of Shift registers", "dtype": "int", "default": "12"}, {"id": "M", "label": "Depth of shift registers", "dtype": "int", "default": "17"}], "inputs": [{"domain": "stream", "dtype": "byte", "vlen": 1}], "outputs": [{"domain": "stream", "dtype": "byte", "vlen": "${ blocks*I }"}], "asserts": ["${ blocks > 0 }", "${ I > 0 }", "${ M > 0 }"], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.dvbt_convolutional_deinterleaver(${blocks}, ${I}, ${M})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_dvbt_convolutional_interleaver.block.yml": {"id": "dtv_dvbt_convolutional_interleaver", "label": "Convolutional Interleaver", "parameters": [{"id": "blocks", "label": "Blocks (12 Bytes)", "dtype": "int", "default": "136"}, {"id": "I", "label": "Number of Shift registers", "dtype": "int", "default": "12"}, {"id": "M", "label": "Depth of shift registers", "dtype": "int", "default": "17"}], "inputs": [{"domain": "stream", "dtype": "byte", "vlen": "${ blocks*I }"}], "outputs": [{"domain": "stream", "dtype": "byte", "vlen": 1}], "asserts": ["${ blocks > 0 }", "${ I > 0 }", "${ M > 0 }"], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.dvbt_convolutional_interleaver(${blocks}, ${I}, ${M})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_dvbt_demap.block.yml": {"id": "dtv_dvbt_demap", "label": "DVB-T Demap", "parameters": [{"id": "constellation", "label": "Constellation Type", "dtype": "enum", "options": ["qpsk", "16qam", "64qam"], "option_labels": ["QPSK", "16QAM", "64QAM"], "option_attributes": {"val": ["dtv.MOD_QPSK", "dtv.MOD_16QAM", "dtv.MOD_64QAM"]}}, {"id": "hierarchy", "label": "Hierarchy Type", "dtype": "enum", "options": ["nh", "alpha1", "alpha2", "alpha4"], "option_labels": ["Non Hierarchical", "Alpha 1", "Alpha 2", "Alpha 4"], "option_attributes": {"val": ["dtv.NH", "dtv.ALPHA1", "dtv.ALPHA2", "dtv.ALPHA4"]}}, {"id": "transmission_mode", "label": "Transmission Mode", "dtype": "enum", "options": ["T2k", "T8k"], "option_labels": ["2K", "8K"], "option_attributes": {"payload_length": [1512, 6048], "val": ["dtv.T2k", "dtv.T8k"]}}, {"id": "gain", "label": "Gain", "dtype": "complex", "default": "1"}], "inputs": [{"domain": "stream", "dtype": "complex", "vlen": "${ transmission_mode.payload_length }"}], "outputs": [{"domain": "stream", "dtype": "byte", "vlen": "${ transmission_mode.payload_length }"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.dvbt_demap(${transmission_mode.payload_length}, ${constellation.val}, ${hierarchy.val}, ${transmission_mode.val}, ${gain})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_dvbt_demod_reference_signals.block.yml": {"id": "dtv_dvbt_demod_reference_signals", "label": "Demod Reference Signals", "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}}, {"id": "constellation", "label": "Constellation Type", "dtype": "enum", "options": ["qpsk", "16qam", "64qam"], "option_labels": ["QPSK", "16QAM", "64QAM"], "option_attributes": {"val": ["dtv.MOD_QPSK", "dtv.MOD_16QAM", "dtv.MOD_64QAM"]}}, {"id": "hierarchy", "label": "Hierarchy Type", "dtype": "enum", "options": ["nh", "alpha1", "alpha2", "alpha4"], "option_labels": ["Non Hierarchical", "Alpha 1", "Alpha 2", "Alpha 4"], "option_attributes": {"val": ["dtv.NH", "dtv.ALPHA1", "dtv.ALPHA2", "dtv.ALPHA4"]}}, {"id": "code_rate_hp", "label": "Code rate HP", "dtype": "enum", "options": ["C1_2", "C2_3", "C3_4", "C5_6", "C7_8"], "option_labels": ["1/2", "2/3", "3/4", "5/6", "7/8"], "option_attributes": {"val": ["dtv.C1_2", "dtv.C2_3", "dtv.C3_4", "dtv.C5_6", "dtv.C7_8"]}}, {"id": "code_rate_lp", "label": "Code rate LP", "dtype": "enum", "options": ["C1_2", "C2_3", "C3_4", "C5_6", "C7_8"], "option_labels": ["1/2", "2/3", "3/4", "5/6", "7/8"], "option_attributes": {"val": ["dtv.C1_2", "dtv.C2_3", "dtv.C3_4", "dtv.C5_6", "dtv.C7_8"]}}, {"id": "guard_interval", "label": "Guard Interval", "dtype": "enum", "options": ["GI_1_32", "GI_1_16", "GI_1_8", "GI_1_4"], "option_labels": ["1/32", "1/16", "1/8", "1/4"], "option_attributes": {"val": ["dtv.GI_1_32", "dtv.GI_1_16", "dtv.GI_1_8", "dtv.GI_1_4"]}}, {"id": "transmission_mode", "label": "Transmission Mode", "dtype": "enum", "options": ["T2k", "T8k"], "option_labels": ["2K", "8K"], "option_attributes": {"fft_length": [2048, 8192], "payload_length": [1512, 6048], "val": ["dtv.T2k", "dtv.T8k"]}}, {"id": "include_cell_id", "label": "Include Cell ID", "dtype": "enum", "options": ["call_id_yes", "cell_id_no"], "option_labels": ["Yes", "No"], "option_attributes": {"val": ["1", "0"]}}, {"id": "cell_id", "label": "Cell Id", "dtype": "int", "default": "0"}], "inputs": [{"domain": "stream", "dtype": "complex", "vlen": "${ transmission_mode.fft_length }"}], "outputs": [{"domain": "stream", "dtype": "complex", "vlen": "${ transmission_mode.payload_length }"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.dvbt_demod_reference_signals(\n    ${type.size},\n    ${transmission_mode.fft_length},\n    ${transmission_mode.payload_length},\n    ${constellation.val},\n    ${hierarchy.val},\n    ${code_rate_hp.val},\n    ${code_rate_lp.val},\n    ${guard_interval.val},\n    ${transmission_mode.val},\n    ${include_cell_id.val},\n    ${cell_id})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_dvbt_energy_descramble.block.yml": {"id": "dtv_dvbt_energy_descramble", "label": "Energy Descramble", "parameters": [{"id": "nsize", "label": "Blocks(188 Bytes)", "dtype": "int", "default": "8"}], "inputs": [{"domain": "stream", "dtype": "byte", "vlen": "${ nsize*188 }"}], "outputs": [{"domain": "stream", "dtype": "byte", "vlen": 1}], "asserts": ["${ nsize > 0 }"], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.dvbt_energy_descramble(${nsize})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_dvbt_energy_dispersal.block.yml": {"id": "dtv_dvbt_energy_dispersal", "label": "Energy Dispersal", "parameters": [{"id": "nsize", "label": "Blocks(1504 Bytes)", "dtype": "int", "default": "8"}], "inputs": [{"domain": "stream", "dtype": "byte", "vlen": 1}], "outputs": [{"domain": "stream", "dtype": "byte", "vlen": "${ 1504*nsize }"}], "asserts": ["${ nsize > 0 }"], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.dvbt_energy_dispersal(${nsize})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_dvbt_inner_coder.block.yml": {"id": "dtv_dvbt_inner_coder", "label": "Inner Coder", "parameters": [{"id": "ninput", "label": "Input length", "dtype": "int", "default": "1"}, {"id": "noutput", "label": "Output length", "dtype": "int", "default": "1512"}, {"id": "constellation", "label": "Constellation Type", "dtype": "enum", "options": ["qpsk", "16qam", "64qam"], "option_labels": ["QPSK", "16QAM", "64QAM"], "option_attributes": {"val": ["dtv.MOD_QPSK", "dtv.MOD_16QAM", "dtv.MOD_64QAM"]}}, {"id": "hierarchy", "label": "Hierarchy Type", "dtype": "enum", "options": ["nh", "alpha1", "alpha2", "alpha4"], "option_labels": ["Non Hierarchical", "Alpha 1", "Alpha 2", "Alpha 4"], "option_attributes": {"val": ["dtv.NH", "dtv.ALPHA1", "dtv.ALPHA2", "dtv.ALPHA4"]}}, {"id": "code_rate", "label": "Code rate", "dtype": "enum", "options": ["C1_2", "C2_3", "C3_4", "C5_6", "C7_8"], "option_labels": ["1/2", "2/3", "3/4", "5/6", "7/8"], "option_attributes": {"val": ["dtv.C1_2", "dtv.C2_3", "dtv.C3_4", "dtv.C5_6", "dtv.C7_8"]}}], "inputs": [{"domain": "stream", "dtype": "byte", "vlen": "${ ninput }"}], "outputs": [{"domain": "stream", "dtype": "byte", "vlen": "${ noutput }"}], "asserts": ["${ ninput > 0 }", "${ noutput > 0 }", "${ noutput >= ninput }"], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.dvbt_inner_coder(${ninput}, ${noutput}, ${constellation.val}, ${hierarchy.val}, ${code_rate.val})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_dvbt_map.block.yml": {"id": "dtv_dvbt_map", "label": "DVB-T Map", "parameters": [{"id": "constellation", "label": "Constellation Type", "dtype": "enum", "options": ["qpsk", "16qam", "64qam"], "option_labels": ["QPSK", "16QAM", "64QAM"], "option_attributes": {"val": ["dtv.MOD_QPSK", "dtv.MOD_16QAM", "dtv.MOD_64QAM"]}}, {"id": "hierarchy", "label": "Hierarchy Type", "dtype": "enum", "options": ["nh", "alpha1", "alpha2", "alpha4"], "option_labels": ["Non Hierarchical", "Alpha 1", "Alpha 2", "Alpha 4"], "option_attributes": {"val": ["dtv.NH", "dtv.ALPHA1", "dtv.ALPHA2", "dtv.ALPHA4"]}}, {"id": "transmission_mode", "label": "Transmission Mode", "dtype": "enum", "options": ["T2k", "T8k"], "option_labels": ["2K", "8K"], "option_attributes": {"payload_length": [1512, 6048], "val": ["dtv.T2k", "dtv.T8k"]}}, {"id": "gain", "label": "Gain", "dtype": "complex", "default": "1"}], "inputs": [{"domain": "stream", "dtype": "byte", "vlen": "${ transmission_mode.payload_length }"}], "outputs": [{"domain": "stream", "dtype": "complex", "vlen": "${ transmission_mode.payload_length }"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.dvbt_map(${transmission_mode.payload_length}, ${constellation.val}, ${hierarchy.val}, ${transmission_mode.val}, ${gain})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_dvbt_ofdm_sym_acquisition.block.yml": {"id": "dtv_dvbt_ofdm_sym_acquisition", "label": "OFDM Symbol Acquisition", "parameters": [{"id": "type", "label": "Output Type", "dtype": "enum", "default": "float", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"fcn": ["c", "f", "i", "s", "b"]}, "hide": "part"}, {"id": "fft_length", "label": "FFT Length", "dtype": "int", "default": "2048"}, {"id": "occupied_tones", "label": "Occupied Tones", "dtype": "int", "default": "1705"}, {"id": "cp_length", "label": "Cyclic Prefix Length", "dtype": "int", "default": "64"}, {"id": "snr", "label": "SNR", "dtype": "real", "default": "10"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ fft_length }"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.dvbt_ofdm_sym_acquisition(1, ${fft_length}, ${occupied_tones}, ${cp_length}, ${snr})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_dvbt_reed_solomon_dec.block.yml": {"id": "dtv_dvbt_reed_solomon_dec", "label": "Reed-Solomon Decoder", "parameters": [{"id": "p", "label": "p", "dtype": "int", "default": "2"}, {"id": "m", "label": "m", "dtype": "int", "default": "8"}, {"id": "gfpoly", "label": "GF polynomial", "dtype": "raw", "default": "0x11d"}, {"id": "n", "label": "N", "dtype": "int", "default": "255"}, {"id": "k", "label": "K", "dtype": "int", "default": "239"}, {"id": "t", "label": "t", "dtype": "int", "default": "8"}, {"id": "s", "label": "Shortening size", "dtype": "int", "default": "51"}, {"id": "blocks", "label": "Blocks", "dtype": "int", "default": "8"}], "inputs": [{"domain": "stream", "dtype": "byte", "vlen": "${ blocks*(n-s) }"}], "outputs": [{"domain": "stream", "dtype": "byte", "vlen": "${ blocks*(k-s) }"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.dvbt_reed_solomon_dec(${p}, ${m}, ${gfpoly}, ${n}, ${k}, ${t}, ${s}, ${blocks})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_dvbt_reed_solomon_enc.block.yml": {"id": "dtv_dvbt_reed_solomon_enc", "label": "Reed-Solomon Encoder", "parameters": [{"id": "p", "label": "p", "dtype": "int", "default": "2"}, {"id": "m", "label": "m", "dtype": "int", "default": "8"}, {"id": "gfpoly", "label": "GF polynomial", "dtype": "raw", "default": "0x11d"}, {"id": "n", "label": "N", "dtype": "int", "default": "255"}, {"id": "k", "label": "K", "dtype": "int", "default": "239"}, {"id": "t", "label": "t", "dtype": "int", "default": "8"}, {"id": "s", "label": "Shortening size", "dtype": "int", "default": "51"}, {"id": "blocks", "label": "Blocks", "dtype": "int", "default": "8"}], "inputs": [{"domain": "stream", "dtype": "byte", "vlen": "${ blocks*(k-s) }"}], "outputs": [{"domain": "stream", "dtype": "byte", "vlen": "${ blocks*(n-s) }"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.dvbt_reed_solomon_enc(${p}, ${m}, ${gfpoly}, ${n}, ${k}, ${t}, ${s}, ${blocks})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_dvbt_reference_signals.block.yml": {"id": "dtv_dvbt_reference_signals", "label": "Reference Signals", "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}}, {"id": "constellation", "label": "Constellation Type", "dtype": "enum", "options": ["qpsk", "16qam", "64qam"], "option_labels": ["QPSK", "16QAM", "64QAM"], "option_attributes": {"val": ["dtv.MOD_QPSK", "dtv.MOD_16QAM", "dtv.MOD_64QAM"]}}, {"id": "hierarchy", "label": "Hierarchy Type", "dtype": "enum", "options": ["nh", "alpha1", "alpha2", "alpha4"], "option_labels": ["Non Hierarchical", "Alpha 1", "Alpha 2", "Alpha 4"], "option_attributes": {"val": ["dtv.NH", "dtv.ALPHA1", "dtv.ALPHA2", "dtv.ALPHA4"]}}, {"id": "code_rate_hp", "label": "Code rate HP", "dtype": "enum", "options": ["C1_2", "C2_3", "C3_4", "C5_6", "C7_8"], "option_labels": ["1/2", "2/3", "3/4", "5/6", "7/8"], "option_attributes": {"val": ["dtv.C1_2", "dtv.C2_3", "dtv.C3_4", "dtv.C5_6", "dtv.C7_8"]}}, {"id": "code_rate_lp", "label": "Code rate LP", "dtype": "enum", "options": ["C1_2", "C2_3", "C3_4", "C5_6", "C7_8"], "option_labels": ["1/2", "2/3", "3/4", "5/6", "7/8"], "option_attributes": {"val": ["dtv.C1_2", "dtv.C2_3", "dtv.C3_4", "dtv.C5_6", "dtv.C7_8"]}}, {"id": "guard_interval", "label": "Guard Interval", "dtype": "enum", "options": ["GI_1_32", "GI_1_16", "GI_1_8", "GI_1_4"], "option_labels": ["1/32", "1/16", "1/8", "1/4"], "option_attributes": {"val": ["dtv.GI_1_32", "dtv.GI_1_16", "dtv.GI_1_8", "dtv.GI_1_4"]}}, {"id": "transmission_mode", "label": "Transmission Mode", "dtype": "enum", "options": ["T2k", "T8k"], "option_labels": ["2K", "8K"], "option_attributes": {"fft_length": [2048, 8192], "payload_length": [1512, 6048], "val": ["dtv.T2k", "dtv.T8k"]}}, {"id": "include_cell_id", "label": "Include Cell ID", "dtype": "enum", "options": ["call_id_yes", "cell_id_no"], "option_labels": ["Yes", "No"], "option_attributes": {"val": ["1", "0"]}}, {"id": "cell_id", "label": "Cell Id", "dtype": "int", "default": "0"}], "inputs": [{"domain": "stream", "dtype": "complex", "vlen": "${ transmission_mode.payload_length }"}], "outputs": [{"domain": "stream", "dtype": "complex", "vlen": "${ transmission_mode.fft_length }"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.dvbt_reference_signals(\n    ${type.size},\n    ${transmission_mode.payload_length},\n    ${transmission_mode.fft_length},\n    ${constellation.val},\n    ${hierarchy.val},\n    ${code_rate_hp.val},\n    ${code_rate_lp.val},\n    ${guard_interval.val},\n    ${transmission_mode.val},\n    ${include_cell_id.val},\n    ${cell_id})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_dvbt_symbol_inner_interleaver.block.yml": {"id": "dtv_dvbt_symbol_inner_interleaver", "label": "Symbol Inner Interleaver", "parameters": [{"id": "transmission_mode", "label": "Transmission Mode", "dtype": "enum", "options": ["T2k", "T8k"], "option_labels": ["2K", "8K"], "option_attributes": {"fft_length": ["2048", "8192"], "payload_length": [1512, 6048], "val": ["dtv.T2k", "dtv.T8k"]}}, {"id": "direction", "label": "Direction", "dtype": "enum", "options": ["Interleave", "Deinterleave"], "option_attributes": {"val": ["1", "0"]}}], "inputs": [{"domain": "stream", "dtype": "byte", "vlen": "${ transmission_mode.payload_length }"}], "outputs": [{"domain": "stream", "dtype": "byte", "vlen": "${ transmission_mode.payload_length }"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.dvbt_symbol_inner_interleaver(${transmission_mode.payload_length}, ${transmission_mode.val}, ${direction.val})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/dtv_dvbt_viterbi_decoder.block.yml": {"id": "dtv_dvbt_viterbi_decoder", "label": "Viterbi Decoder", "parameters": [{"id": "constellation", "label": "Constellation Type", "dtype": "enum", "options": ["qpsk", "16qam", "64qam"], "option_labels": ["QPSK", "16QAM", "64QAM"], "option_attributes": {"val": ["dtv.MOD_QPSK", "dtv.MOD_16QAM", "dtv.MOD_64QAM"]}}, {"id": "hierarchy", "label": "Hierarchy Type", "dtype": "enum", "options": ["nh", "alpha1", "alpha2", "alpha4"], "option_labels": ["Non Hierarchical", "Alpha 1", "Alpha 2", "Alpha 4"], "option_attributes": {"val": ["dtv.NH", "dtv.ALPHA1", "dtv.ALPHA2", "dtv.ALPHA4"]}}, {"id": "code_rate", "label": "Code rate", "dtype": "enum", "options": ["C1_2", "C2_3", "C3_4", "C5_6", "C7_8"], "option_labels": ["1/2", "2/3", "3/4", "5/6", "7/8"], "option_attributes": {"val": ["dtv.C1_2", "dtv.C2_3", "dtv.C3_4", "dtv.C5_6", "dtv.C7_8"]}}, {"id": "type", "label": "Type", "dtype": "enum", "options": ["i", "s", "b"], "option_labels": ["Int", "Short", "Byte"], "option_attributes": {"io": ["int", "short", "byte"]}, "hide": "part"}, {"id": "block_size", "label": "Block Size", "dtype": "int"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "${ type.io }"}], "templates": {"imports": "from gnuradio import dtv", "make": "dtv.dvbt_viterbi_decoder(${constellation.val}, ${hierarchy.val}, ${code_rate.val}, ${block_size})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/fec.tree.yml": {"[Core]": [{"Error Coding": [{"Decoders": ["variable_cc_decoder_def", "variable_repetition_decoder_def", "variable_ldpc_decoder_def", "variable_ldpc_bit_flip_decoder_def", "variable_tpc_decoder_def", "variable_dummy_decoder_def", "variable_polar_decoder_sc_def", "variable_polar_decoder_sc_list_def", "variable_polar_decoder_sc_systematic_def"]}, {"Encoders": ["variable_cc_encoder_def", "variable_ccsds_encoder_def", "variable_repetition_encoder_def", "variable_tpc_encoder_def", "variable_ldpc_encoder_def", "variable_ldpc_encoder_G_def", "variable_ldpc_encoder_H_def", "variable_polar_encoder_def", "variable_polar_encoder_systematic_def", "variable_dummy_encoder_def"]}, "fec_extended_encoder", "fec_extended_async_encoder", "fec_extended_tagged_encoder", "fec_extended_decoder", "fec_extended_tagged_decoder", "fec_generic_encoder", "fec_generic_decoder", "fec_tagged_encoder", "fec_tagged_decoder", "fec_async_encoder", "fec_async_decoder", "fec_decode_ccsds_27_fb", "fec_encode_ccsds_27_bb", "fec_puncture_xx", "fec_depuncture_bb", "fec_ber_bf", "fec_bercurve_generator", "variable_polar_code_configurator", "variable_ldpc_H_matrix_def", "variable_ldpc_G_matrix_def"]}]}, "/usr/local/share/gnuradio/grc/blocks/fec_async_decoder.block.yml": {"id": "fec_async_decoder", "label": "FEC Async Decoder", "parameters": [{"id": "decoder", "label": "Decoder Obj.", "dtype": "raw"}, {"id": "mtu", "label": "MTU (bytes)", "dtype": "int", "default": "1500"}, {"id": "packed", "label": "Packed", "dtype": "enum", "default": "False", "options": ["False", "True"], "option_labels": ["No", "Yes"], "hide": "part"}, {"id": "rev_pack", "label": "Rev. Packing", "dtype": "enum", "default": "True", "options": ["True", "False"], "option_labels": ["Yes", "No"], "hide": "${ ('part' if packed == 'True' else 'all') }"}], "inputs": [{"domain": "message", "id": "in", "optional": true}], "outputs": [{"domain": "message", "id": "out", "optional": true}], "templates": {"imports": "from gnuradio import fec", "make": "fec.async_decoder(${decoder}, ${packed}, ${rev_pack}, ${mtu})"}, "documentation": "", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/fec_async_encoder.block.yml": {"id": "fec_async_encoder", "label": "FEC Async Encoder", "parameters": [{"id": "encoder", "label": "Encoder Obj.", "dtype": "raw"}, {"id": "mtu", "label": "MTU (bytes)", "dtype": "int", "default": "1500"}, {"id": "packed", "label": "Packed", "dtype": "enum", "default": "False", "options": ["False", "True"], "option_labels": ["No", "Yes"], "hide": "part"}, {"id": "rev_unpack", "label": "Rev. Unpacking", "dtype": "enum", "default": "True", "options": ["True", "False"], "option_labels": ["Yes", "No"], "hide": "${ ('part' if packed == 'True' else 'all') }"}, {"id": "rev_pack", "label": "Rev. Packing", "dtype": "enum", "default": "True", "options": ["True", "False"], "option_labels": ["Yes", "No"], "hide": "${ ('part' if packed == 'True' else 'all') }"}], "inputs": [{"domain": "message", "id": "in", "optional": true}], "outputs": [{"domain": "message", "id": "out", "optional": true}], "templates": {"imports": "from gnuradio import fec", "make": "fec.async_encoder(${encoder}, ${packed}, ${rev_unpack}, ${rev_pack}, ${mtu})"}, "documentation": "", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/fec_ber_bf.block.yml": {"id": "fec_ber_bf", "label": "BER", "parameters": [{"id": "test_mode", "label": "Test Mode", "dtype": "enum", "default": "False", "options": ["False", "True"]}, {"id": "berminerrors", "label": "BER Min. Errors", "dtype": "int", "default": "100", "hide": "${ ('part' if test_mode else 'all') }"}, {"id": "berlimit", "label": "BER Limit", "dtype": "float", "default": "-7.0", "hide": "${ ('part' if test_mode else 'all') }"}], "inputs": [{"label": "in0", "domain": "stream", "dtype": "byte"}, {"label": "in1", "domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "float"}], "templates": {"imports": "from gnuradio import fec", "make": "fec.ber_bf(${test_mode}, ${berminerrors}, ${berlimit})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/fec_bercurve_generator.block.yml": {"id": "fec_bercurve_generator", "label": "BER Curve Gen.", "parameters": [{"id": "esno", "label": "Es/N0", "dtype": "raw", "default": "numpy.arange(0.0, 4.0, .5)", "hide": "part"}, {"id": "samp_rate", "label": "Sample Rate", "dtype": "float", "default": "3200000"}, {"id": "encoder_list", "label": "Encoder list", "dtype": "raw", "default": "0"}, {"id": "decoder_list", "label": "Decoder list", "dtype": "raw", "default": "0"}, {"id": "puncpat", "label": "Puncture Pat.", "dtype": "string", "default": "'11'"}, {"id": "threadtype", "label": "Threading Type", "dtype": "enum", "options": ["\"capillary\"", "\"ordinary\"", "\"none\""], "option_labels": ["Capillary", "Ordinary", "None"], "hide": "part"}, {"id": "seed", "label": "Noise Seed", "dtype": "int", "default": "0", "hide": "part"}], "outputs": [{"domain": "stream", "dtype": "byte", "multiplicity": "${ len(esno)*2 }"}], "templates": {"imports": "from gnuradio import fec\nimport numpy", "make": "fec.bercurve_generator(\n    ${encoder_list}, #size\n    ${decoder_list}, #name\n    ${esno}, #range of esnos\n    ${samp_rate}, #throttle\n    ${threadtype}, #threading mode\n    ${puncpat}, #puncture pattern\n    ${seed}) # noise gen. seed"}, "documentation": "Note that this block tries to launch many parallel codes to run simultaneously. Thus, it requires that the definitions for each encoder and decoder (specified in the \"Encoder list\" and \"Decoder list\") be configured with a parallelism > 0. If the parallelism for one of the encoder or decoder definition blocks is configured to 0, you will likely see an error like:\n\n    generic_decoder=decoder_list[i],\n    TypeError: 'generic_decoder_sptr' object does not support indexing\n\n    or\n\n    generic_encoder=encoder_list[i],\n    TypeError: 'generic_encoder_sptr' object does not support indexing", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/fec_decode_ccsds_27_bb.block.yml": {"id": "fec_encode_ccsds_27_bb", "label": "Encode CCSDS 27", "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import fec", "make": "fec.encode_ccsds_27_bb()"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/fec_decode_ccsds_27_fb.block.yml": {"id": "fec_decode_ccsds_27_fb", "label": "Decode CCSDS 27", "inputs": [{"domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import fec", "make": "fec.decode_ccsds_27_fb()"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/fec_decoder.block.yml": {"id": "fec_generic_decoder", "label": "FEC Decoder", "parameters": [{"id": "decoder", "label": "Decoder Object", "dtype": "raw", "default": "decoder_variable"}, {"id": "itype", "label": "Input Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "otype", "label": "Output Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "${ itype }"}], "outputs": [{"domain": "stream", "dtype": "${ otype }"}], "templates": {"imports": "from gnuradio import fec", "make": "fec.decoder(${decoder}, ${itype.size}, ${otype.size})"}, "documentation": "This is a GNU Radio adaptor for any FEC decoder following the generic_decoder API in the fec module. Input and output are flexible to accommodate decoders that, say, modulate their encoded results into complex or float types.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/fec_depuncture_bb.block.yml": {"id": "fec_depuncture_bb", "label": "Depuncture", "parameters": [{"id": "puncsize", "label": "Puncture Size", "dtype": "int"}, {"id": "puncpat", "label": "Puncture Pattern", "dtype": "int"}, {"id": "delay", "label": "Delay", "dtype": "int", "default": "0"}, {"id": "sym", "label": "Symbol", "dtype": "int", "default": "127", "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import fec", "make": "fec.depuncture_bb(${puncsize}, ${puncpat}, ${delay}, ${sym})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/fec_encoder.block.yml": {"id": "fec_generic_encoder", "label": "FEC Encoder", "parameters": [{"id": "encoder", "label": "Constituent Encoder", "dtype": "raw", "default": "encoder_variable"}, {"id": "itype", "label": "Input Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "otype", "label": "Output Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "${ itype }"}], "outputs": [{"domain": "stream", "dtype": "${ otype }"}], "templates": {"imports": "from gnuradio import fec", "make": "fec.encoder(${encoder}, ${itype.size}, ${otype.size})"}, "documentation": "This is a GNU Radio adaptor for any FEC encoder following the generic_encoder API in the fec module. Input and output are flexible to accommodate encoders that, say, modulate their encoded results into complex or float types.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/fec_extended_async_encoder.block.yml": {"id": "fec_extended_async_encoder", "label": "FEC Extended Async Encoder", "parameters": [{"id": "encoder_list", "label": "Encoder Objects", "dtype": "raw", "default": "encoder_variable"}, {"id": "puncpat", "label": "Puncture Pattern", "dtype": "string", "default": "'11'"}], "inputs": [{"domain": "message", "id": "in", "optional": true}], "outputs": [{"domain": "message", "id": "out", "optional": true}], "templates": {"imports": "from gnuradio import fec", "make": "fec.extended_async_encoder(encoder_obj_list=${encoder_list}, puncpat=${puncpat})"}, "documentation": "", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/fec_extended_decoder.block.yml": {"id": "fec_extended_decoder", "label": "FEC Extended Decoder", "parameters": [{"id": "value", "label": "fake val", "dtype": "string", "default": "fec_extended_decoder", "hide": "all"}, {"id": "decoder_list", "label": "Decoder Objects", "dtype": "raw", "default": "decoder_variable"}, {"id": "threadtype", "label": "Threading Type", "dtype": "enum", "options": ["capillary", "ordinary", "none"], "option_attributes": {"arg": ["'capillary'", "'ordinary'", " None"]}}, {"id": "ann", "label": "Annihilator", "dtype": "raw", "default": "None"}, {"id": "puncpat", "label": "Puncture Pattern", "dtype": "string", "default": "'11'"}], "inputs": [{"domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import fec", "make": "fec.extended_decoder(decoder_obj_list=${decoder_list}, threading=${threadtype.arg}, ann=${ann}, puncpat=${puncpat}, integration_period=10000)"}, "documentation": "", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/fec_extended_encoder.block.yml": {"id": "fec_extended_encoder", "label": "FEC Extended Encoder", "parameters": [{"id": "encoder_list", "label": "Encoder Objects", "dtype": "raw", "default": "encoder_variable"}, {"id": "threadtype", "label": "Threading Type", "dtype": "enum", "options": ["capillary", "ordinary", "none"], "option_attributes": {"arg": ["'capillary'", "'ordinary'", " None"]}}, {"id": "puncpat", "label": "Puncture Pattern", "dtype": "string", "default": "'11'"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import fec", "make": "fec.extended_encoder(encoder_obj_list=${encoder_list}, threading=${threadtype.arg}, puncpat=${puncpat})"}, "documentation": "", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/fec_extended_tagged_decoder.block.yml": {"id": "fec_extended_tagged_decoder", "label": "FEC Extended Tagged Decoder", "parameters": [{"id": "value", "label": "fake val", "dtype": "string", "default": "fec_extended_decoder", "hide": "all"}, {"id": "decoder_list", "label": "Decoder Objects", "dtype": "raw", "default": "decoder_variable"}, {"id": "mtu", "label": "MTU (bytes)", "dtype": "int", "default": "1500"}, {"id": "ann", "label": "Annihilator", "dtype": "raw", "default": "None"}, {"id": "puncpat", "label": "Puncture Pattern", "dtype": "string", "default": "'11'"}, {"id": "lentagname", "label": "Length Tag Name", "dtype": "string", "default": "None"}], "inputs": [{"domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import fec", "make": "self.${id} = ${id} = fec.extended_tagged_decoder(decoder_obj_list=${decoder_list}, ann=${ann}, puncpat=${puncpat}, integration_period=10000, lentagname=${lentagname}, mtu=${mtu})"}, "documentation": "", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/fec_extended_tagged_encoder.block.yml": {"id": "fec_extended_tagged_encoder", "label": "FEC Extended Tagged Encoder", "parameters": [{"id": "encoder_list", "label": "Encoder Objects", "dtype": "raw", "default": "encoder_variable"}, {"id": "mtu", "label": "MTU (bytes)", "dtype": "int", "default": "1500"}, {"id": "puncpat", "label": "Puncture Pattern", "dtype": "string", "default": "'11'"}, {"id": "lentagname", "label": "Length Tag Name", "dtype": "string", "default": "None"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import fec", "make": "fec.extended_tagged_encoder(encoder_obj_list=${encoder_list}, puncpat=${puncpat}, lentagname=${lentagname}, mtu=${mtu})"}, "documentation": "", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/fec_puncture_xx.block.yml": {"id": "fec_puncture_xx", "label": "Puncture", "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["byte", "float"], "option_attributes": {"fcn": ["bb", "ff"]}, "hide": "part"}, {"id": "puncsize", "label": "Puncture Size", "dtype": "int"}, {"id": "puncpat", "label": "Puncture Pattern", "dtype": "int"}, {"id": "delay", "label": "Delay", "dtype": "int", "default": "0"}], "inputs": [{"domain": "stream", "dtype": "${ type }"}], "outputs": [{"domain": "stream", "dtype": "${ type }"}], "templates": {"imports": "from gnuradio import fec", "make": "fec.puncture_${type.fcn}(${puncsize}, ${puncpat}, ${delay})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/fec_tagged_decoder.block.yml": {"id": "fec_tagged_decoder", "label": "FEC Tagged Decoder", "parameters": [{"id": "decoder", "label": "Constituent Decoder", "dtype": "raw", "default": "decoder_variable"}, {"id": "mtu", "label": "MTU (bytes)", "dtype": "int", "default": "1500"}, {"id": "itype", "label": "Input Type", "dtype": "enum", "options": ["byte", "float"], "option_attributes": {"size": ["gr.sizeof_char", "gr.sizeof_float"]}, "hide": "part"}, {"id": "otype", "label": "Output Type", "dtype": "enum", "options": ["byte", "float"], "option_attributes": {"size": ["gr.sizeof_char", "gr.sizeof_float"]}, "hide": "part"}, {"id": "lentagname", "label": "Length Tag Name", "dtype": "string", "default": "\"pkt_len\""}], "inputs": [{"domain": "stream", "dtype": "${ itype }"}], "outputs": [{"domain": "stream", "dtype": "${ otype }"}], "templates": {"imports": "from gnuradio import fec", "make": "fec.tagged_decoder(${decoder}, ${itype.size}, ${otype.size},  ${lentagname}, ${mtu})"}, "documentation": "", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/fec_tagged_encoder.block.yml": {"id": "fec_tagged_encoder", "label": "FEC Tagged Encoder", "parameters": [{"id": "encoder", "label": "Constituent Encoder", "dtype": "raw", "default": "encoder_variable"}, {"id": "mtu", "label": "MTU (bytes)", "dtype": "int", "default": "1500"}, {"id": "itype", "label": "Input Type", "dtype": "enum", "options": ["byte", "float"], "option_attributes": {"size": ["gr.sizeof_char", "gr.sizeof_float"]}, "hide": "part"}, {"id": "otype", "label": "Output Type", "dtype": "enum", "options": ["byte", "float"], "option_attributes": {"size": ["gr.sizeof_char", "gr.sizeof_float"]}, "hide": "part"}, {"id": "lentagname", "label": "Length Tag Name", "dtype": "string", "default": "\"pkt_len\""}], "inputs": [{"domain": "stream", "dtype": "${ itype }"}], "outputs": [{"domain": "stream", "dtype": "${ otype }"}], "templates": {"imports": "from gnuradio import fec", "make": "fec.tagged_encoder(${encoder}, ${itype.size}, ${otype.size}, ${lentagname}, ${mtu})"}, "documentation": "", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/fft.tree.yml": {"[Core]": [{"Fourier Analysis": ["fft_vxx", "goertzel_fc", "logpwrfft_x"]}, {"Control Port": ["fft_ctrlport_probe_psd"]}]}, "/usr/local/share/gnuradio/grc/blocks/fft_ctrlport_probe_psd.block.yml": {"id": "fft_ctrlport_probe_psd", "label": "Ctrlport Probe PSD", "parameters": [{"id": "name", "label": "Name", "dtype": "string", "default": "psd"}, {"id": "desc", "label": "Description", "dtype": "string", "default": "PSD Plot"}, {"id": "len", "label": "Length", "dtype": "int", "default": "1024"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import fft", "make": "fft.ctrlport_probe_psd(${name}, ${desc}, ${len})", "callbacks": ["set_length(${len})"]}, "documentation": "Place this in a graph to export PSD values to a GRCP port probe.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/fft_fft_vxx.block.yml": {"id": "fft_vxx", "label": "FFT", "parameters": [{"id": "type", "label": "Input Type", "dtype": "enum", "options": ["complex", "float"], "hide": "part"}, {"id": "fft_size", "label": "FFT Size", "dtype": "int", "default": "1024"}, {"id": "forward", "label": "Forward/Reverse", "dtype": "enum", "options": ["True", "False"], "option_labels": ["Forward", "Reverse"]}, {"id": "window", "label": "Window", "dtype": "real_vector", "default": "window.blackmanharris(1024)"}, {"id": "shift", "label": "Shift", "dtype": "enum", "options": ["True", "False"], "option_labels": ["Yes", "No"], "hide": "${ 'all' if type == 'float' else 'none' }"}, {"id": "nthreads", "label": "Num. Threads", "dtype": "int", "default": "1"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ fft_size }"}], "outputs": [{"domain": "stream", "dtype": "complex", "vlen": "${ fft_size }"}], "templates": {"imports": "from gnuradio import fft\nfrom gnuradio.fft import window", "make": "% if type == \"complex\":\nfft.fft_vcc(${fft_size}, ${forward}, ${window}, ${shift}, ${nthreads})\n% else:\nfft.fft_vfc(${fft_size}, ${forward}, ${window}, ${nthreads})\n% endif", "callbacks": ["set_nthreads(${nthreads})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/fft_goertzel_fc.block.yml": {"id": "goertzel_fc", "label": "Goertzel", "parameters": [{"id": "rate", "label": "Rate", "dtype": "int"}, {"id": "len", "label": "Length", "dtype": "int"}, {"id": "freq", "label": "Frequency", "dtype": "real"}], "inputs": [{"domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import fft", "make": "fft.goertzel_fc(${rate}, ${len}, ${freq})", "callbacks": ["set_freq(${freq})", "set_rate(${rate})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/fft_logpwrfft_x.block.yml": {"id": "logpwrfft_x", "label": "Log Power FFT", "parameters": [{"id": "type", "label": "Input Type", "dtype": "enum", "options": ["complex", "float"], "option_attributes": {"fcn": ["c", "f"]}, "hide": "part"}, {"id": "sample_rate", "label": "Sample Rate", "dtype": "real", "default": "samp_rate"}, {"id": "fft_size", "label": "FFT Size", "dtype": "int", "default": "1024", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "ref_scale", "label": "Reference Scale", "dtype": "real", "default": "2"}, {"id": "frame_rate", "label": "Frame Rate", "dtype": "real", "default": "30"}, {"id": "average", "label": "Average", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["On", "Off"]}, {"id": "avg_alpha", "label": "Average Alpha", "dtype": "real", "default": "1.0"}], "inputs": [{"domain": "stream", "dtype": "${ type }"}], "outputs": [{"domain": "stream", "dtype": "float", "vlen": "${ fft_size }"}], "templates": {"imports": "from gnuradio.fft import logpwrfft", "make": "logpwrfft.logpwrfft_${type.fcn}(\n    sample_rate=${sample_rate},\n    fft_size=${fft_size},\n    ref_scale=${ref_scale},\n    frame_rate=${frame_rate},\n    avg_alpha=${avg_alpha},\n    average=${average})", "callbacks": ["set_sample_rate(${sample_rate})", "set_avg_alpha(${avg_alpha})", "set_average(${average})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/filter.tree.yml": {"[Core]": [{"Filters": ["variable_low_pass_filter_taps", "variable_high_pass_filter_taps", "variable_band_pass_filter_taps", "variable_band_reject_filter_taps", "variable_rrc_filter_taps", "low_pass_filter", "high_pass_filter", "band_pass_filter", "band_reject_filter", "root_raised_cosine_filter", "dc_blocker_xx", "fft_filter_xxx", "fir_filter_xxx", "filterbank_vcvcf", "filter_delay_fc", "hilbert_fc", "iir_filter_xxx", "interp_fir_filter_xxx", "single_pole_iir_filter_xx"]}, {"Resamplers": ["mmse_resampler_xx", "mmse_interpolator_xx", "pfb_arb_resampler_xxx", "rational_resampler_xxx", "rational_resampler_base_xxx"]}, {"Channelizers": ["freq_xlating_fft_filter_ccc", "freq_xlating_fir_filter_xxx", "pfb_channelizer_ccf", "pfb_channelizer_hier_ccf", "pfb_decimator_ccf", "pfb_interpolator_ccf", "pfb_synthesizer_ccf"]}]}, "/usr/local/share/gnuradio/grc/blocks/filter_band_pass_filter.block.yml": {"id": "band_pass_filter", "label": "Band Pass Filter", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "FIR Type", "dtype": "enum", "options": ["fir_filter_ccf", "interp_fir_filter_ccf", "fir_filter_fff", "interp_fir_filter_fff", "fir_filter_ccc", "interp_fir_filter_ccc", "fir_filter_fcc", "interp_fir_filter_fcc"], "option_labels": ["Complex->Complex (Real Taps) (Decim)", "Complex->Complex (Real Taps) (Interp)", "Float->Float (Real Taps) (Decim)", "Float->Float (Real Taps) (Interp)", "Complex->Complex (Complex Taps) (Decim)", "Complex->Complex (Complex Taps) (Interp)", "Float->Complex (Complex Taps) (Decim)", "Float->Complex (Complex Taps) (Interp)"], "option_attributes": {"fcn": ["band_pass", "band_pass", "band_pass", "band_pass", "complex_band_pass", "complex_band_pass", "complex_band_pass", "complex_band_pass"], "input": ["complex", "complex", "float", "float", "complex", "complex", "float", "float"], "output": ["complex", "complex", "float", "float", "complex", "complex", "complex", "complex"]}, "hide": "part"}, {"id": "decim", "label": "Decimation", "dtype": "int", "default": "1", "hide": "${ ('all' if str(type).startswith('interp') else 'none') }"}, {"id": "interp", "label": "Interpolation", "dtype": "int", "default": "1", "hide": "${ ('none' if str(type).startswith('interp') else 'all') }"}, {"id": "gain", "label": "Gain", "dtype": "real", "default": "1"}, {"id": "samp_rate", "label": "Sample Rate", "dtype": "real", "default": "samp_rate"}, {"id": "low_cutoff_freq", "label": "Low Cutoff Freq", "dtype": "real"}, {"id": "high_cutoff_freq", "label": "High Cutoff Freq", "dtype": "real"}, {"id": "width", "label": "Transition Width", "dtype": "real"}, {"id": "win", "label": "Window", "dtype": "int", "default": "firdes.WIN_HAMMING", "options": ["firdes.WIN_HAMMING", "firdes.WIN_HANN", "firdes.WIN_BLACKMAN", "firdes.WIN_RECTANGULAR", "firdes.WIN_KAISER"], "option_labels": ["Hamming", "Hann", "Blackman", "Rectangular", "Kaiser"]}, {"id": "beta", "label": "Beta", "dtype": "real", "default": "6.76"}], "inputs": [{"domain": "stream", "dtype": "${ type.input }"}], "outputs": [{"domain": "stream", "dtype": "${ type.output }"}], "templates": {"imports": "from gnuradio import filter\nfrom gnuradio.filter import firdes", "make": "filter.${type}(\n    ${ interp if str(type).startswith('interp') else decim },\n    firdes.${type.fcn}(\n        ${gain},\n        ${samp_rate},\n        ${low_cutoff_freq},\n        ${high_cutoff_freq},\n        ${width},\n        ${win},\n        ${beta}))", "callbacks": ["set_taps(firdes.${type.fcn}(${gain}, ${samp_rate}, ${low_cutoff_freq}, ${high_cutoff_freq}, ${width}, ${win}, ${beta}))"]}, "cpp_templates": {"includes": ["#include <gnuradio/filter/firdes.h>"], "declarations": "filter::firdes::sptr ${id};", "make": "this->${id} = filter::${type}::make(\n    ${ interp if str(type).startswith('interp') else decim },\n    firdes.${type.fcn}(\n        ${gain},\n        ${samp_rate},\n        ${low_cutoff_freq},\n        ${high_cutoff_freq},\n        ${width},\n        ${win},\n        ${beta}));", "link": ["gnuradio-filter"], "callbacks": ["set_taps(firdes::${type.fcn}(${gain}, ${samp_rate}, ${low_cutoff_freq}, ${high_cutoff_freq}, ${width}, ${win}, ${beta}))"]}, "documentation": "This filter is a convenience wrapper for an fir filter and a firdes taps generating function.\n\nSample rate, cutoff frequency, and transition width are in Hertz.\n\nThe beta parameter only applies to the Kaiser window.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/filter_band_reject_filter.block.yml": {"id": "band_reject_filter", "label": "Band Reject Filter", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "FIR Type", "dtype": "enum", "options": ["fir_filter_ccf", "interp_fir_filter_ccf", "fir_filter_fff", "interp_fir_filter_fff"], "option_labels": ["Complex->Complex (Decimating)", "Complex->Complex (Interpolating)", "Float->Float (Decimating)", "Float->Float (Interpolating)"], "option_attributes": {"input": ["complex", "complex", "float", "float"], "output": ["complex", "complex", "float", "float"]}, "hide": "part"}, {"id": "decim", "label": "Decimation", "dtype": "int", "default": "1", "hide": "${ ('all' if str(type).startswith('interp') else 'none') }"}, {"id": "interp", "label": "Interpolation", "dtype": "int", "default": "1", "hide": "${ ('none' if str(type).startswith('interp') else 'all') }"}, {"id": "gain", "label": "Gain", "dtype": "real", "default": "1"}, {"id": "samp_rate", "label": "Sample Rate", "dtype": "real", "default": "samp_rate"}, {"id": "low_cutoff_freq", "label": "Low Cutoff Freq", "dtype": "real"}, {"id": "high_cutoff_freq", "label": "High Cutoff Freq", "dtype": "real"}, {"id": "width", "label": "Transition Width", "dtype": "real"}, {"id": "win", "label": "Window", "dtype": "int", "default": "firdes.WIN_HAMMING", "options": ["firdes.WIN_HAMMING", "firdes.WIN_HANN", "firdes.WIN_BLACKMAN", "firdes.WIN_RECTANGULAR", "firdes.WIN_KAISER"], "option_labels": ["Hamming", "Hann", "Blackman", "Rectangular", "Kaiser"]}, {"id": "beta", "label": "Beta", "dtype": "real", "default": "6.76"}], "inputs": [{"domain": "stream", "dtype": "${ type.input }"}], "outputs": [{"domain": "stream", "dtype": "${ type.output }"}], "templates": {"imports": "from gnuradio import filter\nfrom gnuradio.filter import firdes", "make": "filter.${type}(\n    ${ interp if str(type).startswith('interp') else decim },\n    firdes.band_reject(\n        ${gain},\n        ${samp_rate},\n        ${low_cutoff_freq},\n        ${high_cutoff_freq},\n        ${width},\n        ${win},\n        ${beta}))", "callbacks": ["set_taps(firdes.band_reject(${gain}, ${samp_rate}, ${low_cutoff_freq}, ${high_cutoff_freq}, ${width}, ${win}, ${beta}))"]}, "cpp_templates": {"includes": ["#include <gnuradio/filter/firdes.h>"], "declarations": "filter::firdes::sptr ${id};", "make": "this->${id} = filter::${type}::make(\n    ${ interp if str(type).startswith('interp') else decim },\n    firdes.band_reject(\n        ${gain},\n        ${samp_rate},\n        ${low_cutoff_freq},\n        ${high_cutoff_freq},\n        ${width},\n        ${win},\n        ${beta}));", "link": ["gnuradio-filter"], "callbacks": ["set_taps(firdes::band_reject(${gain}, ${samp_rate}, ${low_cutoff_freq}, ${high_cutoff_freq}, ${width}, ${win}, ${beta}))"]}, "documentation": "This filter is a convenience wrapper for an fir filter and a firdes taps generating function.\n\nSample rate, cutoff frequency, and transition width are in Hertz.\n\nThe beta parameter only applies to the Kaiser window.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/filter_dc_blocker_xx.block.yml": {"id": "dc_blocker_xx", "label": "DC Blocker", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["cc", "ff"], "option_labels": ["Complex->Complex", "Float->Float"], "option_attributes": {"input": ["complex", "float"], "output": ["complex", "float"]}, "hide": "part"}, {"id": "length", "label": "Length", "dtype": "int", "default": "32"}, {"id": "long_form", "label": "Long Form", "dtype": "bool", "default": "True"}], "inputs": [{"domain": "stream", "dtype": "${ type.input }"}], "outputs": [{"domain": "stream", "dtype": "${ type.output }"}], "templates": {"imports": "from gnuradio import filter", "make": "filter.dc_blocker_${type}(${length}, ${long_form})"}, "cpp_templates": {"includes": ["#include <gnuradio/filter/dc_blocker_${type}.h>"], "declarations": "filter::dc_blocker_${type}::sptr ${id};", "make": "this->${id} = filter::dc_blocker_${type}::make(${length}, ${long_form});", "link": ["gnuradio-filter"], "translations": {"True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/filter_fft_filter_xxx.block.yml": {"id": "fft_filter_xxx", "label": "FFT Filter", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["ccc", "ccf", "fff"], "option_labels": ["Complex->Complex (Complex Taps)", "Complex->Complex (Real Taps)", "Float->Float (Real Taps)"], "option_attributes": {"input": ["complex", "complex", "float"], "output": ["complex", "complex", "float"], "taps": ["complex_vector", "float_vector", "float_vector"]}, "hide": "part"}, {"id": "decim", "label": "Decimation", "dtype": "int", "default": "1"}, {"id": "taps", "label": "Taps", "dtype": "${ type.taps }"}, {"id": "samp_delay", "label": "Sample Delay", "dtype": "int", "default": "0", "hide": "part"}, {"id": "nthreads", "label": "Num. Threads", "dtype": "int", "default": "1"}], "inputs": [{"domain": "stream", "dtype": "${ type.input }"}], "outputs": [{"domain": "stream", "dtype": "${ type.output }"}], "templates": {"imports": "from gnuradio import filter\nfrom gnuradio.filter import firdes", "make": "filter.fft_filter_${type}(${decim}, ${taps}, ${nthreads})\nself.${id}.declare_sample_delay(${samp_delay})", "callbacks": ["set_taps(${taps})", "set_nthreads(${nthreads})"]}, "cpp_templates": {"includes": ["#include <gnuradio/filter/fft_filter_${type}.h>"], "declarations": "filter::fft_filter_${type}::sptr ${id};", "make": "% if str(type.taps) == \"complex_vector\":\nstd::vector<gr_complex> taps = {${str(taps)[1:-1]}};\n% else:\nstd::vector<float> taps = {${str(taps)[1:-1]}};\n% endif\nthis->${id} = filter::fft_filter_${type}::make(\n    ${decim}, \n    taps,\n    ${nthreads});\nthis->${id}.declare_sample_delay(${samp_delay});", "link": ["gnuradio-filter"], "callbacks": ["set_taps(taps)", "set_nthreads(${nthreads})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/filter_filter_delay_fc.block.yml": {"id": "filter_delay_fc", "label": "Filter Delay", "flags": ["python", "cpp"], "parameters": [{"id": "taps", "label": "Taps", "dtype": "real_vector"}], "inputs": [{"domain": "stream", "dtype": "float"}, {"domain": "stream", "dtype": "float", "optional": true}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import filter\nfrom gnuradio.filter import firdes", "make": "filter.filter_delay_fc(${taps})"}, "cpp_templates": {"includes": ["#include <gnuradio/filter/filter_delay_fc.h>"], "declarations": "filter::filter_delay_fc::sptr ${id};", "make": "std::vector<float> taps = {${str(taps)[1:-1]}};\nthis->${id} = filter::fft_filter_${type}::make(\n    taps);", "link": ["gnuradio-filter"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/filter_filterbank_vcvcf.block.yml": {"id": "filterbank_vcvcf", "label": "Generic Filterbank", "flags": ["python", "cpp"], "parameters": [{"id": "taps", "label": "Taps(list of lists)", "dtype": "raw", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "complex", "vlen": "${ len(taps) }"}], "outputs": [{"domain": "stream", "dtype": "complex", "vlen": "${ len(taps) }"}], "templates": {"imports": "from gnuradio import filter", "make": "filter.filterbank_vcvcf(${taps})", "callbacks": ["set_taps(${taps})"]}, "cpp_templates": {"includes": ["#include <gnuradio/filter/filterbank_vcvcf.h>"], "declarations": "filter::filterbank_vcvcf::sptr ${id};", "make": "this->${id} = filter::filterbank_vcvcf::make( \n    ${taps});", "link": ["gnuradio-filter"], "callbacks": ["set_taps(${taps})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/filter_fir_filter_xxx.block.yml": {"id": "fir_filter_xxx", "label": "Decimating FIR Filter", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["ccc", "ccf", "fcc", "fff", "fsf", "scc"], "option_labels": ["Complex->Complex (Complex Taps)", "Complex->Complex (Real Taps)", "Float->Complex (Complex Taps)", "Float->Float (Real Taps)", "Float->Short (Real Taps)", "Short->Complex (Complex Taps)"], "option_attributes": {"input": ["complex", "complex", "float", "float", "float", "short"], "output": ["complex", "complex", "complex", "float", "short", "complex"], "taps": ["complex_vector", "real_vector", "complex_vector", "real_vector", "real_vector", "complex_vector"]}, "hide": "part"}, {"id": "decim", "label": "Decimation", "dtype": "int", "default": "1"}, {"id": "taps", "label": "Taps", "dtype": "${ type.taps }"}, {"id": "samp_delay", "label": "Sample Delay", "dtype": "int", "default": "0", "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "${ type.input }"}], "outputs": [{"domain": "stream", "dtype": "${ type.output }"}], "templates": {"imports": "from gnuradio import filter\nfrom gnuradio.filter import firdes", "make": "filter.fir_filter_${type}(${decim}, ${taps})\nself.${id}.declare_sample_delay(${samp_delay})", "callbacks": ["set_taps(${taps})"]}, "cpp_templates": {"includes": ["#include <gnuradio/filter/fir_filter_${type}.h>"], "declarations": "filter::fir_filter_${type}::sptr ${id};", "make": "% if str(type.taps) == \"complex_vector\":\nstd::vector<gr_complex> taps = {${str(taps)[1:-1]}};\n% else:\nstd::vector<float> taps = {${str(taps)[1:-1]}};\n% endif\nthis->${id} = filter::fir_filter_${type}::make(\n    ${decim}, \n    taps);\nthis->${id}.declare_sample_delay(${samp_delay});", "link": ["gnuradio-filter"], "callbacks": ["set_taps(taps)"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/filter_freq_xlating_fft_filter_ccc.block.yml": {"id": "freq_xlating_fft_filter_ccc", "label": "Frequency Xlating FFT Filter", "flags": ["python"], "parameters": [{"id": "decim", "label": "Decimation", "dtype": "int", "default": "1"}, {"id": "taps", "label": "Taps", "dtype": "complex_vector"}, {"id": "center_freq", "label": "Center Frequency", "dtype": "real", "default": "0"}, {"id": "samp_rate", "label": "Sample Rate", "dtype": "real", "default": "samp_rate"}, {"id": "samp_delay", "label": "Sample Delay", "dtype": "int", "default": "0", "hide": "part"}, {"id": "nthreads", "label": "Num. Threads", "dtype": "int", "default": "1"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import filter\nfrom gnuradio.filter import firdes", "make": "filter.freq_xlating_fft_filter_ccc(${decim}, ${taps}, ${center_freq}, ${samp_rate})\nself.${id}.set_nthreads(${nthreads})\nself.${id}.declare_sample_delay(${samp_delay})", "callbacks": ["set_taps(${taps})", "set_center_freq(${center_freq})", "set_nthreads(${nthreads})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/filter_freq_xlating_fir_filter_xxx.block.yml": {"id": "freq_xlating_fir_filter_xxx", "label": "Frequency Xlating FIR Filter", "flags": ["python"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["ccc", "ccf", "fcc", "fcf", "scc", "scf"], "option_labels": ["Complex->Complex (Complex Taps)", "Complex->Complex (Real Taps)", "Float->Complex (Complex Taps)", "Float->Complex (Real Taps)", "Short->Complex (Complex Taps)", "Short->Complex (Real Taps)"], "option_attributes": {"input": ["complex", "complex", "float", "float", "short", "short"], "output": ["complex", "complex", "complex", "complex", "complex", "complex"], "taps": ["complex_vector", "real_vector", "complex_vector", "real_vector", "complex_vector", "real_vector"]}, "hide": "part"}, {"id": "decim", "label": "Decimation", "dtype": "int", "default": "1"}, {"id": "taps", "label": "Taps", "dtype": "${ type.taps }"}, {"id": "center_freq", "label": "Center Frequency", "dtype": "real", "default": "0"}, {"id": "samp_rate", "label": "Sample Rate", "dtype": "real", "default": "samp_rate"}], "inputs": [{"domain": "stream", "dtype": "${ type.input }"}, {"domain": "message", "id": "freq", "optional": true}], "outputs": [{"domain": "stream", "dtype": "${ type.output }"}], "templates": {"imports": "from gnuradio import filter\nfrom gnuradio.filter import firdes", "make": "filter.freq_xlating_fir_filter_${type}(${decim}, ${taps}, ${center_freq}, ${samp_rate})", "callbacks": ["set_taps(${taps})", "set_center_freq(${center_freq})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/filter_high_pass_filter.block.yml": {"id": "high_pass_filter", "label": "High Pass Filter", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "FIR Type", "dtype": "enum", "options": ["fir_filter_ccf", "interp_fir_filter_ccf", "fir_filter_fff", "interp_fir_filter_fff"], "option_labels": ["Complex->Complex (Decimating)", "Complex->Complex (Interpolating)", "Float->Float (Decimating)", "Float->Float (Interpolating)"], "option_attributes": {"input": ["complex", "complex", "float", "float"], "output": ["complex", "complex", "float", "float"]}, "hide": "part"}, {"id": "decim", "label": "Decimation", "dtype": "int", "default": "1", "hide": "${ ('all' if str(type).startswith('interp') else 'none') }"}, {"id": "interp", "label": "Interpolation", "dtype": "int", "default": "1", "hide": "${ ('none' if str(type).startswith('interp') else 'all') }"}, {"id": "gain", "label": "Gain", "dtype": "real", "default": "1"}, {"id": "samp_rate", "label": "Sample Rate", "dtype": "real", "default": "samp_rate"}, {"id": "cutoff_freq", "label": "Cutoff Freq", "dtype": "real"}, {"id": "width", "label": "Transition Width", "dtype": "real"}, {"id": "win", "label": "Window", "dtype": "int", "default": "firdes.WIN_HAMMING", "options": ["firdes.WIN_HAMMING", "firdes.WIN_HANN", "firdes.WIN_BLACKMAN", "firdes.WIN_RECTANGULAR", "firdes.WIN_KAISER"], "option_labels": ["Hamming", "Hann", "Blackman", "Rectangular", "Kaiser"]}, {"id": "beta", "label": "Beta", "dtype": "real", "default": "6.76"}], "inputs": [{"domain": "stream", "dtype": "${ type.input }"}], "outputs": [{"domain": "stream", "dtype": "${ type.output }"}], "templates": {"imports": "from gnuradio import filter\nfrom gnuradio.filter import firdes", "make": "filter.${type}(\n    ${ interp if str(type).startswith('interp') else decim },\n    firdes.high_pass(\n        ${gain},\n        ${samp_rate},\n        ${cutoff_freq},\n        ${width},\n        ${win},\n        ${beta}))", "callbacks": ["set_taps(firdes.high_pass(${gain}, ${samp_rate}, ${cutoff_freq}, ${width}, ${win}, ${beta}))"]}, "cpp_templates": {"includes": ["#include <gnuradio/filter/firdes.h>"], "declarations": "filter::firdes::sptr ${id};", "make": "this->${id} = filter::${type}::make(\n    ${ interp if str(type).startswith('interp') else decim },\n    firdes.high_pass(\n        ${gain},\n        ${samp_rate},\n        ${cutoff_freq},\n        ${width},\n        ${win},\n        ${beta}));", "link": ["gnuradio-filter"], "callbacks": ["set_taps(firdes::high_pass(${gain}, ${samp_rate}, ${cutoff_freq}, ${width}, ${win}, ${beta}))"]}, "documentation": "This filter is a convenience wrapper for an fir filter and a firdes taps generating function.\n\nSample rate, cutoff frequency, and transition width are in Hertz.\n\nThe beta parameter only applies to the Kaiser window.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/filter_hilbert_fc.block.yml": {"id": "hilbert_fc", "label": "Hilbert", "flags": ["python", "cpp"], "parameters": [{"id": "num_taps", "label": "Num Taps", "dtype": "int", "default": "65"}, {"id": "win", "label": "Window", "dtype": "int", "default": "firdes.WIN_HAMMING", "options": ["firdes.WIN_HAMMING", "firdes.WIN_HANN", "firdes.WIN_BLACKMAN", "firdes.WIN_BLACKMAN_hARRIS", "firdes.WIN_RECTANGULAR", "firdes.WIN_KAISER"], "option_labels": ["Hamming", "Hann", "Blackman", "Blackman-harris", "Rectangular", "Kaiser"], "hide": "part"}, {"id": "beta", "label": "Beta", "dtype": "real", "default": "6.76", "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import filter", "make": "filter.hilbert_fc(${num_taps}, ${win}, ${beta})"}, "cpp_templates": {"includes": ["#include <gnuradio/filter/hilbert_fc.h>"], "declarations": "filter::hilbert_fc::sptr ${id};", "make": "this->${id} = filter::hilbert_fc::make(\n    ${num_taps},\n    ${win},\n    ${beta});", "link": ["gnuradio-filter"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/filter_iir_filter_xxx.block.yml": {"id": "iir_filter_xxx", "label": "IIR Filter", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["ffd", "ccf", "ccd", "ccc", "ccz"], "option_labels": ["Float->Float (Double Taps)", "Complex->Complex (Float Taps)", "Complex->Complex (Double Taps)", "Complex->Complex (Complex Taps)", "Complex->Complex (Complex Double Taps)"], "option_attributes": {"input": ["float", "complex", "complex", "complex", "complex"], "output": ["float", "complex", "complex", "complex", "complex"], "taps": ["real_vector", "real_vector", "real_vector", "complex_vector", "complex_vector"]}, "hide": "part"}, {"id": "fftaps", "label": "Feed-forward Taps", "dtype": "${ type.taps }"}, {"id": "fbtaps", "label": "Feedback Taps", "dtype": "${ type.taps }"}, {"id": "oldstyle", "label": "Old Style of Taps", "dtype": "enum", "default": "True", "options": ["True", "False"], "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "${ type.input }"}], "outputs": [{"domain": "stream", "dtype": "${ type.output }"}], "templates": {"imports": "from gnuradio import filter", "make": "filter.iir_filter_${type}(${fftaps}, ${fbtaps}, ${oldstyle})", "callbacks": ["set_taps(${fftaps}, ${fbtaps})"]}, "cpp_templates": {"includes": ["#include <gnuradio/filter/iir_filter_${type}.h>"], "declarations": "filter::firdes::sptr ${id};", "make": "% if str(type.taps) == \"complex_vector\":\nstd::vector<gr_complex> fftaps = {${str(fftaps)[1:-1]}};\nstd::vector<gr_complex> fbtaps = {${str(fbtaps)[1:-1]}};\n% else:\nstd::vector<float> fftaps = {${str(fftaps)[1:-1]}};\nstd::vector<float> fbtaps = {${str(fbtaps)[1:-1]}};\n% endif\nthis->${id} = filter::iir_filter_${type}::make(\n    fftaps,\n    fbtaps,\n    ${oldstyle});", "link": ["gnuradio-filter"], "callbacks": ["set_taps(fftaps, fbtaps)"], "translations": {"True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/filter_interp_fir_filter_xxx.block.yml": {"id": "interp_fir_filter_xxx", "label": "Interpolating FIR Filter", "flags": ["python"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["ccc", "ccf", "fcc", "fff", "fsf", "scc"], "option_labels": ["Complex->Complex (Complex Taps)", "Complex->Complex (Real Taps)", "Float->Complex (Complex Taps)", "Float->Float (Real Taps)", "Float->Short (Real Taps)", "Short->Complex (Complex Taps)"], "option_attributes": {"input": ["complex", "complex", "float", "float", "float", "short"], "output": ["complex", "complex", "complex", "float", "short", "complex"], "taps": ["complex_vector", "real_vector", "complex_vector", "real_vector", "real_vector", "complex_vector"]}, "hide": "part"}, {"id": "interp", "label": "Interpolation", "dtype": "int", "default": "1"}, {"id": "taps", "label": "Taps", "dtype": "${ type.taps }"}, {"id": "samp_delay", "label": "Sample Delay", "dtype": "int", "default": "0", "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "${ type.input }"}], "outputs": [{"domain": "stream", "dtype": "${ type.output }"}], "templates": {"imports": "from gnuradio import filter\nfrom gnuradio.filter import firdes", "make": "filter.interp_fir_filter_${type}(${interp}, ${taps})\nself.${id}.declare_sample_delay(${samp_delay})", "callbacks": ["set_taps(${taps})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/filter_low_pass_filter.block.yml": {"id": "low_pass_filter", "label": "Low Pass Filter", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "FIR Type", "dtype": "enum", "options": ["fir_filter_ccf", "interp_fir_filter_ccf", "fir_filter_fff", "interp_fir_filter_fff"], "option_labels": ["Complex->Complex (Decimating)", "Complex->Complex (Interpolating)", "Float->Float (Decimating)", "Float->Float (Interpolating)"], "option_attributes": {"input": ["complex", "complex", "float", "float"], "output": ["complex", "complex", "float", "float"]}, "hide": "part"}, {"id": "decim", "label": "Decimation", "dtype": "int", "default": "1", "hide": "${ ('all' if str(type).startswith('interp') else 'none') }"}, {"id": "interp", "label": "Interpolation", "dtype": "int", "default": "1", "hide": "${ ('none' if str(type).startswith('interp') else 'all') }"}, {"id": "gain", "label": "Gain", "dtype": "real", "default": "1"}, {"id": "samp_rate", "label": "Sample Rate", "dtype": "real", "default": "samp_rate"}, {"id": "cutoff_freq", "label": "Cutoff Freq", "dtype": "real"}, {"id": "width", "label": "Transition Width", "dtype": "real"}, {"id": "win", "label": "Window", "dtype": "int", "default": "firdes.WIN_HAMMING", "options": ["firdes.WIN_HAMMING", "firdes.WIN_HANN", "firdes.WIN_BLACKMAN", "firdes.WIN_RECTANGULAR", "firdes.WIN_KAISER"], "option_labels": ["Hamming", "Hann", "Blackman", "Rectangular", "Kaiser"]}, {"id": "beta", "label": "Beta", "dtype": "real", "default": "6.76"}], "inputs": [{"domain": "stream", "dtype": "${ type.input }"}], "outputs": [{"domain": "stream", "dtype": "${ type.output }"}], "templates": {"imports": "from gnuradio import filter\nfrom gnuradio.filter import firdes", "make": "filter.${type}(\n    ${ interp if str(type).startswith('interp') else decim },\n    firdes.low_pass(\n        ${gain},\n        ${samp_rate},\n        ${cutoff_freq},\n        ${width},\n        ${win},\n        ${beta}))", "callbacks": ["set_taps(firdes.low_pass(${gain}, ${samp_rate}, ${cutoff_freq}, ${width}, ${win}, ${beta}))"]}, "cpp_templates": {"includes": ["#include <gnuradio/filter/firdes.h>"], "declarations": "filter::firdes::sptr ${id};", "make": "this->${id} = filter::${type}::make(\n    ${ interp if str(type).startswith('interp') else decim },\n    firdes.low_pass(\n        ${gain},\n        ${samp_rate},\n        ${cutoff_freq},\n        ${width},\n        ${win},\n        ${beta}));", "link": ["gnuradio-filter"], "callbacks": ["set_taps(firdes::low_pass(${gain}, ${samp_rate}, ${cutoff_freq}, ${width}, ${win}, ${beta}))"]}, "documentation": "This filter is a convenience wrapper for an fir filter and a firdes taps generating function.\n\nSample rate, cutoff frequency, and transition width are in Hertz.\n\nThe beta parameter only applies to the Kaiser window.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/filter_mmse_interpolator_xx.block.yml": {"id": "mmse_interpolator_xx", "label": "Fractional Interpolator", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["complex", "float"], "option_attributes": {"fcn": ["cc", "ff"]}, "hide": "part"}, {"id": "phase_shift", "label": "Phase Shift", "dtype": "real"}, {"id": "interp_ratio", "label": "Interpolation Ratio", "dtype": "real"}], "inputs": [{"domain": "stream", "dtype": "${ type }"}], "outputs": [{"domain": "stream", "dtype": "${ type }"}], "templates": {"imports": "from gnuradio import filter", "make": "filter.mmse_interpolator_${type.fcn}(${phase_shift}, ${interp_ratio})", "callbacks": ["set_interp_ratio(${interp_ratio})"]}, "cpp_templates": {"includes": ["#include <gnuradio/filter/mmse_interpolator_${type.fcn}.h>"], "declarations": "filter::mmse_interpolator_${type.fcn}::sptr ${id};", "make": "this->${id} = filter::mmse_interpolator_${type.fcn}::make(\n    ${phase_shift},\n    ${interp_ratio});", "link": ["gnuradio-filter"], "callbacks": ["set_interp_ratio(${interp_ratio})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/filter_mmse_resampler_xx.block.yml": {"id": "mmse_resampler_xx", "label": "Fractional Resampler", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["complex", "float"], "option_attributes": {"fcn": ["cc", "ff"]}, "hide": "part"}, {"id": "phase_shift", "label": "Phase Shift", "dtype": "real"}, {"id": "resamp_ratio", "label": "Resampling Ratio", "dtype": "real"}], "inputs": [{"domain": "stream", "dtype": "${ type }"}, {"label": "rate", "domain": "stream", "dtype": "float", "optional": true}, {"domain": "message", "id": "msg_in", "optional": true}], "outputs": [{"domain": "stream", "dtype": "${ type }"}], "templates": {"imports": "from gnuradio import filter", "make": "filter.mmse_resampler_${type.fcn}(${phase_shift}, ${resamp_ratio})", "callbacks": ["set_resamp_ratio(${resamp_ratio})"]}, "cpp_templates": {"includes": ["#include <gnuradio/filter/mmse_resampler_${type.fcn}.h>"], "declarations": "filter::mmse_resampler_${type.fcn}::sptr ${id};", "make": "this->${id} = filter::mmse_resampler_${type.fcn}::make(\n    ${phase_shift},\n    ${resamp_ratio});", "link": ["gnuradio-filter"], "callbacks": ["set_resamp_ratio(${resamp_ratio})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/filter_pfb_arb_resampler.block.yml": {"id": "pfb_arb_resampler_xxx", "label": "Polyphase Arbitrary Resampler", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["ccf", "fff", "ccc"], "option_labels": ["Complex->Complex (Real Taps)", "Float->Float (Real Taps)", "Complex->Complex (Complex Taps)"], "option_attributes": {"input": ["complex", "float", "complex"], "output": ["complex", "float", "complex"], "taps": ["real_vector", "real_vector", "complex_vector"]}, "hide": "part"}, {"id": "rrate", "label": "Resampling Rate", "dtype": "real"}, {"id": "taps", "label": "Taps", "dtype": "${ type.taps }"}, {"id": "nfilts", "label": "Number of Filters", "dtype": "int", "default": "32"}, {"id": "atten", "label": "Stop-band Attenuation", "dtype": "real", "default": "100"}, {"id": "samp_delay", "label": "Sample Delay", "dtype": "int", "default": "0", "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "${ type.input }"}], "outputs": [{"domain": "stream", "dtype": "${ type.output }"}], "templates": {"imports": "from gnuradio.filter import pfb\nfrom gnuradio.filter import firdes", "make": "pfb.arb_resampler_${type}(\n    ${rrate},\n    taps=${ taps if taps else 'None' },\n    flt_size=${nfilts})\nself.${id}.declare_sample_delay(${samp_delay})", "callbacks": ["set_taps(${taps})", "set_rate(${rrate})"]}, "cpp_templates": {"includes": ["#include <gnuradio/filter/pfb.arb_resampler_${type}.h>"], "declarations": "pfb::arb_resampler_${type}::sptr ${id};", "make": "% if str(type.taps) == \"complex_vector\":\nstd::vector<gr_complex> taps = {${str(taps)[1:-1]}};\n% else:\nstd::vector<float> taps = {${str(taps)[1:-1]}};\n% endif\nthis->${id} =pfb::arb_resampler_${type}::make(\n    ${rrate},\n    taps=${ taps if taps else 'None' },\n    flt_size=${nfilts});\nthis->${id}.declare_sample_delay(${samp_delay});", "link": ["gnuradio-filter"], "callbacks": ["set_taps(taps)", "set_rate(${rrate})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/filter_pfb_channelizer.block.yml": {"id": "pfb_channelizer_ccf", "label": "Polyphase Channelizer", "flags": ["python", "cpp"], "parameters": [{"id": "nchans", "label": "Channels", "dtype": "int", "default": "1", "hide": "part"}, {"id": "taps", "label": "Taps", "dtype": "real_vector"}, {"id": "osr", "label": "Oversampling Ratio", "dtype": "real", "default": "1.0"}, {"id": "atten", "label": "Attenuation", "dtype": "real", "default": "100"}, {"id": "samp_delay", "label": "Sample Delay", "dtype": "int", "default": "0", "hide": "part"}, {"id": "ch_map", "label": "Channel Map", "dtype": "int_vector", "default": "[]"}, {"id": "bus_conns", "label": "Bus Connections", "dtype": "raw", "default": "[[0,],]", "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex", "multiplicity": "${ nchans }"}], "templates": {"imports": "from gnuradio.filter import pfb\nfrom gnuradio.filter import firdes", "make": "pfb.channelizer_ccf(\n    ${nchans},\n    ${taps},\n    ${osr},\n    ${atten})\nself.${id}.set_channel_map(${ch_map})\nself.${id}.declare_sample_delay(${samp_delay})", "callbacks": ["set_taps(${taps})", "set_channel_map(${ch_map})"]}, "cpp_templates": {"includes": ["#include <gnuradio/filter/pfb_channelizer_ccf.h>"], "declarations": "pfb::channelizer_ccf::sptr ${id};", "make": "std::vector<float> taps = {${str(taps)[1:-1]}};\nthis->${id} = pfb::channelizer_ccf::make(\n    ${nchans},\n    taps,\n    ${osr},\n    ${atten});\nthis->${id}.set_channel_map(${ch_map});\nthis->${id}.declare_sample_delay(${samp_delay});", "link": ["gnuradio-filter"], "callbacks": ["set_taps(taps)", "set_channel_map(${ch_map})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/filter_pfb_channelizer_hier.block.yml": {"id": "pfb_channelizer_hier_ccf", "label": "Hierarchical Polyphase Channelizer", "flags": ["python"], "parameters": [{"id": "nchans", "label": "Number of Channels", "dtype": "int", "default": "3", "hide": "part"}, {"id": "n_filterbanks", "label": "Number of Filterbanks", "dtype": "int", "default": "4"}, {"id": "taps", "label": "Taps", "dtype": "raw", "default": "None"}, {"id": "outchans", "label": "Output Channels", "dtype": "raw", "default": "None"}, {"id": "atten", "label": "Attenuation", "dtype": "real", "default": "100"}, {"id": "bw", "label": "Fraction of Channel to Keep", "dtype": "real", "default": "1.0"}, {"id": "tb", "label": "Transition Band (as a fraction of channel width)", "dtype": "real", "default": "0.2"}, {"id": "ripple", "label": "Passband Ripple in dB", "dtype": "real", "default": "0.1"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex", "multiplicity": "${ nchans }"}], "templates": {"imports": "from gnuradio.filter import pfb", "make": "pfb.channelizer_hier_ccf(\n    ${nchans},\n    ${n_filterbanks},\n    ${taps},\n    ${outchans},\n    ${atten},\n    ${bw},\n    ${tb},\n    ${ripple})", "callbacks": ["set_taps(${taps})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/filter_pfb_decimator.block.yml": {"id": "pfb_decimator_ccf", "label": "Polyphase Decimator", "flags": ["python", "cpp"], "parameters": [{"id": "decim", "label": "Decimation", "dtype": "int"}, {"id": "taps", "label": "Taps", "dtype": "real_vector"}, {"id": "channel", "label": "Output Channel", "dtype": "int", "default": "0"}, {"id": "atten", "label": "Stop-band Attenuation", "dtype": "real", "default": "100"}, {"id": "fft_rot", "label": "Use FFT Rotator", "dtype": "raw", "default": "True", "options": ["True", "False"], "hide": "part"}, {"id": "fft_filts", "label": "Use FFT Filters", "dtype": "raw", "default": "True", "options": ["True", "False"], "hide": "part"}, {"id": "samp_delay", "label": "Sample Delay", "dtype": "int", "default": "0", "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio.filter import pfb\nfrom gnuradio.filter import firdes", "make": "pfb.decimator_ccf(\n    ${decim},\n    ${taps},\n    ${channel},\n    ${atten},\n    ${fft_rot},\n    ${fft_filts})\nself.${id}.declare_sample_delay(${samp_delay})", "callbacks": ["set_taps(${taps})", "set_channel(int(${channel}))"]}, "cpp_templates": {"includes": ["#include <gnuradio/filter/pfb_decimator_ccf.h>"], "declarations": "pfb::decimator_ccf::sptr ${id};", "make": "std::vector<float> taps = {${str(taps)[1:-1]}};\nthis->${id} = pfb::decimator_ccf::make(\n    ${decim},\n    taps,\n    ${channel},\n    ${atten},\n    ${fft_rot},\n    ${fft_filts});\nthis->${id}.declare_sample_delay(${samp_delay});", "link": ["gnuradio-filter"], "callbacks": ["set_taps(taps)", "set_channel(int(${channel}))"], "translations": {"True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/filter_pfb_interpolator.block.yml": {"id": "pfb_interpolator_ccf", "label": "Polyphase Interpolator", "flags": ["python", "cpp"], "parameters": [{"id": "interp", "label": "Interpolation", "dtype": "int"}, {"id": "taps", "label": "Taps", "dtype": "real_vector"}, {"id": "atten", "label": "Attenuation", "dtype": "real", "default": "100"}, {"id": "samp_delay", "label": "Sample Delay", "dtype": "int", "default": "0", "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio.filter import pfb\nfrom gnuradio.filter import firdes", "make": "pfb.interpolator_ccf(\n    ${interp},\n    ${taps},\n    ${atten})\nself.${id}.declare_sample_delay(${samp_delay})", "callbacks": ["set_taps(${taps})"]}, "cpp_templates": {"includes": ["#include <gnuradio/filter/pfb_interpolator_ccf.h>"], "declarations": "pfb::interpolator_ccf::sptr ${id};", "make": "std::vector<float> taps = {${str(taps)[1:-1]}};\nthis->${id} = pfb::interpolator_ccf::make(\n    ${interp},\n    taps,\n    ${atten});\nthis->${id}.declare_sample_delay(${samp_delay});", "link": ["gnuradio-filter"], "callbacks": ["set_taps(taps)"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/filter_pfb_synthesizer.block.yml": {"id": "pfb_synthesizer_ccf", "label": "Polyphase Synthesizer", "flags": ["python", "cpp"], "parameters": [{"id": "numchans", "label": "Channels", "dtype": "int", "default": "2"}, {"id": "connections", "label": "Connections", "dtype": "int", "default": "2", "hide": "part"}, {"id": "taps", "label": "Taps", "dtype": "real_vector"}, {"id": "twox", "label": "2x Sample Rate", "dtype": "bool", "default": "False"}, {"id": "samp_delay", "label": "Sample Delay", "dtype": "int", "default": "0", "hide": "part"}, {"id": "ch_map", "label": "Channel Map", "dtype": "int_vector", "default": "[]"}, {"id": "bus_conns", "label": "Bus Connections", "dtype": "raw", "default": "[[0,],]", "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "complex", "multiplicity": "${ connections }"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "from gnuradio import filter\nfrom gnuradio.filter import firdes", "make": "filter.pfb_synthesizer_ccf(\n    ${numchans},\n    ${taps},\n    ${twox})\nself.${id}.set_channel_map(${ch_map})\nself.${id}.declare_sample_delay(${samp_delay})", "callbacks": ["set_taps(${taps})", "set_channel_map(${ch_map})"]}, "cpp_templates": {"includes": ["#include <gnuradio/filter/pfb_synthesizer_ccf.h>"], "declarations": "pfb::synthesizer_ccf::sptr ${id};", "make": "std::vector<float> taps = {${str(taps)[1:-1]}};\nstd::vector<int> ch_map = {${str(ch_map)[1:-1]}};\nthis->${id} = pfb::synthesizer_ccf::make(\n    ${numchans},\n    taps,\n    ${twox});\nthis->${id}.set_channel_map(${ch_map});\nthis->${id}.declare_sample_delay(${samp_delay});", "link": ["gnuradio-filter"], "callbacks": ["set_taps(taps)", "set_channel_map(ch_map)"], "translations": {"True": "true", "False": "false"}}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/filter_rational_resampler_base_xxx.block.yml": {"id": "rational_resampler_base_xxx", "label": "Rational Resampler Base", "flags": ["python"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["ccc", "ccf", "fcc", "fff", "fsf", "scc"], "option_labels": ["Complex->Complex (Complex Taps)", "Complex->Complex (Real Taps)", "Float->Complex (Complex Taps)", "Float->Float (Real Taps)", "Float->Short (Real Taps)", "Short->Complex (Complex Taps)"], "option_attributes": {"input": ["complex", "complex", "float", "float", "float", "short"], "output": ["complex", "complex", "complex", "float", "short", "complex"], "taps": ["complex_vector", "real_vector", "complex_vector", "real_vector", "real_vector", "complex_vector"]}, "hide": "part"}, {"id": "interp", "label": "Interpolation", "dtype": "int", "default": "1"}, {"id": "decim", "label": "Decimation", "dtype": "int", "default": "1"}, {"id": "taps", "label": "Taps", "dtype": "${ type.taps }"}], "inputs": [{"domain": "stream", "dtype": "${ type.input }"}], "outputs": [{"domain": "stream", "dtype": "${ type.output }"}], "templates": {"imports": "from gnuradio import filter\nfrom gnuradio.filter import firdes", "make": "filter.rational_resampler_base_${type}(${interp}, ${decim}, ${taps})", "callbacks": ["set_taps(${taps})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/filter_rational_resampler_xxx.block.yml": {"id": "rational_resampler_xxx", "label": "Rational Resampler", "flags": ["python"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["ccc", "ccf", "fcc", "fff"], "option_labels": ["Complex->Complex (Complex Taps)", "Complex->Complex (Real Taps)", "Float->Complex (Complex Taps)", "Float->Float (Real Taps)"], "option_attributes": {"input": ["complex", "complex", "float", "float"], "output": ["complex", "complex", "complex", "float"], "taps": ["complex_vector", "real_vector", "complex_vector", "real_vector"]}, "hide": "part"}, {"id": "interp", "label": "Interpolation", "dtype": "int", "default": "1"}, {"id": "decim", "label": "Decimation", "dtype": "int", "default": "1"}, {"id": "taps", "label": "Taps", "dtype": "${ type.taps }"}, {"id": "fbw", "label": "Fractional BW", "dtype": "real", "default": "0"}], "inputs": [{"domain": "stream", "dtype": "${ type.input }"}], "outputs": [{"domain": "stream", "dtype": "${ type.output }"}], "templates": {"imports": "from gnuradio import filter\nfrom gnuradio.filter import firdes", "make": "filter.rational_resampler_${type}(\n        interpolation=${interp},\n        decimation=${decim},\n% if taps:\n        taps=${taps},\n% else:\n        taps=None,\n% endif\n% if float(fbw) != 0:\n        fractional_bw=${fbw})\n% else:\n        fractional_bw=None)\n% endif", "callbacks": ["set_taps(${taps})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/filter_root_raised_cosine_filter.block.yml": {"id": "root_raised_cosine_filter", "label": "Root Raised Cosine Filter", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "FIR Type", "dtype": "enum", "options": ["fir_filter_ccf", "interp_fir_filter_ccf", "fir_filter_fff", "interp_fir_filter_fff"], "option_labels": ["Complex->Complex (Decimating)", "Complex->Complex (Interpolating)", "Float->Float (Decimating)", "Float->Float (Interpolating)"], "option_attributes": {"input": ["complex", "complex", "float", "float"], "output": ["complex", "complex", "float", "float"]}, "hide": "part"}, {"id": "decim", "label": "Decimation", "dtype": "int", "default": "1", "hide": "${ ('all' if str(type).startswith('interp') else 'none') }"}, {"id": "interp", "label": "Interpolation", "dtype": "int", "default": "1", "hide": "${ ('none' if str(type).startswith('interp') else 'all') }"}, {"id": "gain", "label": "Gain", "dtype": "real", "default": "1"}, {"id": "samp_rate", "label": "Sample Rate", "dtype": "real", "default": "samp_rate"}, {"id": "sym_rate", "label": "Symbol Rate", "dtype": "real", "default": "1.0"}, {"id": "alpha", "label": "Alpha", "dtype": "real", "default": "0.35"}, {"id": "ntaps", "label": "Num Taps", "dtype": "int", "default": "11*samp_rate"}], "inputs": [{"domain": "stream", "dtype": "${ type.input }"}], "outputs": [{"domain": "stream", "dtype": "${ type.output }"}], "templates": {"imports": "from gnuradio import filter\nfrom gnuradio.filter import firdes", "make": "filter.${type}(\n    ${ interp if str(type).startswith('interp') else decim },\n    firdes.root_raised_cosine(\n        ${gain},\n        ${samp_rate},\n        ${sym_rate},\n        ${alpha},\n        ${ntaps}))", "callbacks": ["set_taps(firdes.root_raised_cosine(${gain}, ${samp_rate}, ${sym_rate}, ${alpha}, ${ntaps}))"]}, "cpp_templates": {"includes": ["#include <gnuradio/filter/firdes.h>"], "declarations": "filter::firdes::sptr ${id};", "make": "this->${id} = filter::${type}::make(\n    ${ interp if str(type).startswith('interp') else decim },\n    firdes.${type.fcn}(\n        ${gain},\n        ${samp_rate},\n        ${sym_rate},\n        ${alpha},\n        ${ntaps}));", "link": ["gnuradio-filter"], "callbacks": ["set_taps(firdes::root_raised_cosine(${gain}, ${samp_rate}, ${sym_rate}, ${alpha}, ${ntaps}))"]}, "documentation": "This filter is a convenience wrapper for an fir filter and a firdes taps generating function.\n\nSample rate in Hertz.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/filter_single_pole_iir_filter_xx.block.yml": {"id": "single_pole_iir_filter_xx", "label": "Single Pole IIR Filter", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["complex", "float"], "option_attributes": {"fcn": ["cc", "ff"]}, "hide": "part"}, {"id": "alpha", "label": "Alpha", "dtype": "real", "default": "1.0"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "templates": {"imports": "from gnuradio import filter", "make": "filter.single_pole_iir_filter_${type.fcn}(${alpha}, ${vlen})", "callbacks": ["set_taps(${alpha})"]}, "cpp_templates": {"includes": ["#include <gnuradio/filter/single_pole_iir_filter_${type.fcn}.h>"], "declarations": "filter::single_pole_iir_filter_${type.fcn}::sptr ${id};", "make": "this->${id} = filter::single_pole_iir_filter_${type.fcn}::make(${alpha}, ${vlen});", "link": ["gnuradio-filter"], "callbacks": ["set_taps(${alpha})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/foo_burst_tagger.block.yml": {"id": "foo_burst_tagger", "label": "Burst Tagger", "category": "[Foo]", "parameters": [{"id": "tag_name", "label": "Tag Name", "dtype": "raw", "default": "pmt.intern(\"burst_len\")"}, {"id": "mult", "label": "Multiplier", "dtype": "int", "default": "1"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "asserts": ["${ mult > 0 }"], "templates": {"imports": "import pmt\nimport foo", "make": "foo.burst_tagger(${tag_name}, ${mult})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/foo_channel_model.block.yml": {"id": "foo_channel_model", "label": "Channel Model", "category": "[Foo]", "parameters": [{"id": "noise_voltage", "label": "Noise Voltage", "dtype": "real", "default": "0.0"}, {"id": "freq_offset", "label": "Frequency Offset", "dtype": "real", "default": "0.0"}, {"id": "epsilon", "label": "Epsilon", "dtype": "real", "default": "1.0"}, {"id": "taps", "label": "Taps", "dtype": "complex_vector", "default": "1.0 + 1.0j"}, {"id": "seed", "label": "Seed", "dtype": "int", "default": "0"}, {"id": "block_tags", "label": "Block Tag Propagation", "dtype": "enum", "default": "False", "options": ["True", "False"], "option_labels": ["Yes", "No"], "option_attributes": {"hide_block": ["", "part"]}, "hide": "${ block_tags.hide_block }"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "import foo", "make": "foo.channel_model(\n\tnoise_voltage=${noise_voltage},\n\tfrequency_offset=${freq_offset},\n\tepsilon=${epsilon},\n\ttaps=${taps},\n\tnoise_seed=${seed},\n\tblock_tags=${block_tags}\n)", "callbacks": ["set_noise_voltage(${noise_voltage})", "set_frequency_offset(${freq_offset})", "set_taps(${taps})", "set_timing_offset(${epsilon})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/foo_packet_dropper.block.yml": {"id": "foo_packet_dropper", "label": "Packet Dropper", "category": "[Foo]", "parameters": [{"id": "drop_rate", "label": "Packet drop rate", "dtype": "real", "default": "0.5"}, {"id": "seed", "label": "Random seed", "dtype": "int", "default": "42"}], "inputs": [{"domain": "message", "id": "in"}], "outputs": [{"domain": "message", "id": "out"}], "templates": {"imports": "import foo", "make": "foo.packet_dropper(${drop_rate}, ${seed})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/foo_packet_pad.block.yml": {"id": "foo_packet_pad", "label": "Packet Pad", "category": "[Foo]", "parameters": [{"id": "debug", "label": "Debug", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["Enable", "Disable"]}, {"id": "delay", "label": "Delay", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["Enable", "Disable"]}, {"id": "delay_sec", "label": "Delay Sec", "dtype": "real", "default": "0.001"}, {"id": "pad_front", "label": "Pad Front", "dtype": "int", "default": "0"}, {"id": "pad_tail", "label": "Pad Tail", "dtype": "int", "default": "0"}], "inputs": [{"domain": "stream", "dtype": "complex", "multiplicity": "1"}], "outputs": [{"domain": "stream", "dtype": "complex", "multiplicity": "1"}], "asserts": ["${ pad_front >= 0 }", "${ pad_tail >= 0 }", "${ delay_sec > 0 }"], "templates": {"imports": "import foo", "make": "foo.packet_pad(${debug}, ${delay}, ${delay_sec}, ${pad_front}, ${pad_tail})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/foo_packet_pad2.block.yml": {"id": "foo_packet_pad2", "label": "Packet Pad2", "category": "[Foo]", "parameters": [{"id": "debug", "label": "Debug", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["Enable", "Disable"]}, {"id": "delay", "label": "Delay", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["Enable", "Disable"]}, {"id": "delay_sec", "label": "Delay Sec", "dtype": "real", "default": "0.001"}, {"id": "pad_front", "label": "Pad Front", "dtype": "int", "default": "0"}, {"id": "pad_tail", "label": "Pad Tail", "dtype": "int", "default": "0"}], "inputs": [{"domain": "stream", "dtype": "complex", "multiplicity": "1"}], "outputs": [{"domain": "stream", "dtype": "complex", "multiplicity": "1"}], "asserts": ["${ pad_front >= 0 }", "${ pad_tail >= 0 }", "${ delay_sec > 0 }"], "templates": {"imports": "import foo", "make": "foo.packet_pad2(${debug}, ${delay}, ${delay_sec}, ${pad_front}, ${pad_tail})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/foo_pad_tagged_stream.block.yml": {"id": "foo_pad_tagged_stream", "label": "Pad Tagged Stream", "category": "[Foo]", "templates": {"imports": "import foo", "make": "foo.pad_tagged_stream(${buffer_size}, ${len_tag_name})"}, "parameters": [{"id": "buffer_size", "label": "Buffer Size", "dtype": "int", "default": "0x8000"}, {"id": "len_tag_name", "label": "Length Tag Key", "dtype": "string"}], "inputs": [{"label": "in", "domain": "stream", "dtype": "complex", "vlen": 1, "optional": 0}], "outputs": [{"label": "out", "domain": "stream", "dtype": "complex", "vlen": 1, "optional": 0}], "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/foo_periodic_msg_source.block.yml": {"id": "foo_periodic_msg_source", "label": "Periodic Message Source", "category": "[Foo]", "parameters": [{"id": "msg", "label": "Message PMT", "dtype": "raw", "default": "pmt.intern(\"Hello World!\")"}, {"id": "interval", "label": "Period (ms)", "dtype": "int", "default": "1000"}, {"id": "quit", "label": "Quit", "dtype": "bool", "default": "True", "options": ["True", "False"], "option_labels": ["Enable", "Disable"]}, {"id": "debug", "label": "Debug", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["Enable", "Disable"]}, {"id": "num", "label": "Num Messages", "dtype": "int", "default": "-1"}], "outputs": [{"domain": "message", "id": "out", "optional": true}], "templates": {"imports": "import foo\nimport pmt", "make": "foo.periodic_msg_source(${msg}, ${interval}, ${num}, ${quit}, ${debug})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/foo_random_periodic_msg_source.block.yml": {"id": "foo_random_periodic_msg_source", "label": "Random Periodic Message Source", "category": "[Foo]", "parameters": [{"id": "msg_len", "label": "Message Length", "dtype": "int", "default": "64"}, {"id": "interval", "label": "Period (ms)", "dtype": "int", "default": "1000"}, {"id": "quit", "label": "Quit", "dtype": "bool", "default": "True", "options": ["True", "False"], "option_labels": ["Enable", "Disable"]}, {"id": "debug", "label": "Debug", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["Enable", "Disable"]}, {"id": "num", "label": "Num Messages", "dtype": "int", "default": "1"}, {"id": "seed", "label": "Random Seed", "dtype": "int", "default": "1"}], "outputs": [{"domain": "message", "id": "out", "optional": true}], "templates": {"imports": "import foo\nimport pmt", "make": "foo.random_periodic_msg_source(${msg_len}, ${interval}, ${num}, ${quit}, ${debug}, ${seed})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/foo_rtt_measure.block.yml": {"id": "foo_rtt_measure", "label": "RTT measure", "category": "[Foo]", "parameters": [{"id": "interval", "label": "Send interval", "dtype": "int", "default": "500"}], "inputs": [{"domain": "message", "id": "in"}], "outputs": [{"label": "dout", "domain": "stream", "dtype": "byte"}, {"domain": "message", "id": "out"}], "templates": {"imports": "import foo", "make": "foo.rtt_measure(${interval})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/foo_selector.block.yml": {"id": "foo_selector", "label": "Selector", "category": "[Foo]", "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "num_inputs", "label": "Num Inputs", "dtype": "int", "default": "2", "hide": "part"}, {"id": "num_outputs", "label": "Num Outputs", "dtype": "int", "default": "2", "hide": "part"}, {"id": "input_index", "label": "Input Index", "dtype": "int", "default": "0"}, {"id": "output_index", "label": "Output Index", "dtype": "int", "default": "0"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }", "multiplicity": "${ num_inputs }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }", "multiplicity": "${ num_outputs }"}], "asserts": ["${ vlen > 0 }"], "templates": {"imports": "import foo", "make": "foo.selector(\n\titem_size=${type.size}*${vlen},\n\tnum_inputs=${num_inputs},\n\tnum_outputs=${num_outputs},\n\tinput_index=${input_index},\n\toutput_index=${output_index},\n)", "callbacks": ["set_input_index(int(${input_index}))", "set_output_index(int(${output_index}))"]}, "documentation": "Connect the sink at input index to the source at output index. Leave all other ports disconnected.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/foo_valve.block.yml": {"id": "foo_valve", "label": "Valve", "category": "[Foo]", "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "open", "label": "Open", "dtype": "raw", "default": "0"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "asserts": ["${ vlen > 0 }"], "templates": {"imports": "import foo", "make": "foo.valve(item_size=${type.size}*${vlen}, open=bool(${open}))", "callbacks": ["set_open(bool(${open}))"]}, "documentation": "Connect output to input when valve is closed (not open).", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/foo_wireshark_connector.block.yml": {"id": "foo_wireshark_connector", "label": "Wireshark Connector", "category": "[Foo]", "parameters": [{"id": "tech", "label": "Technology", "dtype": "enum", "default": "127", "options": ["127", "195"], "option_labels": ["WiFi", "ZigBee"]}, {"id": "debug", "label": "Debug", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["Enable", "Disable"]}], "inputs": [{"domain": "message", "id": "in"}], "outputs": [{"domain": "stream", "dtype": "byte", "multiplicity": "1"}], "templates": {"imports": "import foo", "make": "foo.wireshark_connector(${tech}, ${debug})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/grc.tree.yml": {"[Core]": [{"Misc": ["pad_source", "pad_sink", "virtual_source", "virtual_sink", "bus_sink", "bus_source", "bus_structure_sink", "bus_structure_source", "epy_block", "epy_module", "note", "import", "snippet"]}, {"Variables": ["variable", "variable_struct", "variable_config", "variable_function_probe", "parameter"]}]}, "/usr/local/share/gnuradio/grc/blocks/ieee802_11_chunks_to_symbols.block.yml": {"id": "ieee802_11_chunks_to_symbols_xx", "label": "Chunks to Symbols", "category": "[IEEE802.11]", "inputs": [{"domain": "stream", "dtype": "byte", "multiplicity": "1"}], "outputs": [{"domain": "stream", "dtype": "complex", "multiplicity": "1"}], "templates": {"imports": "import ieee802_11", "make": "ieee802_11.chunks_to_symbols()"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ieee802_11_decode_mac.block.yml": {"id": "ieee802_11_decode_mac", "label": "WiFi Decode MAC", "category": "[IEEE802.11]", "parameters": [{"id": "log", "label": "Log", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["Enable", "Disable"]}, {"id": "debug", "label": "Debug", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["Enable", "Disable"]}], "inputs": [{"domain": "stream", "dtype": "byte", "vlen": 48}], "outputs": [{"domain": "message", "id": "out", "optional": true}], "templates": {"imports": "import ieee802_11", "make": "ieee802_11.decode_mac(${log}, ${debug})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ieee802_11_ether_encap.block.yml": {"id": "ieee802_11_ether_encap", "label": "Ethernet Encapsulation", "category": "[IEEE802.11]", "parameters": [{"id": "debug", "label": "Debug", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["Enable", "Disable"]}], "inputs": [{"domain": "message", "id": "from tap", "optional": true}, {"domain": "message", "id": "from wifi", "optional": true}], "outputs": [{"domain": "message", "id": "to tap", "optional": true}, {"domain": "message", "id": "to wifi", "optional": true}], "templates": {"imports": "import ieee802_11", "make": "ieee802_11.ether_encap(${debug})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ieee802_11_frame_equalizer.block.yml": {"id": "ieee802_11_frame_equalizer", "label": "WiFi Frame Equalizer", "category": "[IEEE802.11]", "parameters": [{"id": "algo", "label": "Algorithm", "dtype": "int", "default": "ieee802_11.LS", "options": ["ieee802_11.LS", "ieee802_11.LMS", "ieee802_11.COMB", "ieee802_11.STA"], "option_labels": ["LS", "LMS", "Comb", "STA"]}, {"id": "freq", "label": "Frequency", "dtype": "real", "default": "5.89e9"}, {"id": "bw", "label": "Bandwidth", "dtype": "real", "default": "10e6"}, {"id": "log", "label": "Log", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["Enable", "Disable"]}, {"id": "debug", "label": "Debug", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["Enable", "Disable"]}], "inputs": [{"domain": "stream", "dtype": "complex", "vlen": 64, "multiplicity": "1"}], "outputs": [{"domain": "stream", "dtype": "byte", "vlen": 48, "multiplicity": "1"}, {"domain": "message", "id": "symbols", "optional": true}], "templates": {"imports": "import ieee802_11", "make": "ieee802_11.frame_equalizer(${algo}, ${freq}, ${bw}, ${log}, ${debug})", "callbacks": ["set_algorithm(${algo})", "set_frequency(${freq})", "set_bandwidth(${bw})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ieee802_11_mac.block.yml": {"id": "ieee802_11_mac", "label": "WiFi MAC", "category": "[IEEE802.11]", "parameters": [{"id": "src_mac", "label": "SRC MAC", "dtype": "int_vector", "default": "[0x23, 0x23, 0x23, 0x23, 0x23, 0x23]"}, {"id": "dst_mac", "label": "DST MAC", "dtype": "int_vector", "default": "[0x42, 0x42, 0x42, 0x42, 0x42, 0x42]"}, {"id": "bss_mac", "label": "BSS MAC", "dtype": "int_vector", "default": "[0xff, 0xff, 0xff, 0xff, 0xff, 0xff]"}], "inputs": [{"domain": "message", "id": "app in", "optional": true}, {"domain": "message", "id": "phy in", "optional": true}], "outputs": [{"domain": "message", "id": "app out", "optional": true}, {"domain": "message", "id": "phy out", "optional": true}], "asserts": ["${ len(src_mac) == 6 }", "${ len(dst_mac) == 6 }", "${ len(bss_mac) == 6 }", "${ all([x >= 0 and 255 >= x for x in src_mac]) }", "${ all([x >= 0 and 255 >= x for x in dst_mac]) }", "${ all([x >= 0 and 255 >= x for x in bss_mac]) }"], "templates": {"imports": "import ieee802_11", "make": "ieee802_11.mac(${src_mac}, ${dst_mac}, ${bss_mac})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ieee802_11_mapper.block.yml": {"id": "ieee802_11_mapper", "label": "WiFi Mapper", "category": "[IEEE802.11]", "parameters": [{"id": "encoding", "label": "Encoding", "dtype": "int", "default": "ieee802_11.BPSK_1_2", "options": ["ieee802_11.BPSK_1_2", "ieee802_11.BPSK_3_4", "ieee802_11.QPSK_1_2", "ieee802_11.QPSK_3_4", "ieee802_11.16QAM_1_2", "ieee802_11.16QAM_3_4", "ieee802_11.64QAM_2_3", "ieee802_11.64QAM_3_4"], "option_labels": ["BPSK 1/2", "BPSK 3/4", "QPSK 1/2", "QPSK 3/4", "16QAM 1/2", "16QAM 3/4", "64QAM 2/3", "64QAM 3/4"]}, {"id": "debug", "label": "Debug", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["Enable", "Disable"]}], "inputs": [{"domain": "message", "id": "in"}], "outputs": [{"domain": "stream", "dtype": "byte", "multiplicity": "1"}], "asserts": ["${ encoding in range(8) }"], "templates": {"imports": "import ieee802_11", "make": "ieee802_11.mapper(${encoding}, ${debug})", "callbacks": ["set_encoding(${encoding})"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ieee802_11_parse_mac.block.yml": {"id": "ieee802_11_parse_mac", "label": "WiFi Parse MAC", "category": "[IEEE802.11]", "parameters": [{"id": "log", "label": "Log", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["Enable", "Disable"]}, {"id": "debug", "label": "Debug", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["Enable", "Disable"]}], "inputs": [{"domain": "message", "id": "in"}], "outputs": [{"domain": "message", "id": "fer", "optional": true}], "templates": {"imports": "import ieee802_11", "make": "ieee802_11.parse_mac(${log}, ${debug})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ieee802_11_sync_long.block.yml": {"id": "ieee802_11_sync_long", "label": "WiFi Sync Long", "category": "[IEEE802.11]", "parameters": [{"id": "log", "label": "Log", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["Enable", "Disable"]}, {"id": "debug", "label": "Debug", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["Enable", "Disable"]}, {"id": "sync_length", "label": "Sync Length", "dtype": "int", "default": "240"}], "inputs": [{"domain": "stream", "dtype": "complex", "multiplicity": "1"}, {"label": "in delayed", "domain": "stream", "dtype": "complex", "multiplicity": "1"}], "outputs": [{"domain": "stream", "dtype": "complex", "multiplicity": "1"}], "asserts": ["${ sync_length > 0 }"], "templates": {"imports": "import ieee802_11", "make": "ieee802_11.sync_long(${sync_length}, ${log}, ${debug})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ieee802_11_sync_short.block.yml": {"id": "ieee802_11_sync_short", "label": "WiFi Sync Short", "category": "[IEEE802.11]", "parameters": [{"id": "log", "label": "Log", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["Enable", "Disable"]}, {"id": "debug", "label": "Debug", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["Enable", "Disable"]}, {"id": "threshold", "label": "Threshold", "dtype": "real", "default": "0.8"}, {"id": "min_plateau", "label": "Min Plateau", "dtype": "int", "default": "2"}], "inputs": [{"domain": "stream", "dtype": "complex", "multiplicity": "1"}, {"label": "abs", "domain": "stream", "dtype": "complex", "multiplicity": "1"}, {"label": "cor", "domain": "stream", "dtype": "float", "multiplicity": "1"}], "outputs": [{"domain": "stream", "dtype": "complex", "multiplicity": "1"}], "asserts": ["${ threshold > 0 }", "${ min_plateau > 0 }"], "templates": {"imports": "import ieee802_11", "make": "ieee802_11.sync_short(${threshold}, ${min_plateau}, ${log}, ${debug})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ieee802_15_4_access_code_prefixer.block.yml": {"id": "ieee802_15_4_access_code_prefixer", "label": "Access Code Prefixer", "category": "[IEEE802.15.4]", "parameters": [{"id": "pad", "label": "Pad", "dtype": "hex", "default": "0x00"}, {"id": "preamble", "label": "Preamble", "dtype": "hex", "default": "0x000000a7"}], "inputs": [{"domain": "message", "id": "in"}], "outputs": [{"domain": "message", "id": "out"}], "templates": {"imports": "import ieee802_15_4", "make": "ieee802_15_4.access_code_prefixer(${pad},${preamble})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ieee802_15_4_access_code_removal_b.block.yml": {"id": "ieee802_15_4_access_code_removal_b", "label": "Access Code Removal", "category": "[IEEE802.15.4]", "parameters": [{"id": "payload_len", "label": "Num Payload Bytes", "dtype": "int"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "message", "id": "out"}], "templates": {"imports": "import ieee802_15_4", "make": "ieee802_15_4.access_code_removal_b(${payload_len})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ieee802_15_4_chips_to_bits_fb.block.yml": {"id": "ieee802_15_4_chips_to_bits_fb", "label": "Chip Sequence Soft Demapper", "category": "[IEEE802.15.4]", "parameters": [{"id": "chip_seq", "label": "Chip Sequence", "dtype": "raw"}], "inputs": [{"domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "import ieee802_15_4", "make": "ieee802_15_4.chips_to_bits_fb(${chip_seq})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ieee802_15_4_codeword_demapper_ib.block.yml": {"id": "ieee802_15_4_codeword_demapper_ib", "label": "Codeword Demapper", "category": "[IEEE802.15.4]", "parameters": [{"id": "bits_per_cw", "label": "Bits per codeword", "dtype": "int"}, {"id": "codewords", "label": "Codewords", "dtype": "raw"}], "inputs": [{"domain": "stream", "dtype": "int"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "import ieee802_15_4", "make": "ieee802_15_4.codeword_demapper_ib(${bits_per_cw}, ${codewords})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ieee802_15_4_codeword_mapper_bi.block.yml": {"id": "ieee802_15_4_codeword_mapper_bi", "label": "Codeword Mapping", "category": "[IEEE802.15.4]", "parameters": [{"id": "bits_per_cw", "label": "Bits per codeword", "dtype": "int"}, {"id": "codewords", "label": "Codewords", "dtype": "raw"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "int"}], "templates": {"imports": "import ieee802_15_4", "make": "ieee802_15_4.codeword_mapper_bi(${bits_per_cw}, ${codewords})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ieee802_15_4_codeword_soft_demapper_fb.block.yml": {"id": "ieee802_15_4_codeword_soft_demapper_fb", "label": "Codeword Soft Demapper", "category": "[IEEE802.15.4]", "parameters": [{"id": "bits_per_cw", "label": "Bits per Codeword", "dtype": "int"}, {"id": "codewords", "label": "Codewords", "dtype": "raw"}], "inputs": [{"domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "import ieee802_15_4", "make": "ieee802_15_4.codeword_soft_demapper_fb(${bits_per_cw}, ${codewords})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ieee802_15_4_deinterleaver_ff.block.yml": {"id": "ieee802_15_4_deinterleaver_ff", "label": "Deinterleaver", "category": "[IEEE802.15.4]", "parameters": [{"id": "intlv_seq", "label": "Interleaver sequence", "dtype": "int_vector"}], "inputs": [{"domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "float"}], "templates": {"imports": "import ieee802_15_4", "make": "ieee802_15_4.deinterleaver_ff(${intlv_seq})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ieee802_15_4_dqcsk_demapper_cc.block.yml": {"id": "ieee802_15_4_dqcsk_demapper_cc", "label": "DQCSK Demapper", "category": "[IEEE802.15.4]", "parameters": [{"id": "chirp_seq", "label": "Chirp Sequence", "dtype": "complex_vector"}, {"id": "time_gap_1", "label": "Time Gap 1", "dtype": "complex_vector"}, {"id": "time_gap_2", "label": "Time Gap 2", "dtype": "complex_vector"}, {"id": "len_subchirp", "label": "Samples per Subchirp", "dtype": "int"}, {"id": "num_subchirps", "label": "Num subchirps per sequence", "dtype": "int"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "import ieee802_15_4", "make": "ieee802_15_4.dqcsk_demapper_cc(${chirp_seq}, ${time_gap_1}, ${time_gap_2}, ${len_subchirp}, ${num_subchirps})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ieee802_15_4_dqcsk_mapper_fc.block.yml": {"id": "ieee802_15_4_dqcsk_mapper_fc", "label": "DQCSK Mapper", "category": "[IEEE802.15.4]", "parameters": [{"id": "chirp_seq", "label": "Chirp Sequence", "dtype": "complex_vector"}, {"id": "time_gap_1", "label": "Time Gap 1", "dtype": "complex_vector"}, {"id": "time_gap_2", "label": "Time Gap 2", "dtype": "complex_vector"}, {"id": "len_subchirp", "label": "Samples per Subchirp", "dtype": "int"}, {"id": "num_subchirps", "label": "Num subchirps per sequence", "dtype": "int"}, {"id": "nsym_frame", "label": "Num symbols per Frame", "dtype": "int"}], "inputs": [{"domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "import ieee802_15_4", "make": "ieee802_15_4.dqcsk_mapper_fc(${chirp_seq}, ${time_gap_1}, ${time_gap_2}, ${len_subchirp}, ${num_subchirps}, ${nsym_frame})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ieee802_15_4_dqpsk_mapper_ff.block.yml": {"id": "ieee802_15_4_dqpsk_mapper_ff", "label": "DQPSK Mapper", "category": "[IEEE802.15.4]", "parameters": [{"id": "framelen", "label": "Symbols per frame", "dtype": "int"}, {"id": "forward", "label": "Direction", "dtype": "bool", "default": "True", "options": ["True", "False"], "option_labels": ["Forward", "Reverse"]}], "inputs": [{"domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "float"}], "templates": {"imports": "import ieee802_15_4", "make": "ieee802_15_4.dqpsk_mapper_ff(${framelen}, ${forward})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ieee802_15_4_dqpsk_soft_demapper_cc.block.yml": {"id": "ieee802_15_4_dqpsk_soft_demapper_cc", "label": "DQPSK Soft Demapper", "category": "[IEEE802.15.4]", "parameters": [{"id": "framelen", "label": "Frame length", "dtype": "int"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "import ieee802_15_4", "make": "ieee802_15_4.dqpsk_soft_demapper_cc(${framelen})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ieee802_15_4_frame_buffer_cc.block.yml": {"id": "ieee802_15_4_frame_buffer_cc", "label": "Frame Buffer", "category": "[IEEE802.15.4]", "parameters": [{"id": "nsym_frame", "label": "Symbols per frame", "dtype": "int"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "import ieee802_15_4", "make": "ieee802_15_4.frame_buffer_cc(${nsym_frame})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ieee802_15_4_interleaver_ii.block.yml": {"id": "ieee802_15_4_interleaver_ii", "label": "Block Interleaver", "category": "[IEEE802.15.4]", "parameters": [{"id": "intlv_seq", "label": "Interleaver sequence", "dtype": "int_vector"}, {"id": "forward", "label": "Direction", "dtype": "bool", "default": "True", "options": ["True", "False"], "option_labels": ["Forward", "Reverse"]}], "inputs": [{"domain": "stream", "dtype": "int"}], "outputs": [{"domain": "stream", "dtype": "int"}], "templates": {"imports": "import ieee802_15_4", "make": "ieee802_15_4.interleaver_ii(${intlv_seq}, ${forward})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ieee802_15_4_mac.block.yml": {"id": "ieee802_15_4_mac", "label": "IEEE802.15.4 MAC", "category": "[IEEE802.15.4]", "parameters": [{"id": "debug", "label": "Debug", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["Enable", "Disable"]}, {"id": "fcf", "label": "Frame Control", "dtype": "hex", "default": "0x8841"}, {"id": "seq_nr", "label": "Sequence Number", "dtype": "hex", "default": "0"}, {"id": "dst_pan", "label": "Destination PAN", "dtype": "hex", "default": "0x1aaa"}, {"id": "dst", "label": "Destination Address", "dtype": "hex", "default": "0xffff"}, {"id": "src", "label": "Source Address", "dtype": "hex", "default": "0x3344"}], "inputs": [{"domain": "message", "id": "pdu in", "optional": true}, {"domain": "message", "id": "app in", "optional": true}], "outputs": [{"domain": "message", "id": "pdu out", "optional": true}, {"domain": "message", "id": "app out", "optional": true}], "templates": {"imports": "import ieee802_15_4", "make": "ieee802_15_4.mac(${debug},${fcf},${seq_nr},${dst_pan},${dst},${src})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ieee802_15_4_multiuser_chirp_detector_cc.block.yml": {"id": "ieee802_15_4_multiuser_chirp_detector_cc", "label": "Multiuser Chirp Detector", "category": "[IEEE802.15.4]", "parameters": [{"id": "chirp_seq", "label": "Chirp Sequence", "dtype": "complex_vector"}, {"id": "time_gap_1", "label": "Time Gap 1", "dtype": "int"}, {"id": "time_gap_2", "label": "Time Gap 2", "dtype": "int"}, {"id": "len_subchirp", "label": "Length Subchirp", "dtype": "int"}, {"id": "threshold", "label": "Threshold", "dtype": "float"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "import ieee802_15_4", "make": "ieee802_15_4.multiuser_chirp_detector_cc(${chirp_seq}, ${time_gap_1}, ${time_gap_2}, ${len_subchirp}, ${threshold})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ieee802_15_4_packet_sink.block.yml": {"id": "ieee802_15_4_packet_sink", "label": "Packet Sink", "category": "[IEEE802.15.4]", "parameters": [{"id": "th", "label": "Threshold", "dtype": "int", "default": "10"}], "inputs": [{"domain": "stream", "dtype": "float", "multiplicity": "1"}], "outputs": [{"domain": "message", "id": "out"}], "templates": {"imports": "import ieee802_15_4", "make": "ieee802_15_4.packet_sink(${th})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ieee802_15_4_phr_prefixer.block.yml": {"id": "ieee802_15_4_phr_prefixer", "label": "PHR Prefixer", "category": "[IEEE802.15.4]", "parameters": [{"id": "phr", "label": "PHR", "dtype": "raw"}], "inputs": [{"domain": "message", "id": "in"}], "outputs": [{"domain": "message", "id": "out"}], "templates": {"imports": "import ieee802_15_4", "make": "ieee802_15_4.phr_prefixer(${phr})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ieee802_15_4_phr_removal.block.yml": {"id": "ieee802_15_4_phr_removal", "label": "PHR Removal", "category": "[IEEE802.15.4]", "parameters": [{"id": "phr", "label": "PHR", "dtype": "raw"}], "inputs": [{"domain": "message", "id": "in"}], "outputs": [{"domain": "message", "id": "out"}], "templates": {"imports": "import ieee802_15_4", "make": "ieee802_15_4.phr_removal(${phr})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ieee802_15_4_preamble_sfd_prefixer_ii.block.yml": {"id": "ieee802_15_4_preamble_sfd_prefixer_ii", "label": "Preamble and SFD Prefixer", "category": "[IEEE802.15.4]", "parameters": [{"id": "preamble", "label": "Preamble", "dtype": "int_vector"}, {"id": "sfd", "label": "SFD", "dtype": "int_vector"}, {"id": "nsym_frame", "label": "Symbols per frame", "dtype": "int"}], "inputs": [{"domain": "stream", "dtype": "int"}], "outputs": [{"domain": "stream", "dtype": "int"}], "templates": {"imports": "import ieee802_15_4", "make": "ieee802_15_4.preamble_sfd_prefixer_ii(${preamble}, ${sfd}, ${nsym_frame})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ieee802_15_4_preamble_tagger_cc.block.yml": {"id": "ieee802_15_4_preamble_tagger_cc", "label": "Preamble Tagger", "category": "[IEEE802.15.4]", "parameters": [{"id": "len_preamble", "label": "Length of preamble", "dtype": "int"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "import ieee802_15_4", "make": "ieee802_15_4.preamble_tagger_cc(${len_preamble})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ieee802_15_4_qpsk_demapper_fi.block.yml": {"id": "ieee802_15_4_qpsk_demapper_fi", "label": "QPSK Demapper", "category": "[IEEE802.15.4]", "inputs": [{"domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "int", "multiplicity": "2"}], "templates": {"imports": "import ieee802_15_4", "make": "ieee802_15_4.qpsk_demapper_fi()"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ieee802_15_4_qpsk_mapper_if.block.yml": {"id": "ieee802_15_4_qpsk_mapper_if", "label": "QPSK Mapper", "category": "[IEEE802.15.4]", "inputs": [{"domain": "stream", "dtype": "int", "multiplicity": "2"}], "outputs": [{"domain": "stream", "dtype": "float"}], "templates": {"imports": "import ieee802_15_4", "make": "ieee802_15_4.qpsk_mapper_if()"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ieee802_15_4_rime_stack.block.yml": {"id": "ieee802_15_4_rime_stack", "label": "RIME Stack", "category": "[IEEE802.15.4]", "parameters": [{"id": "bc_channels", "label": "Broadcast Channels", "dtype": "int_vector", "default": "[129]", "hide": "part"}, {"id": "uc_channels", "label": "Unicast Channels", "dtype": "int_vector", "default": "[130]", "hide": "part"}, {"id": "ruc_channels", "label": "Reliable Unicast Channels", "dtype": "int_vector", "default": "[131]", "hide": "part"}, {"id": "rime_add", "label": "RIME Address", "dtype": "int_vector", "default": "[23,42]"}], "inputs": [{"domain": "message", "id": "bcin", "multiplicity": "${ len(bc_channels) }", "optional": true}, {"domain": "message", "id": "ucin", "multiplicity": "${ len(uc_channels) }", "optional": true}, {"domain": "message", "id": "rucin", "multiplicity": "${ len(ruc_channels) }", "optional": true}, {"domain": "message", "id": "fromMAC", "multiplicity": "1"}], "outputs": [{"domain": "message", "id": "bcout", "multiplicity": "${ len(bc_channels) }", "optional": true}, {"domain": "message", "id": "ucout", "multiplicity": "${ len(uc_channels) }", "optional": true}, {"domain": "message", "id": "rucout", "multiplicity": "${ len(ruc_channels) }", "optional": true}, {"domain": "message", "id": "toMAC", "multiplicity": "1"}], "templates": {"imports": "import ieee802_15_4", "make": "ieee802_15_4.rime_stack(${bc_channels}, ${uc_channels}, ${ruc_channels}, ${rime_add})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ieee802_15_4_zeropadding_b.block.yml": {"id": "ieee802_15_4_zeropadding_b", "label": "Zero Padding", "category": "[IEEE802.15.4]", "parameters": [{"id": "nzeros", "label": "Num zeros", "dtype": "int"}], "inputs": [{"domain": "message", "id": "in"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "import ieee802_15_4", "make": "ieee802_15_4.zeropadding_b(${nzeros})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ieee802_15_4_zeropadding_removal_b.block.yml": {"id": "ieee802_15_4_zeropadding_removal_b", "label": "Zeropadding Removal", "category": "[IEEE802.15.4]", "parameters": [{"id": "phr_payload_len", "label": "PHR+payload len", "dtype": "int"}, {"id": "nzeros", "label": "Num zeros", "dtype": "int"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "message", "id": "out"}], "templates": {"imports": "import ieee802_15_4", "make": "ieee802_15_4.zeropadding_removal_b(${phr_payload_len}, ${nzeros})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/import.block.yml": {"id": "import", "label": "Import", "flags": ["python"], "parameters": [{"id": "imports", "label": "Import", "dtype": "import"}], "templates": {"imports": "${imports}"}, "documentation": "Import additional python modules into the namespace.\n\nExamples:\nfrom gnuradio.filter import firdes\nimport math,cmath\nfrom math import pi", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ldpc_decoder_def_list.block.yml": {"id": "variable_ldpc_decoder_def", "label": "LDPC Decoder Definition", "flags": ["show_id"], "parameters": [{"id": "value", "label": "Ignore Me", "dtype": "raw", "default": "\"ok\"", "hide": "all"}, {"id": "ndim", "label": "Parallelism", "dtype": "enum", "default": "0", "options": ["0", "1", "2"]}, {"id": "dim1", "label": "Dimension 1", "dtype": "int", "default": "4", "hide": "${ ('none' if (int(ndim) >= 1) else 'all') }"}, {"id": "dim2", "label": "Dimension 2", "dtype": "int", "default": "4", "hide": "${ ('none' if (int(ndim) >= 2) else 'all') }"}, {"id": "file", "label": "AList File", "dtype": "file_open"}, {"id": "sigma", "label": "Sigma", "dtype": "float", "default": "0.5"}, {"id": "max_iter", "label": "Max Iterations", "dtype": "int", "default": "50"}], "value": "${ value }", "templates": {"imports": "from gnuradio import fec", "var_make": "% if int(ndim)==0:\nself.${id} = ${id} = fec.ldpc_decoder.make(${file}, ${sigma}, ${max_iter})\n% elif int(ndim)==1:\nself.${id} = ${id} = list(map( (lambda a: fec.ldpc_decoder.make(${file}, ${sigma}, ${max_iter})), range(0,${dim1})))\n% else:\nself.${id} = ${id} = list(map( (lambda b: list( map( ( lambda a: fec.ldpc_decoder.make(${file}, ${sigma}, ${max_iter})), range(0,${dim2}) ) ) ), range(0,${dim1})))\n% endif"}, "documentation": "This is a soft-decision decoder that uses belief propagation (also known as message passing) that is described at:\n\nwww.cs.toronto.edu/~radford/ftp/LDPC-2012-02-11/decoding.html\n\nDesigned for a memoryless AWGN channel, it assumes a noise variance of the value specified for sigma.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/ldpc_encoder_def_list.block.yml": {"id": "variable_ldpc_encoder_def", "label": "LDPC Encoder Definition", "flags": ["show_id"], "parameters": [{"id": "value", "label": "Ignore Me", "dtype": "raw", "default": "\"ok\"", "hide": "all"}, {"id": "ndim", "label": "Parallelism", "dtype": "enum", "default": "0", "options": ["0", "1", "2"]}, {"id": "dim1", "label": "Dimension 1", "dtype": "int", "default": "1", "hide": "${ ('none' if (int(ndim) >= 1) else 'all') }"}, {"id": "dim2", "label": "Dimension 2", "dtype": "int", "default": "4", "hide": "${ ('none' if (int(ndim) >= 2) else 'all') }"}, {"id": "file", "label": "AList File", "dtype": "file_open"}], "value": "${ fec.ldpc_encoder_make(file) }", "templates": {"imports": "from gnuradio import fec", "var_make": "% if int(ndim)==0:\nself.${id} = ${id} = fec.ldpc_encoder_make(${file})\n% elif int(ndim)==1:\nself.${id} = ${id} = list(map( (lambda a: fec.ldpc_encoder_make(${file})), range(0,${dim1}) ))\n% else:\nself.${id} = ${id} = list(map( (lambda b: list( map( ( lambda a: fec.ldpc_encoder_make(${file})), range(0,${dim2}) ) ) ), range(0,${dim1})))\n% endif"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/lora_sdr_RH_RF95_header.block.yml": {"id": "lora_sdr_RH_RF95_header", "label": "Rh rf95 header", "category": "[LoRa_TX]", "parameters": [{"id": "_to", "label": "_to", "dtype": "int"}, {"id": "_from", "label": "_from", "dtype": "int"}, {"id": "_id", "label": "_id", "dtype": "int"}, {"id": "_flags", "label": "_flags", "dtype": "int"}], "inputs": [{"domain": "message", "id": "msg"}], "outputs": [{"domain": "message", "id": "msg"}], "templates": {"imports": "import lora_sdr", "make": "lora_sdr.RH_RF95_header(${_to}, ${_from}, ${_id}, ${_flags})"}, "documentation": "Add 4 bytes in the beginning of the payload, required in order to send messages to a lora chip using the Radiohead library.\n    Be careful to take those 4 additional bytes in consideration if used with a usrp as receiver.\n    (During testing, we used the Adafruit Feather 32u4 RFM95).\n    more information on thoses 4 bytes on :\n    https://www.airspayce.com/mikem/arduino/RadioHead/classRHGenericDriver.html#abf4db9bddfee361cc44fbf4bd22202bc\n    Parameters:\n        _to: destination identifier\n        _from: source identifier\n        _id: message identifier\n        _flags: flags\n    Input:\n        msg: payload as a string\n    Output:\n        out: radiohead header and payload as a string", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/lora_sdr_add_crc.block.yml": {"id": "lora_sdr_add_crc", "label": "Add crc", "category": "[LoRa_TX]", "parameters": [{"id": "has_crc", "label": "Has_crc", "dtype": "bool", "default": "False"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "import lora_sdr", "make": "lora_sdr.add_crc(${has_crc})"}, "documentation": "Append the payload CRC to the payload.\n      Parameters:\n        has_crc: indicate the presence of a payload CRC.\n      Input:\n        in: stream of header and payload nibbles (one per byte).\n      Output:\n        out: stream of header, payload and CRC nibbles.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/lora_sdr_crc_verif.block.yml": {"id": "lora_sdr_crc_verif", "label": "Crc verif", "category": "[LoRa_RX]", "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte", "optional": true}, {"domain": "message", "id": "msg", "optional": true}], "templates": {"imports": "import lora_sdr", "make": "lora_sdr.crc_verif()"}, "documentation": "Calculate the CRC of the received data and compare it with the received CRC. It also print the received message in the terminal.\n  Input:\n    in: stream of payload bytes\n  Output:\n    (optional) stream: Received payload in binary format\n    (optional) msg: Received payload", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/lora_sdr_data_source.block.yml": {"id": "lora_sdr_data_source", "label": "Data source", "category": "[LoRa_TX]", "parameters": [{"id": "pay_len", "label": "Pay_len", "dtype": "int"}, {"id": "n_frames", "label": "N_frames", "dtype": "int"}], "inputs": [{"domain": "message", "id": "trigg"}], "outputs": [{"domain": "message", "id": "msg"}], "templates": {"imports": "import lora_sdr", "make": "lora_sdr.data_source(${pay_len}, ${n_frames})"}, "documentation": "Generate a new random payload string every trigger.(Random string formed from characters: a-z, A-Z, 0-9)\n    Parameters:\n        Pay_len: length of the payload in bytes\n        N_frames: number of frames to send\n    Input:\n        trigg: trigger signal\n    Output:\n        msg: payload data as a string", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/lora_sdr_deinterleaver.block.yml": {"id": "lora_sdr_deinterleaver", "label": "Deinterleaver", "category": "[LoRa_RX]", "parameters": [{"id": "sf", "label": "Sf", "dtype": "int"}], "inputs": [{"domain": "stream", "dtype": "int"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "import lora_sdr", "make": "lora_sdr.deinterleaver(${sf})"}, "documentation": "Deinterleave the received codewords.\n    Parameters:\n        sf: spreading factor\n    Input:\n        in: stream of received (gray demapped) decimal values\n    \n    Output:\n        out: stream of deinterleaved codewords (one per byte)", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/lora_sdr_dewhitening.block.yml": {"id": "lora_sdr_dewhitening", "label": "Dewhitening", "category": "[LoRa_RX]", "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "import lora_sdr", "make": "lora_sdr.dewhitening()"}, "documentation": "Dewhiten the payload data.\n    Input:\n        in: stream of payload and CRC nibbles(one per byte)\n    Output:\n        out: dewhitened payload bytes (and CRC if present)", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/lora_sdr_fft_demod.block.yml": {"id": "lora_sdr_fft_demod", "label": "fft_demod", "category": "[LoRa_RX]", "parameters": [{"id": "sf", "label": "Sf", "dtype": "int"}, {"id": "impl_head", "label": "Impl_head", "dtype": "bool"}], "inputs": [{"domain": "stream", "dtype": "complex", "vlen": "${ 2**sf }"}], "outputs": [{"domain": "stream", "dtype": "int"}], "templates": {"imports": "import lora_sdr", "make": "lora_sdr.fft_demod( ${sf}, ${impl_head})"}, "documentation": "Recover the value of a lora symbol using argmax(DFT(lora_symbol \\u2A00\\ ref_downchirp)   \n    Parameters: \n        sf: spreading factor        \n        impl_head: usage of an implicit header(explicit will be used otherwise)\n    Input:        \n        in: vector of 2^sf complex samples\n    Output:        \n        out: stream of lora symbol decimal values", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/lora_sdr_frame_src.block.yml": {"id": "lora_sdr_frame_src", "label": "Frame src", "category": "[LoRa_mu]", "parameters": [{"id": "sf", "label": "Sf", "dtype": "int"}, {"id": "pay_len", "label": "Pay_len", "dtype": "int"}, {"id": "delay", "label": "Delay", "dtype": "int"}, {"id": "offset", "label": "Offset", "dtype": "int"}, {"id": "cfo", "label": "Cfo", "dtype": "float"}, {"id": "n_frames", "label": "N_frames", "dtype": "int"}, {"id": "os_factor", "label": "Os factor", "dtype": "int"}, {"id": "rand_sto", "label": "Rand sto", "dtype": "bool"}], "outputs": [{"label": "signal", "domain": "stream", "dtype": "complex"}, {"label": "symb", "domain": "stream", "dtype": "short", "optional": true}], "templates": {"imports": "import lora_sdr", "make": "lora_sdr.frame_src(${sf}, ${pay_len}, ${delay}, ${offset}, ${cfo}, ${n_frames}, ${os_factor}, ${rand_sto})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/lora_sdr_frame_sync.block.yml": {"id": "lora_sdr_frame_sync", "label": "Frame sync", "category": "[LoRa_RX]", "parameters": [{"id": "samp_rate", "label": "Samp_rate", "dtype": "float", "hide": "all"}, {"id": "bandwidth", "label": "Bandwidth", "dtype": "int"}, {"id": "sf", "label": "Sf", "dtype": "int"}, {"id": "impl_head", "label": "Impl_head", "dtype": "bool"}, {"id": "sync_word", "label": "Sync word", "dtype": "int_vector", "default": 18, "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "complex"}, {"domain": "message", "id": "frame_info"}], "outputs": [{"domain": "stream", "dtype": "complex", "vlen": "${ 2**sf }"}], "templates": {"imports": "import lora_sdr", "make": "lora_sdr.frame_sync(${bandwidth}, ${bandwidth}, ${sf}, ${impl_head}, ${sync_word})"}, "documentation": "Block taking care of the preamble detection, CFO and STO estimation and correction.\n    Parameters:\n        Bandwidth: Bandwidth\n        sf: spreading factor\n        impl_head: usage of an implicit header (explicit will be used otherwise)\n        sync_word: The frame sync word. Can be specified as an hex or dec value (e.g. 0x12 or 18), or directly as the decimal values modulating the two network identifiers upchirps in the preamble (e.g [8,16]).\n\n    Input:\n        in: stream of complex valued sampled\n        frame_info: message produced by the block header decoder, containing the frame coding rate, the payload length, and the presence of a payload crc.\n\n    Output:\n        out: stream of vectors of 2^sf samples", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/lora_sdr_gray_decode.block.yml": {"id": "lora_sdr_gray_decode", "label": "Gray mapping", "category": "[LoRa_TX]", "parameters": [{"id": "sf", "label": "Sf", "dtype": "int"}], "inputs": [{"domain": "stream", "dtype": "int"}], "outputs": [{"domain": "stream", "dtype": "int"}], "templates": {"imports": "import lora_sdr", "make": "lora_sdr.gray_decode(${sf})"}, "documentation": "Apply the gray mapping operation. (Corresponding to a reverse gray encoding with a shift)\n    Parameters:\n        sf: spreading factor\n    Input:\n        in: decimal value\n    Output:\n        out: decimal value mapped", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/lora_sdr_gray_enc.block.yml": {"id": "lora_sdr_gray_enc", "label": "Gray demap", "category": "[LoRa_RX]", "inputs": [{"domain": "stream", "dtype": "int"}], "outputs": [{"domain": "stream", "dtype": "int"}], "templates": {"imports": "import lora_sdr", "make": "lora_sdr.gray_enc()"}, "documentation": "Apply the gray demapping operation. (Corresponding to a gray encoding with a shift)\n    Input:\n        in: decimal value gray mapped\n    Output:\n        out: decimal value demapped", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/lora_sdr_hamming_dec.block.yml": {"id": "lora_sdr_hamming_dec", "label": "Hamming dec", "category": "[LoRa_RX]", "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "import lora_sdr", "make": "lora_sdr.hamming_dec()"}, "documentation": "Hamming decoder using the correcting capabilities of coding rates 4/8 and 4/7.\n(As implemented now, we can detect errors with coding rates 4/6 and 4/5 but don't do anything with this information.)\n    Input:\n        in: Stream of bytes containing each a codeword\n    Output:\n        out: stream of bytes containing ones nibble of payload each", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/lora_sdr_hamming_enc.block.yml": {"id": "lora_sdr_hamming_enc", "label": "Hamming enc", "category": "[LoRa_TX]", "parameters": [{"id": "cr", "label": "Cr", "dtype": "int"}, {"id": "sf", "label": "Sf", "dtype": "int"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "import lora_sdr", "make": "lora_sdr.hamming_enc(${cr}, ${sf})"}, "documentation": "Appends the parity bits to each nibble in accordance to the coding rate.\n    Parameters:\n        Cr: coding rate\n        sf: spreading factor\n    Input:\n        in: stream of nibble\n    Output:\n        out: stream of bytes containing a nibble of data and corresponding parity bits.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/lora_sdr_header.block.yml": {"id": "lora_sdr_header", "label": "Add header", "category": "[LoRa_TX]", "parameters": [{"id": "impl_head", "label": "Impl_head", "dtype": "bool"}, {"id": "has_crc", "label": "Has_crc", "dtype": "bool", "default": "False"}, {"id": "cr", "label": "Cr", "dtype": "int", "default": "3"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "import lora_sdr", "make": "lora_sdr.header(${impl_head}, ${has_crc}, ${cr})"}, "documentation": "Add the explicit header in the beginning of a frame if this mode is specified.\n    Parameters:\n        impl_head: indicate to use the implicit header mode (explicit otherwise)\n        has_crc: indicate the presence of a payload crc\n        CR: coding rate\n    Input:\n        in: stream of payload nibbles\n        msg: payload as a string\n    Output:\n        out: stream of header and payload nibbles", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/lora_sdr_header_decoder.block.yml": {"id": "lora_sdr_header_decoder", "label": "Header decoder", "category": "[LoRa_RX]", "parameters": [{"id": "impl_head", "label": "Impl_head", "dtype": "bool"}, {"id": "cr", "label": "Cr", "dtype": "int", "default": "3"}, {"id": "pay_len", "label": "Pay_len", "dtype": "int", "default": "255"}, {"id": "has_crc", "label": "Has_crc", "dtype": "bool", "default": "False"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "byte"}, {"domain": "message", "id": "frame_info"}], "templates": {"imports": "import lora_sdr", "make": "lora_sdr.header_decoder(${impl_head}, ${cr}, ${pay_len}, ${has_crc})"}, "documentation": "Recovers information present in the header of a frame and send it to the frame_sync block. In implicit header mode, the values given as parameters will be transmitted.     \n    Parameters:\n        impl_head: indicate the usage of implicit header mode (explicit otherwise)\n        cr: coding rate(will be ignored in explicit header mode)        \n        pay_len: payload length in bytes(will be ignored in explicit header mode)        \n        has_crc: indicate the presence of a payload CRC(will be ignored in explicit header mode)\n    Input:        \n        in: stream of nibbles containing the header, payload (and CRC if used)        \n        new_frame: indicate the beginning of a new frame   \n    Output:        \n        out: stream of nibbles containing payload (and CRC)   \n        frame_info: message containing info of the header such as: coding rate, payload length, payload crc presence, explicit header checksum error  ", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/lora_sdr_interleaver.block.yml": {"id": "lora_sdr_interleaver", "label": "Interleaver", "category": "[LoRa_TX]", "parameters": [{"id": "cr", "label": "Cr", "dtype": "int"}, {"id": "sf", "label": "Sf", "dtype": "int"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "int"}], "templates": {"imports": "import lora_sdr", "make": "lora_sdr.interleaver(${cr}, ${sf})"}, "documentation": "Interleaves multiple codewords together based on the spreading factor.\n    Parameters:\n        cr: coding rate\n        sf: spreading factor\n    Input:\n        in: stream of bytes containing a codeword each\n    Output:\n        out: stream of interleaved codewords as decimal values", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/lora_sdr_modulate.block.yml": {"id": "lora_sdr_modulate", "label": "Modulate", "category": "[LoRa_TX]", "parameters": [{"id": "sf", "label": "Sf", "dtype": "int"}, {"id": "samp_rate", "label": "Samp_rate", "dtype": "int", "hide": "all"}, {"id": "bw", "label": "Bw", "dtype": "int"}, {"id": "sync_words", "label": "Sync words", "dtype": "int_vector", "hide": "part", "default": 18}], "inputs": [{"domain": "stream", "dtype": "int"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "import lora_sdr", "make": "lora_sdr.modulate(${sf}, ${bw}, ${bw}, ${sync_words})"}, "documentation": "Add the preamble to the frame and modulate lora symbols accordingly to the input decimal values.\n    Parameters:\n        sf: spreading factor\n        Bw: bandwidth\n        sync_word: The frame sync word. Can be specified as an hex or dec value (e.g. 0x12 or 18), or directly as the decimal values modulating the two network identifiers upchirps in the preamble (e.g [8,16]).\n    Input:\n        in: stream of decimal symbol values\n    Output:\n        out: stream of complex valued samples", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/lora_sdr_mu_demod.block.yml": {"id": "lora_sdr_mu_demod", "label": "mu_demod", "category": "[LoRa_mu]", "parameters": [{"id": "sf", "label": "Sf", "dtype": "int"}, {"id": "Ku", "label": "Ku", "dtype": "int"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"label": "S1", "domain": "stream", "dtype": "short"}, {"label": "S2", "domain": "stream", "dtype": "short"}, {"label": "SNR", "domain": "stream", "dtype": "float"}], "templates": {"imports": "import lora_sdr", "make": "lora_sdr.mu_demod(${sf}, ${Ku})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/lora_sdr_mu_detection.block.yml": {"id": "lora_sdr_mu_detection", "label": "Mu detection", "category": "[LoRa_mu]", "parameters": [{"id": "sf", "label": "Sf", "dtype": "int"}, {"id": "os_factor", "label": "Os_factor", "dtype": "int"}, {"id": "snr_threshold", "label": "Snr_threshold", "dtype": "int"}], "inputs": [{"domain": "stream", "dtype": "complex"}, {"domain": "message", "id": "noise_est", "optional": true}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "import lora_sdr", "make": "lora_sdr.mu_detection(${sf}, ${os_factor}, ${snr_threshold})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/lora_sdr_mu_synchro.block.yml": {"id": "lora_sdr_mu_synchro", "label": "Mu synchro", "category": "[LoRa_mu]", "parameters": [{"id": "sf", "label": "Sf", "dtype": "int"}, {"id": "os_factor", "label": "Os_factor", "dtype": "int"}, {"id": "len", "label": "Len", "dtype": "int"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}, {"label": "sync_state", "domain": "stream", "dtype": "int", "optional": true}], "templates": {"imports": "import lora_sdr", "make": "lora_sdr.mu_synchro(${sf}, ${os_factor}, ${len})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/lora_sdr_noise_est.block.yml": {"id": "lora_sdr_noise_est", "label": "Noise est", "category": "[LoRa_mu]", "parameters": [{"id": "n_samples", "label": "N_samples", "dtype": "int"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "message", "id": "noise_est"}], "templates": {"imports": "import lora_sdr", "make": "lora_sdr.noise_est(${n_samples})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/lora_sdr_partial_ml.block.yml": {"id": "lora_sdr_partial_ml", "label": "Partial ml", "category": "[LoRa_mu]", "parameters": [{"id": "sf", "label": "Sf", "dtype": "int", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "_id", "label": "Id", "dtype": "int"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "float"}, {"domain": "stream", "dtype": "complex", "vlen": "${ 2**sf }"}, {"domain": "stream", "dtype": "complex", "vlen": "${ 2**sf }"}], "templates": {"imports": "import lora_sdr", "make": "lora_sdr.partial_ml(${sf}, ${_id})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/lora_sdr_signal_detector.block.yml": {"id": "lora_sdr_signal_detector", "label": "Signal detector", "category": "[LoRa_mu]", "parameters": [{"id": "sf", "label": "Sf", "dtype": "raw"}, {"id": "os_factor", "label": "Os_factor", "dtype": "raw"}, {"id": "threshold", "label": "Threshold", "dtype": "real"}, {"id": "margin", "label": "Margin", "dtype": "int"}, {"id": "fft_symb", "label": "Fft_symb", "dtype": "int"}, {"id": "transp_len", "label": "Transp_len", "dtype": "int"}], "inputs": [{"domain": "stream", "dtype": "complex"}], "outputs": [{"domain": "stream", "dtype": "complex"}], "templates": {"imports": "import lora_sdr", "make": "lora_sdr.signal_detector(${sf}, ${os_factor}, ${threshold}, ${margin}, ${fft_symb}, ${transp_len})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/lora_sdr_whitening.block.yml": {"id": "lora_sdr_whitening", "label": "Whitening", "category": "[LoRa_TX]", "inputs": [{"domain": "stream", "dtype": "byte", "optional": true}, {"domain": "message", "id": "msg", "optional": true}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "import lora_sdr", "make": "lora_sdr.whitening()"}, "documentation": "Whiten the payload data with a pseudo random sequence and outputs bytes containing only one nibble of payload each. Only one input should be used at a time.\n    Input:\n        msg: the payload as a string\n        in: a binary file containing payload bytes separated by commas\n    Output:\n        out: Stream of whitened payload nibbles", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/message.domain.yml": {"id": "message", "label": "Message", "color": "#FFFFFF", "multiple_connections_per_input": true, "multiple_connections_per_output": true, "templates": [{"type": ["message", "message"], "connect": "self.msg_connect(${ make_port_sig(source) }, ${ make_port_sig(sink) })"}]}, "/usr/local/share/gnuradio/grc/blocks/note.block.yml": {"id": "note", "label": "Note", "flags": ["python", "cpp"], "parameters": [{"id": "note", "label": "Note", "dtype": "string"}], "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/options.block.yml": {"id": "options", "label": "Options", "flags": ["python", "cpp"], "parameters": [{"id": "title", "label": "Title", "dtype": "string", "hide": "${ ('none' if title else 'part') }"}, {"id": "author", "label": "Author", "dtype": "string", "hide": "${ ('none' if author else 'part') }"}, {"id": "copyright", "label": "Copyright", "dtype": "string", "hide": "${ ('none' if copyright else 'part') }"}, {"id": "description", "label": "Description", "dtype": "string", "hide": "${ ('none' if description else 'part') }"}, {"id": "window_size", "label": "Canvas Size", "dtype": "int_vector", "hide": "part"}, {"id": "output_language", "label": "Output Language", "dtype": "enum", "default": "python", "options": ["python", "cpp"], "option_labels": ["Python", "C++"]}, {"id": "generate_options", "label": "Generate Options", "dtype": "enum", "default": "qt_gui", "options": ["qt_gui", "bokeh_gui", "no_gui", "hb", "hb_qt_gui"], "option_labels": ["QT GUI", "Bokeh GUI", "No GUI", "Hier Block", "Hier Block (QT GUI)"]}, {"id": "gen_linking", "label": "Linking", "dtype": "enum", "default": "dynamic", "options": ["dynamic", "static"], "option_labels": ["Dynamic", "Static"], "hide": "all"}, {"id": "gen_cmake", "label": "Generate CMakeLists.txt", "dtype": "enum", "default": "On", "options": ["On", "Off"], "hide": "${ ('part' if output_language == 'cpp' else 'all') }"}, {"id": "cmake_opt", "label": "CMake options", "dtype": "string", "default": "", "hide": "${ ('part' if output_language == 'cpp' else 'all') }"}, {"id": "category", "label": "Category", "dtype": "string", "default": "[GRC Hier Blocks]", "hide": "${ ('none' if generate_options.startswith('hb') else 'all') }"}, {"id": "run_options", "label": "Run Options", "dtype": "enum", "default": "prompt", "options": ["run", "prompt"], "option_labels": ["Run to Completion", "Prompt for Exit"], "hide": "${ ('none' if generate_options == 'no_gui' else 'all') }"}, {"id": "placement", "label": "Widget Placement", "dtype": "int_vector", "default": "(0,0)", "hide": "${ ('part' if generate_options == 'bokeh_gui' else 'all') }"}, {"id": "sizing_mode", "label": "Sizing Mode", "dtype": "enum", "default": "fixed", "options": ["fixed", "stretch_both", "scale_width", "scale_height", "scale_both"], "option_labels": ["Fixed", "Stretch Both", "Scale Width", "Scale Height", "Scale Both"], "hide": "${ ('part' if generate_options == 'bokeh_gui' else 'all') }"}, {"id": "run", "label": "Run", "dtype": "bool", "default": "True", "options": ["True", "False"], "option_labels": ["Autostart", "Off"], "hide": "${ ('all' if generate_options not in ('qt_gui', 'bokeh_gui') else ('part' if run else 'none')) }"}, {"id": "max_nouts", "label": "Max Number of Output", "dtype": "int", "default": "0", "hide": "${ ('all' if generate_options.startswith('hb') else ('none' if max_nouts else 'part')) }"}, {"id": "realtime_scheduling", "label": "Realtime Scheduling", "dtype": "enum", "options": ["", "1"], "option_labels": ["Off", "On"], "hide": "${ ('all' if generate_options.startswith('hb') else ('none' if realtime_scheduling else 'part')) }"}, {"id": "qt_qss_theme", "label": "QSS Theme", "dtype": "file_open", "hide": "${ ('all' if generate_options != 'qt_gui' else ('none' if qt_qss_theme else 'part')) }"}, {"id": "thread_safe_setters", "label": "Thread-safe setters", "category": "Advanced", "dtype": "enum", "options": ["", "1"], "option_labels": ["Off", "On"], "hide": "part"}, {"id": "run_command", "label": "Run Command", "category": "Advanced", "dtype": "string", "default": "{python} -u {filename}", "hide": "${ ('all' if generate_options.startswith('hb') else 'part') }"}, {"id": "hier_block_src_path", "label": "Hier Block Source Path", "category": "Advanced", "dtype": "string", "default": ".:", "hide": "part"}], "asserts": ["${ not window_size or len(window_size) == 2 }", "${ not window_size or 300 <= window_size[0] <= 4096 }", "${ not window_size or 300 <= window_size[1] <= 4096 }", "${ len(placement) == 4 or len(placement) == 2 }", "${ all(i >= 0 for i in placement) }"], "templates": {"imports": "from gnuradio import gr\nfrom gnuradio.filter import firdes\nimport sys\nimport signal\n% if generate_options == 'qt_gui':\nfrom PyQt5 import Qt\n% endif\n% if generate_options == 'bokeh_gui':\nimport time\nimport functools\nfrom bokeh.client import push_session\nfrom bokeh.plotting import curdoc\n% endif\n% if not generate_options.startswith('hb'):\nfrom argparse import ArgumentParser\nfrom gnuradio.eng_arg import eng_float, intx\nfrom gnuradio import eng_notation\n% endif", "callbacks": ["if ${run}: self.start()\nelse: self.stop(); self.wait()"]}, "cpp_templates": {"includes": ["#include <gnuradio/top_block.h>"]}, "documentation": "The options block sets special parameters for the flow graph. Only one option block is allowed per flow graph.\n\nTitle, author, and description parameters are for identification purposes.\n\nThe window size controls the dimensions of the flow graph editor. The window size (width, height) must be between (300, 300) and (4096, 4096).\n\nThe generate options controls the type of code generated. Non-graphical flow graphs should avoid using graphical sinks or graphical variable controls.\n\nIn a graphical application, run can be controlled by a variable to start and stop the flowgraph at runtime.\n\nThe id of this block determines the name of the generated file and the name of the class. For example, an id of my_block will generate the file my_block.py and class my_block(gr....\n\nThe category parameter determines the placement of the block in the block selection window. The category only applies when creating hier blocks. To put hier blocks into the root category, enter / for the category.\n\nThe Max Number of Output is the maximum number of output items allowed for any block in the flowgraph; to disable this set the max_nouts equal to 0.Use this to adjust the maximum latency a flowgraph can exhibit.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/pad_sink.block.yml": {"id": "pad_sink", "label": "Pad Sink", "flags": ["python", "cpp"], "parameters": [{"id": "label", "label": "Label", "dtype": "string", "default": "out"}, {"id": "type", "label": "Input Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte", "bit", "message", ""], "option_labels": ["Complex", "Float", "Int", "Short", "Byte", "Bits", "Message", "Wildcard"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char", "gr.sizeof_char", "0", "0"], "cpp_size": ["sizeof(gr_complex)", "sizeof(float)", "sizeof(int)", "sizeof(short)", "sizeof(char)", "sizeof(char)", "0", "0"]}, "hide": "part"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "num_streams", "label": "Num Streams", "dtype": "int", "default": "1", "hide": "part"}, {"id": "optional", "label": "Optional", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["Optional", "Required"], "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }", "multiplicity": "${ num_streams }", "optional": "${optional}"}], "asserts": ["${ vlen > 0 }", "${ num_streams > 0 }"], "documentation": "The inputs of this block will become the outputs to this flow graph when it is instantiated as a hierarchical block.\n\nPad sink will be ordered alphabetically by their ids. The first pad sink will have an index of 0.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/pad_source.block.yml": {"id": "pad_source", "label": "Pad Source", "flags": ["python", "cpp"], "parameters": [{"id": "label", "label": "Label", "dtype": "string", "default": "in"}, {"id": "type", "label": "Output Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte", "bit", "message", ""], "option_labels": ["Complex", "Float", "Int", "Short", "Byte", "Bits", "Message", "Wildcard"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char", "gr.sizeof_char", "0", "0"], "cpp_size": ["sizeof(gr_complex)", "sizeof(float)", "sizeof(int)", "sizeof(short)", "sizeof(char)", "sizeof(char)", "0", "0"]}, "hide": "part"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "num_streams", "label": "Num Streams", "dtype": "int", "default": "1", "hide": "part"}, {"id": "optional", "label": "Optional", "dtype": "bool", "default": "False", "options": ["True", "False"], "option_labels": ["Optional", "Required"], "hide": "part"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }", "multiplicity": "${ num_streams }", "optional": "${optional}"}], "asserts": ["${ vlen > 0 }", "${ num_streams > 0 }"], "documentation": "The outputs of this block will become the inputs to this flow graph when it is instantiated as a hierarchical block.\n\nPad sources will be ordered alphabetically by their ids. The first pad source will have an index of 0.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/parameter.block.yml": {"id": "parameter", "label": "Parameter", "flags": ["show_id", "python", "cpp"], "parameters": [{"id": "label", "label": "Label", "dtype": "string", "hide": "${ ('none' if label else 'part') }"}, {"id": "value", "label": "Value", "dtype": "${ type.type }", "default": "0"}, {"id": "type", "label": "Type", "dtype": "enum", "options": ["", "complex", "eng_float", "intx", "long", "str"], "option_labels": ["None", "Complex", "Float", "Int", "Long", "String"], "option_attributes": {"type": ["raw", "complex", "real", "int", "int", "string"]}, "hide": "${ ('none' if type else 'part') }"}, {"id": "short_id", "label": "Short ID", "dtype": "string", "hide": "${ 'all' if not type else ('none' if short_id else 'part') }"}, {"id": "hide", "label": "Show", "dtype": "enum", "options": ["none", "part"], "option_labels": ["Always", "Only in Properties"], "hide": "part"}], "asserts": ["${ len(short_id) in (0, 1) }", "${ short_id == '' or short_id.isalpha() }"], "templates": {"var_make": "self.${id} = ${id}", "make": "${value}"}, "cpp_templates": {"var_make": "${type.type} ${id} = ${id};", "make": "${value}"}, "documentation": "This block represents a parameter to the flow graph. A parameter can be used to pass command line arguments into a top block. Or, parameters can pass arguments into an instantiated hierarchical block.\n\nThe parameter value cannot depend on any variables.\n\nLeave the label blank to use the parameter id as the label.\n\nWhen type is not None, this parameter also becomes a command line option of the form:\n\n-[short_id] --[id] [value]\n\nThe Short ID field may be left blank.\n\nTo disable showing the parameter on the hierarchical block in GRC, use Only in Properties option in the Show field.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/qtgui.tree.yml": {"[Core]": [{"Instrumentation": [{"QT": ["qtgui_freq_sink_x", "qtgui_time_sink_x", "qtgui_const_sink_x", "qtgui_waterfall_sink_x", "qtgui_time_raster_sink_x", "qtgui_bercurve_sink", "qtgui_histogram_sink_x", "qtgui_number_sink", "qtgui_vector_sink_f", "qtgui_sink_x"]}]}, {"GUI Widgets": [{"QT": ["qtgui_tab_widget", "variable_qtgui_range", "variable_qtgui_chooser", "variable_qtgui_check_box", "variable_qtgui_push_button", "variable_qtgui_entry", "variable_qtgui_label", "qtgui_edit_box_msg"]}]}]}, "/usr/local/share/gnuradio/grc/blocks/qtgui_ber_sink_b.block.yml": {"id": "qtgui_bercurve_sink", "label": "QT GUI Bercurve Sink", "flags": ["python"], "parameters": [{"id": "esno", "label": "esno", "dtype": "raw", "default": "numpy.arange(0.0, 4.0, .5)", "hide": "part"}, {"id": "berminerrors", "label": "Min. BER Errs.", "dtype": "int", "default": "100"}, {"id": "berlimit", "label": "BER Limit", "dtype": "real", "default": "-7.0"}, {"id": "num_curves", "label": "Num Curves", "dtype": "int", "default": "1", "hide": "part"}, {"id": "curvenames", "label": "Curve Names", "dtype": "raw", "default": "[]", "hide": "part"}, {"id": "ymin", "label": "Y min", "dtype": "real", "default": "-10", "hide": "part"}, {"id": "ymax", "label": "Y max", "dtype": "real", "default": "0", "hide": "part"}, {"id": "update_time", "label": "Update Period", "dtype": "real", "default": "0.10", "hide": "part"}, {"id": "gui_hint", "label": "GUI Hint", "dtype": "gui_hint", "hide": "part"}, {"id": "label1", "label": "Line 1 Label", "category": "Config", "dtype": "string", "hide": "${ ('part' if int(num_curves) >= 1 else 'all') }"}, {"id": "width1", "label": "Line 1 Width", "category": "Config", "dtype": "int", "default": "1", "hide": "${ ('part' if int(num_curves) >= 1 else 'all') }"}, {"id": "color1", "label": "Line 1 Color", "category": "Config", "dtype": "enum", "options": ["\"blue\"", "\"red\"", "\"green\"", "\"black\"", "\"cyan\"", "\"magenta\"", "\"yellow\"", "\"dark red\"", "\"dark green\"", "\"Dark Blue\""], "option_labels": ["Blue", "Red", "Green", "Black", "Cyan", "Magenta", "Yellow", "Dark Red", "Dark Green", "Dark Blue"], "hide": "${ ('part' if int(num_curves) >= 1 else 'all') }"}, {"id": "style1", "label": "Line 1 Style", "category": "Config", "dtype": "enum", "options": ["1", "2", "3", "4", "5", "0"], "option_labels": ["Solid", "Dash", "Dots", "Dash-Dot", "Dash-Dot-Dot", "None"], "hide": "${ ('part' if int(num_curves) >= 1 else 'all') }"}, {"id": "marker1", "label": "Line 1 Marker", "category": "Config", "dtype": "enum", "options": ["0", "1", "2", "3", "4", "6", "7", "8", "9", "-1"], "option_labels": ["Circle", "Rectangle", "Diamond", "Triangle", "Down Triangle", "Left Triangle", "Right Triangle", "Cross", "X-Cross", "None"], "hide": "${ ('part' if int(num_curves) >= 1 else 'all') }"}, {"id": "alpha1", "label": "Line 1 Alpha", "category": "Config", "dtype": "float", "default": "1.0", "hide": "${ ('part' if int(num_curves) >= 1 else 'all') }"}, {"id": "label2", "label": "Line 2 Label", "base_key": "label1", "hide": "${ ('part' if int(num_curves) >= 2 else 'all') }"}, {"id": "width2", "label": "Line 2 Width", "base_key": "width1", "hide": "${ ('part' if int(num_curves) >= 2 else 'all') }"}, {"id": "color2", "label": "Line 2 Color", "base_key": "color1", "default": "\"red\"", "hide": "${ ('part' if int(num_curves) >= 2 else 'all') }"}, {"id": "style2", "label": "Line 2 Style", "base_key": "style1", "hide": "${ ('part' if int(num_curves) >= 2 else 'all') }"}, {"id": "marker2", "label": "Line 2 Marker", "base_key": "marker1", "hide": "${ ('part' if int(num_curves) >= 2 else 'all') }"}, {"id": "alpha2", "label": "Line 2 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(num_curves) >= 2 else 'all') }"}, {"id": "label3", "label": "Line 3 Label", "base_key": "label1", "hide": "${ ('part' if int(num_curves) >= 3 else 'all') }"}, {"id": "width3", "label": "Line 3 Width", "base_key": "width1", "hide": "${ ('part' if int(num_curves) >= 3 else 'all') }"}, {"id": "color3", "label": "Line 3 Color", "base_key": "color1", "default": "\"green\"", "hide": "${ ('part' if int(num_curves) >= 3 else 'all') }"}, {"id": "style3", "label": "Line 3 Style", "base_key": "style1", "hide": "${ ('part' if int(num_curves) >= 3 else 'all') }"}, {"id": "marker3", "label": "Line 3 Marker", "base_key": "marker1", "hide": "${ ('part' if int(num_curves) >= 3 else 'all') }"}, {"id": "alpha3", "label": "Line 3 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(num_curves) >= 3 else 'all') }"}, {"id": "label4", "label": "Line 4 Label", "base_key": "label1", "hide": "${ ('part' if int(num_curves) >= 4 else 'all') }"}, {"id": "width4", "label": "Line 4 Width", "base_key": "width1", "hide": "${ ('part' if int(num_curves) >= 4 else 'all') }"}, {"id": "color4", "label": "Line 4 Color", "base_key": "color1", "default": "\"black\"", "hide": "${ ('part' if int(num_curves) >= 4 else 'all') }"}, {"id": "style4", "label": "Line 4 Style", "base_key": "style1", "hide": "${ ('part' if int(num_curves) >= 4 else 'all') }"}, {"id": "marker4", "label": "Line 4 Marker", "base_key": "marker1", "hide": "${ ('part' if int(num_curves) >= 4 else 'all') }"}, {"id": "alpha4", "label": "Line 4 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(num_curves) >= 4 else 'all') }"}, {"id": "label5", "label": "Line 5 Label", "base_key": "label1", "hide": "${ ('part' if int(num_curves) >= 5 else 'all') }"}, {"id": "width5", "label": "Line 5 Width", "base_key": "width1", "hide": "${ ('part' if int(num_curves) >= 5 else 'all') }"}, {"id": "color5", "label": "Line 5 Color", "base_key": "color1", "default": "\"cyan\"", "hide": "${ ('part' if int(num_curves) >= 5 else 'all') }"}, {"id": "style5", "label": "Line 5 Style", "base_key": "style1", "hide": "${ ('part' if int(num_curves) >= 5 else 'all') }"}, {"id": "marker5", "label": "Line 5 Marker", "base_key": "marker1", "hide": "${ ('part' if int(num_curves) >= 5 else 'all') }"}, {"id": "alpha5", "label": "Line 5 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(num_curves) >= 5 else 'all') }"}, {"id": "label6", "label": "Line 6 Label", "base_key": "label1", "hide": "${ ('part' if int(num_curves) >= 6 else 'all') }"}, {"id": "width6", "label": "Line 6 Width", "base_key": "width1", "hide": "${ ('part' if int(num_curves) >= 6 else 'all') }"}, {"id": "color6", "label": "Line 6 Color", "base_key": "color1", "default": "\"magenta\"", "hide": "${ ('part' if int(num_curves) >= 6 else 'all') }"}, {"id": "style6", "label": "Line 6 Style", "base_key": "style1", "hide": "${ ('part' if int(num_curves) >= 6 else 'all') }"}, {"id": "marker6", "label": "Line 6 Marker", "base_key": "marker1", "hide": "${ ('part' if int(num_curves) >= 6 else 'all') }"}, {"id": "alpha6", "label": "Line 6 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(num_curves) >= 6 else 'all') }"}, {"id": "label7", "label": "Line 7 Label", "base_key": "label1", "hide": "${ ('part' if int(num_curves) >= 7 else 'all') }"}, {"id": "width7", "label": "Line 7 Width", "base_key": "width1", "hide": "${ ('part' if int(num_curves) >= 7 else 'all') }"}, {"id": "color7", "label": "Line 7 Color", "base_key": "color1", "default": "\"yellow\"", "hide": "${ ('part' if int(num_curves) >= 7 else 'all') }"}, {"id": "style7", "label": "Line 7 Style", "base_key": "style1", "hide": "${ ('part' if int(num_curves) >= 7 else 'all') }"}, {"id": "marker7", "label": "Line 7 Marker", "base_key": "marker1", "hide": "${ ('part' if int(num_curves) >= 7 else 'all') }"}, {"id": "alpha7", "label": "Line 7 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(num_curves) >= 7 else 'all') }"}, {"id": "label8", "label": "Line 8 Label", "base_key": "label1", "hide": "${ ('part' if int(num_curves) >= 8 else 'all') }"}, {"id": "width8", "label": "Line 8 Width", "base_key": "width1", "hide": "${ ('part' if int(num_curves) >= 8 else 'all') }"}, {"id": "color8", "label": "Line 8 Color", "base_key": "color1", "default": "\"dark red\"", "hide": "${ ('part' if int(num_curves) >= 8 else 'all') }"}, {"id": "style8", "label": "Line 8 Style", "base_key": "style1", "hide": "${ ('part' if int(num_curves) >= 8 else 'all') }"}, {"id": "marker8", "label": "Line 8 Marker", "base_key": "marker1", "hide": "${ ('part' if int(num_curves) >= 8 else 'all') }"}, {"id": "alpha8", "label": "Line 8 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(num_curves) >= 8 else 'all') }"}, {"id": "label9", "label": "Line 9 Label", "base_key": "label1", "hide": "${ ('part' if int(num_curves) >= 9 else 'all') }"}, {"id": "width9", "label": "Line 9 Width", "base_key": "width1", "hide": "${ ('part' if int(num_curves) >= 9 else 'all') }"}, {"id": "color9", "label": "Line 9 Color", "base_key": "color1", "default": "\"dark green\"", "hide": "${ ('part' if int(num_curves) >= 9 else 'all') }"}, {"id": "style9", "label": "Line 9 Style", "base_key": "style1", "hide": "${ ('part' if int(num_curves) >= 9 else 'all') }"}, {"id": "marker9", "label": "Line 9 Marker", "base_key": "marker1", "hide": "${ ('part' if int(num_curves) >= 9 else 'all') }"}, {"id": "alpha9", "label": "Line 9 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(num_curves) >= 9 else 'all') }"}, {"id": "label10", "label": "Line 10 Label", "base_key": "label1", "hide": "${ ('part' if int(num_curves) >= 10 else 'all') }"}, {"id": "width10", "label": "Line 10 Width", "base_key": "width1", "hide": "${ ('part' if int(num_curves) >= 10 else 'all') }"}, {"id": "color10", "label": "Line 10 Color", "base_key": "color1", "default": "\"dark blue\"", "hide": "${ ('part' if int(num_curves) >= 10 else 'all') }"}, {"id": "style10", "label": "Line 10 Style", "base_key": "style1", "hide": "${ ('part' if int(num_curves) >= 10 else 'all') }"}, {"id": "marker10", "label": "Line 10 Marker", "base_key": "marker1", "hide": "${ ('part' if int(num_curves) >= 10 else 'all') }"}, {"id": "alpha10", "label": "Line 10 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(num_curves) >= 10 else 'all') }"}, {"id": "bus_structure_sink", "default": "list(map(lambda b:list(map(lambda a:b * len(esno) * 2 + a, range(len(esno)*2))), range(num_curves)))", "dtype": "raw", "hide": "all"}], "inputs": [{"domain": "stream", "dtype": "byte", "multiplicity": "${ len(esno)*2*num_curves }"}], "templates": {"imports": "from PyQt5 import Qt\nfrom gnuradio import qtgui\nimport sip\nimport numpy", "make": "<%\n    win = 'self._%s_win'%id\n%>\\\nqtgui.ber_sink_b(\n    ${esno}, #range of esnos\n    ${num_curves}, #number of curves\n    ${berminerrors}, #ensure at least\n    ${berlimit}, #cutoff\n    ${curvenames} #indiv. curve names\n)\nself.${id}.set_update_time(${update_time})\nself.${id}.set_y_axis(${ymin}, ${ymax})\nself.${id}.set_x_axis(${esno}[0], ${esno}[-1])\n\nlabels = [${label1}, ${label2}, ${label3}, ${label4}, ${label5},\n    ${label6}, ${label7}, ${label8}, ${label9}, ${label10}]\nwidths = [${width1}, ${width2}, ${width3}, ${width4}, ${width5},\n    ${width6}, ${width7}, ${width8}, ${width9}, ${width10}]\ncolors = [${color1}, ${color2}, ${color3}, ${color4}, ${color5},\n    ${color6}, ${color7}, ${color8}, ${color9}, ${color10}]\nalphas = [${alpha1}, ${alpha2}, ${alpha3}, ${alpha4}, ${alpha5},\n    ${alpha6}, ${alpha7}, ${alpha8}, ${alpha9}, ${alpha10}]\nstyles = [${style1}, ${style2}, ${style3}, ${style4}, ${style5},\n    ${style6}, ${style7}, ${style8}, ${style9}, ${style10}]\nmarkers = [${marker1}, ${marker2}, ${marker3}, ${marker4}, ${marker5},\n    ${marker6}, ${marker7}, ${marker8}, ${marker9}, ${marker10}]\n    \nfor i in range(${num_curves}):\n    if len(labels[i]) == 0:\n        self.${id}.set_line_label(i, \"Data {0}\".format(i))\n    else:\n        self.${id}.set_line_label(i, labels[i])\n    self.${id}.set_line_width(i, widths[i])\n    self.${id}.set_line_color(i, colors[i])\n    self.${id}.set_line_style(i, styles[i])\n    self.${id}.set_line_marker(i, markers[i])\n    self.${id}.set_line_alpha(i, alphas[i])\n\n${win} = sip.wrapinstance(self.${id}.pyqwidget(), Qt.QWidget)\n${gui_hint() % win}"}, "documentation": "The GUI hint can be used to position the widget within the application.     The hint is of the form [tab_id@tab_index]: [row, col, row_span, col_span].     Both the tab specification and the grid position are optional.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/qtgui_check_box.block.yml": {"id": "variable_qtgui_check_box", "label": "QT GUI Check Box", "flags": ["show_id", "python"], "parameters": [{"id": "label", "label": "Label", "dtype": "string", "hide": "${ ('none' if label else 'part') }"}, {"id": "type", "label": "Type", "dtype": "enum", "default": "int", "options": ["real", "int", "string", "bool", "raw"], "option_labels": ["Float", "Integer", "String", "Boolean", "Any"], "option_attributes": {"conv": ["float", "int", "str", "bool", "eval"]}, "hide": "part"}, {"id": "value", "label": "Default Value", "dtype": "${ type }", "default": "True"}, {"id": "true", "label": "True", "dtype": "${ type }", "default": "True"}, {"id": "false", "label": "False", "dtype": "${ type }", "default": "False"}, {"id": "gui_hint", "label": "GUI Hint", "dtype": "gui_hint", "hide": "part"}], "value": "${ value }", "asserts": ["${value in (true, false)}"], "templates": {"imports": "from PyQt5 import Qt", "var_make": "self.${id} = ${id} = ${value}", "callbacks": ["self.set_${id}(${value})", "self._${id}_callback(${id})"], "make": "<%\n    win = '_%s_check_box'%id\n%>\n${win} = Qt.QCheckBox(${(label if (len(label) - 2 > 0) else repr(id))})\nself._${id}_choices = {True: ${true}, False: ${false}}\nself._${id}_choices_inv = dict((v,k) for k,v in self._${id}_choices.items())\nself._${id}_callback = lambda i: Qt.QMetaObject.invokeMethod(${win}, \"setChecked\", Qt.Q_ARG(\"bool\", self._${id}_choices_inv[i]))\nself._${id}_callback(self.${id})\n${win}.stateChanged.connect(lambda i: self.set_${id}(self._${id}_choices[bool(i)]))\n${gui_hint() % win}"}, "documentation": "This block creates a variable check box. Leave the label blank to use the variable id as the label.\n\nA check box selects between two values of similar type. Te values do not necessarily need to be of boolean type.\n\nThe GUI hint can be used to position the widget within the application. The hint is of the form [tab_id@tab_index]: [row, col, row_span, col_span]. Both the tab specification and the grid position are optional.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/qtgui_chooser.block.yml": {"id": "variable_qtgui_chooser", "label": "QT GUI Chooser", "flags": ["show_id", "python"], "parameters": [{"id": "label", "label": "Label", "dtype": "string", "hide": "${ ('none' if label else 'part') }"}, {"id": "type", "label": "Type", "dtype": "enum", "default": "int", "options": ["real", "int", "string", "raw"], "option_labels": ["Float", "Integer", "String", "Any"], "hide": "part"}, {"id": "num_opts", "label": "Num Options", "dtype": "enum", "default": "3", "options": ["0", "1", "2", "3", "4", "5"], "option_labels": ["List", "1", "2", "3", "4", "5"]}, {"id": "options", "label": "Options", "dtype": "raw", "default": "[0, 1, 2]", "hide": "${ ('all' if int(num_opts) else 'none') }"}, {"id": "labels", "label": "Labels", "dtype": "raw", "default": "[]", "hide": "${ ('all' if int(num_opts) else 'none') }"}, {"id": "value", "label": "Option 0 (Default)", "dtype": "${ type }", "default": "0", "hide": "${ ('none' if int(num_opts) > 0 else 'all') }"}, {"id": "label0", "label": "Label 0", "dtype": "string", "hide": "${ (int(num_opts) > 0) and (label0 and 'none' or 'part') or 'all' }"}, {"id": "option1", "label": "Option 1", "dtype": "${ type }", "default": "1", "hide": "${ ('none' if int(num_opts) > 1 else 'all') }"}, {"id": "label1", "label": "Label 1", "dtype": "string", "hide": "${ (int(num_opts) > 1) and (label1 and 'none' or 'part') or 'all' }"}, {"id": "option2", "label": "Option 2", "dtype": "${ type }", "default": "2", "hide": "${ ('none' if int(num_opts) > 2 else 'all') }"}, {"id": "label2", "label": "Label 2", "dtype": "string", "hide": "${ (int(num_opts) > 2) and (label2 and 'none' or 'part') or 'all' }"}, {"id": "option3", "label": "Option 3", "dtype": "${ type }", "default": "3", "hide": "${ ('none' if int(num_opts) > 3 else 'all') }"}, {"id": "label3", "label": "Label 3", "dtype": "string", "hide": "${ (int(num_opts) > 3) and (label3 and 'none' or 'part') or 'all' }"}, {"id": "option4", "label": "Option 4", "dtype": "${ type }", "default": "4", "hide": "${ ('none' if int(num_opts) > 4 else 'all') }"}, {"id": "label4", "label": "Label 4", "dtype": "string", "hide": "${ (int(num_opts) > 4) and (label4 and 'none' or 'part') or 'all' }"}, {"id": "widget", "label": "Widget", "dtype": "enum", "default": "combo_box", "options": ["combo_box", "radio_buttons"], "option_labels": ["Combo Box", "Radio Buttons"], "hide": "part"}, {"id": "orient", "label": "Orientation", "dtype": "enum", "default": "Qt.QVBoxLayout", "options": ["Qt.QHBoxLayout", "Qt.QVBoxLayout"], "option_labels": ["Horizontal", "Vertical"], "hide": "${ ('part' if widget == 'radio_buttons' else 'all') }"}, {"id": "gui_hint", "label": "GUI Hint", "dtype": "gui_hint", "hide": "part"}], "value": "${ value }", "templates": {"imports": "from PyQt5 import Qt\nfrom PyQt5.QtCore import QObject, pyqtSlot", "var_make": "self.${id} = ${id} = ${value}", "callbacks": ["self.set_${id}(${value})", "self._${id}_callback(${id})"], "make": "<%\n    all_options = [ value, option1, option2, option3, option4 ][:int(num_opts)]\n    all_labels = [ label0, label1, label2, label3, label4 ][:int(num_opts)]\n%>\\\n# Create the options list\n% if int(num_opts):\nself._${id}_options = (\\\n% for ch in all_options:\n${ch}, \\\n% endfor\n)\n% else:\nself._${id}_options = ${options}\n% endif\n# Create the labels list\n% if int(num_opts):\nself._${id}_labels = (\\\n% for lbl in all_labels:\n% if lbl:\n${lbl}, \\\n% else:\nself._${id}_options[${i}], \\\n% endif\n% endfor\n)\n% elif labels:\nself._${id}_labels = ${labels}\n% else:\nself._${id}_map(str, self._${id}_options)\n% endif\n# Create the combo box\n% if widget == 'combo_box':\n<%\n    win = 'self._%s_tool_bar'%id\n%>\\\n${win} = Qt.QToolBar(self)\n${win}.addWidget(Qt.QLabel(${(label if (len(label) - 2 > 0) else repr(id))} + \": \"))\nself._${id}_combo_box = Qt.QComboBox()\n${win}.addWidget(self._${id}_combo_box)\nfor _label in self._${id}_labels: self._${id}_combo_box.addItem(_label)\nself._${id}_callback = lambda i: Qt.QMetaObject.invokeMethod(self._${id}_combo_box, \"setCurrentIndex\", Qt.Q_ARG(\"int\", self._${id}_options.index(i)))\nself._${id}_callback(self.${id})\nself._${id}_combo_box.currentIndexChanged.connect(\n    lambda i: self.set_${id}(self._${id}_options[i]))\n% endif\n# Create the radio buttons\n% if widget == 'radio_buttons':\n<%\n    win = 'self._%s_group_box'%id\n%>\\\n${win} = Qt.QGroupBox(${(label if (len(label) - 2 > 0) else repr(id))} + \": \")\nself._${id}_box = ${orient}()\nclass variable_chooser_button_group(Qt.QButtonGroup):\n    def __init__(self, parent=None):\n        Qt.QButtonGroup.__init__(self, parent)\n    @pyqtSlot(int)\n    def updateButtonChecked(self, button_id):\n        self.button(button_id).setChecked(True)\nself._${id}_button_group = variable_chooser_button_group()\n${win}.setLayout(self._${id}_box)\nfor i, _label in enumerate(self._${id}_labels):\n    radio_button = Qt.QRadioButton(_label)\n    self._${id}_box.addWidget(radio_button)\n    self._${id}_button_group.addButton(radio_button, i)\nself._${id}_callback = lambda i: Qt.QMetaObject.invokeMethod(self._${id}_button_group, \"updateButtonChecked\", Qt.Q_ARG(\"int\", self._${id}_options.index(i)))\nself._${id}_callback(self.${id})\nself._${id}_button_group.buttonClicked[int].connect(\n    lambda i: self.set_${id}(self._${id}_options[i]))\n% endif\n${gui_hint() % win}"}, "documentation": "This block creates a variable with enumerated options. The gui widget is implemented as a combo box or radio button group. Leave the label blank to use the variable id as the label.\n\nChoose the number of options available to your chooser. When the label is left blank, the option will be used as the label. Set the number of options to \"list\" to enter a single list of options and labels. When the labels is an empty list, the options will be used as the label.\n\nThe GUI hint can be used to position the widget within the application. The hint is of the form [tab_id@tab_index]: [row, col, row_span, col_span]. Both the tab specification and the grid position are optional.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/qtgui_const_sink_x.block.yml": {"id": "qtgui_const_sink_x", "label": "QT GUI Constellation Sink", "flags": ["python"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "default": "complex", "options": ["complex", "msg_complex"], "option_labels": ["Complex", "Complex Message"], "option_attributes": {"fcn": ["const_sink_c", "const_sink_c"], "t": ["complex", "message"]}, "hide": "part"}, {"id": "name", "label": "Name", "dtype": "string", "default": "\"\"", "hide": "${ ('none' if len(name) > 0 else 'part') }"}, {"id": "size", "label": "Number of Points", "dtype": "int", "default": "1024", "hide": "${ ('all' if type.startswith('msg')  else 'none') }"}, {"id": "grid", "label": "Grid", "dtype": "enum", "default": "False", "options": ["True", "False"], "option_labels": ["Yes", "No"], "hide": "part"}, {"id": "autoscale", "label": "Autoscale", "dtype": "enum", "default": "False", "options": ["True", "False"], "option_labels": ["Yes", "No"]}, {"id": "ymin", "label": "Y min", "dtype": "real", "default": "-2", "hide": "part"}, {"id": "ymax", "label": "Y max", "dtype": "real", "default": "2", "hide": "part"}, {"id": "xmin", "label": "X min", "dtype": "real", "default": "-2", "hide": "part"}, {"id": "xmax", "label": "X max", "dtype": "real", "default": "2", "hide": "part"}, {"id": "nconnections", "label": "Number of Inputs", "dtype": "int", "default": "1", "hide": "${ ('all' if type.startswith('msg') else 'part') }"}, {"id": "update_time", "label": "Update Period", "dtype": "real", "default": "0.10", "hide": "part"}, {"id": "gui_hint", "label": "GUI Hint", "dtype": "gui_hint", "hide": "part"}, {"id": "tr_mode", "label": "Trigger Mode", "category": "Trigger", "dtype": "enum", "default": "qtgui.TRIG_MODE_FREE", "options": ["qtgui.TRIG_MODE_FREE", "qtgui.TRIG_MODE_AUTO", "qtgui.TRIG_MODE_NORM", "qtgui.TRIG_MODE_TAG"], "option_labels": ["Free", "Auto", "Normal", "Tag"], "hide": "part"}, {"id": "tr_slope", "label": "Trigger Slope", "category": "Trigger", "dtype": "enum", "default": "qtgui.TRIG_MODE_POS", "options": ["qtgui.TRIG_SLOPE_POS", "qtgui.TRIG_SLOPE_NEG"], "option_labels": ["Positive", "Negative"], "hide": "part"}, {"id": "tr_level", "label": "Trigger Level", "category": "Trigger", "dtype": "float", "default": "0.0", "hide": "part"}, {"id": "tr_chan", "label": "Trigger Channel", "category": "Trigger", "dtype": "int", "default": "0", "hide": "part"}, {"id": "tr_tag", "label": "Trigger Tag Key", "category": "Trigger", "dtype": "string", "default": "\"\"", "hide": "part"}, {"id": "legend", "label": "Legend", "category": "Config", "dtype": "enum", "default": "True", "options": ["True", "False"], "option_labels": ["Yes", "No"], "hide": "part"}, {"id": "axislabels", "label": "Axis Labels", "category": "Config", "dtype": "enum", "default": "True", "options": ["True", "False"], "option_labels": ["Yes", "No"], "hide": "part"}, {"id": "label1", "label": "Line 1 Label", "category": "Config", "dtype": "string", "hide": "${ ('part' if int(nconnections) >= 1 else 'all') }"}, {"id": "width1", "label": "Line 1 Width", "category": "Config", "dtype": "int", "default": "1", "hide": "${ ('part' if int(nconnections) >= 1 else 'all') }"}, {"id": "color1", "label": "Line 1 Color", "category": "Config", "dtype": "enum", "options": ["\"blue\"", "\"red\"", "\"green\"", "\"black\"", "\"cyan\"", "\"magenta\"", "\"yellow\"", "\"dark red\"", "\"dark green\"", "\"Dark Blue\""], "option_labels": ["Blue", "Red", "Green", "Black", "Cyan", "Magenta", "Yellow", "Dark Red", "Dark Green", "Dark Blue"], "hide": "${ ('part' if int(nconnections) >= 1 else 'all') }"}, {"id": "style1", "label": "Line 1 Style", "category": "Config", "dtype": "enum", "options": ["0", "1", "2", "3", "4", "5"], "option_labels": ["None", "Solid", "Dash", "Dots", "Dash-Dot", "Dash-Dot-Dot"], "hide": "${ ('part' if int(nconnections) >= 1 else 'all') }"}, {"id": "marker1", "label": "Line 1 Marker", "category": "Config", "dtype": "enum", "options": ["0", "1", "2", "3", "4", "6", "7", "8", "9", "-1"], "option_labels": ["Circle", "Rectangle", "Diamond", "Triangle", "Down Triangle", "Left Triangle", "Right Triangle", "Cross", "X-Cross", "None"], "hide": "${ ('part' if int(nconnections) >= 1 else 'all') }"}, {"id": "alpha1", "label": "Line 1 Alpha", "category": "Config", "dtype": "float", "default": "1.0", "hide": "${ ('part' if int(nconnections) >= 1 else 'all') }"}, {"id": "label2", "label": "Line 2 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 2 else 'all') }"}, {"id": "width2", "label": "Line 2 Width", "base_key": "width1", "hide": "${ ('part' if int(nconnections) >= 2 else 'all') }"}, {"id": "color2", "label": "Line 2 Color", "base_key": "color1", "default": "\"red\"", "hide": "${ ('part' if int(nconnections) >= 2 else 'all') }"}, {"id": "style2", "label": "Line 2 Style", "base_key": "style1", "hide": "${ ('part' if int(nconnections) >= 2 else 'all') }"}, {"id": "marker2", "label": "Line 2 Marker", "base_key": "marker1", "hide": "${ ('part' if int(nconnections) >= 2 else 'all') }"}, {"id": "alpha2", "label": "Line 2 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 2 else 'all') }"}, {"id": "label3", "label": "Line 3 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 3 else 'all') }"}, {"id": "width3", "label": "Line 3 Width", "base_key": "width1", "hide": "${ ('part' if int(nconnections) >= 3 else 'all') }"}, {"id": "color3", "label": "Line 3 Color", "base_key": "color1", "default": "\"red\"", "hide": "${ ('part' if int(nconnections) >= 3 else 'all') }"}, {"id": "style3", "label": "Line 3 Style", "base_key": "style1", "hide": "${ ('part' if int(nconnections) >= 3 else 'all') }"}, {"id": "marker3", "label": "Line 3 Marker", "base_key": "marker1", "hide": "${ ('part' if int(nconnections) >= 3 else 'all') }"}, {"id": "alpha3", "label": "Line 3 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 3 else 'all') }"}, {"id": "label4", "label": "Line 4 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 4 else 'all') }"}, {"id": "width4", "label": "Line 4 Width", "base_key": "width1", "hide": "${ ('part' if int(nconnections) >= 4 else 'all') }"}, {"id": "color4", "label": "Line 4 Color", "base_key": "color1", "default": "\"red\"", "hide": "${ ('part' if int(nconnections) >= 4 else 'all') }"}, {"id": "style4", "label": "Line 4 Style", "base_key": "style1", "hide": "${ ('part' if int(nconnections) >= 4 else 'all') }"}, {"id": "marker4", "label": "Line 4 Marker", "base_key": "marker1", "hide": "${ ('part' if int(nconnections) >= 4 else 'all') }"}, {"id": "alpha4", "label": "Line 4 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 4 else 'all') }"}, {"id": "label5", "label": "Line 5 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 5 else 'all') }"}, {"id": "width5", "label": "Line 5 Width", "base_key": "width1", "hide": "${ ('part' if int(nconnections) >= 5 else 'all') }"}, {"id": "color5", "label": "Line 5 Color", "base_key": "color1", "default": "\"red\"", "hide": "${ ('part' if int(nconnections) >= 5 else 'all') }"}, {"id": "style5", "label": "Line 5 Style", "base_key": "style1", "hide": "${ ('part' if int(nconnections) >= 5 else 'all') }"}, {"id": "marker5", "label": "Line 5 Marker", "base_key": "marker1", "hide": "${ ('part' if int(nconnections) >= 5 else 'all') }"}, {"id": "alpha5", "label": "Line 5 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 5 else 'all') }"}, {"id": "label6", "label": "Line 6 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 6 else 'all') }"}, {"id": "width6", "label": "Line 6 Width", "base_key": "width1", "hide": "${ ('part' if int(nconnections) >= 6 else 'all') }"}, {"id": "color6", "label": "Line 6 Color", "base_key": "color1", "default": "\"red\"", "hide": "${ ('part' if int(nconnections) >= 6 else 'all') }"}, {"id": "style6", "label": "Line 6 Style", "base_key": "style1", "hide": "${ ('part' if int(nconnections) >= 6 else 'all') }"}, {"id": "marker6", "label": "Line 6 Marker", "base_key": "marker1", "hide": "${ ('part' if int(nconnections) >= 6 else 'all') }"}, {"id": "alpha6", "label": "Line 6 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 6 else 'all') }"}, {"id": "label7", "label": "Line 7 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 7 else 'all') }"}, {"id": "width7", "label": "Line 7 Width", "base_key": "width1", "hide": "${ ('part' if int(nconnections) >= 7 else 'all') }"}, {"id": "color7", "label": "Line 7 Color", "base_key": "color1", "default": "\"red\"", "hide": "${ ('part' if int(nconnections) >= 7 else 'all') }"}, {"id": "style7", "label": "Line 7 Style", "base_key": "style1", "hide": "${ ('part' if int(nconnections) >= 7 else 'all') }"}, {"id": "marker7", "label": "Line 7 Marker", "base_key": "marker1", "hide": "${ ('part' if int(nconnections) >= 7 else 'all') }"}, {"id": "alpha7", "label": "Line 7 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 7 else 'all') }"}, {"id": "label8", "label": "Line 8 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 8 else 'all') }"}, {"id": "width8", "label": "Line 8 Width", "base_key": "width1", "hide": "${ ('part' if int(nconnections) >= 8 else 'all') }"}, {"id": "color8", "label": "Line 8 Color", "base_key": "color1", "default": "\"red\"", "hide": "${ ('part' if int(nconnections) >= 8 else 'all') }"}, {"id": "style8", "label": "Line 8 Style", "base_key": "style1", "hide": "${ ('part' if int(nconnections) >= 8 else 'all') }"}, {"id": "marker8", "label": "Line 8 Marker", "base_key": "marker1", "hide": "${ ('part' if int(nconnections) >= 8 else 'all') }"}, {"id": "alpha8", "label": "Line 8 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 8 else 'all') }"}, {"id": "label9", "label": "Line 9 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 9 else 'all') }"}, {"id": "width9", "label": "Line 9 Width", "base_key": "width1", "hide": "${ ('part' if int(nconnections) >= 9 else 'all') }"}, {"id": "color9", "label": "Line 9 Color", "base_key": "color1", "default": "\"red\"", "hide": "${ ('part' if int(nconnections) >= 9 else 'all') }"}, {"id": "style9", "label": "Line 9 Style", "base_key": "style1", "hide": "${ ('part' if int(nconnections) >= 9 else 'all') }"}, {"id": "marker9", "label": "Line 9 Marker", "base_key": "marker1", "hide": "${ ('part' if int(nconnections) >= 9 else 'all') }"}, {"id": "alpha9", "label": "Line 9 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 9 else 'all') }"}, {"id": "label10", "label": "Line 10 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 10 else 'all') }"}, {"id": "width10", "label": "Line 10 Width", "base_key": "width1", "hide": "${ ('part' if int(nconnections) >= 10 else 'all') }"}, {"id": "color10", "label": "Line 10 Color", "base_key": "color1", "default": "\"red\"", "hide": "${ ('part' if int(nconnections) >= 10 else 'all') }"}, {"id": "style10", "label": "Line 10 Style", "base_key": "style1", "hide": "${ ('part' if int(nconnections) >= 10 else 'all') }"}, {"id": "marker10", "label": "Line 10 Marker", "base_key": "marker1", "hide": "${ ('part' if int(nconnections) >= 10 else 'all') }"}, {"id": "alpha10", "label": "Line 10 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 10 else 'all') }"}], "inputs": [{"domain": "stream", "dtype": "${ type.t }", "multiplicity": "${ (0 if type.startswith('msg') else nconnections) }", "optional": true}], "templates": {"imports": "from PyQt5 import Qt\nfrom gnuradio import qtgui\nimport sip", "callbacks": ["set_update_time(${update_time})", "self.${id}.set_trigger_mode(${tr_mode}, ${tr_slope}, ${tr_level}, ${tr_chan}, ${tr_tag})"], "make": "<%\n    win = 'self._%s_win'%id\n%>\\\nqtgui.${type.fcn}(\n    ${size}, #size\n    ${name}, #name\n    ${0 if type.startswith('msg') else nconnections} #number of inputs\n)\nself.${id}.set_update_time(${update_time})\nself.${id}.set_y_axis(${ymin}, ${ymax})\nself.${id}.set_x_axis(${xmin}, ${xmax})\nself.${id}.set_trigger_mode(${tr_mode}, ${tr_slope}, ${tr_level}, ${tr_chan}, ${tr_tag})\nself.${id}.enable_autoscale(${autoscale})\nself.${id}.enable_grid(${grid})\nself.${id}.enable_axis_labels(${axislabels})\n\n% if legend == \"False\":\nself.${id}.disable_legend()\n% endif\n\nlabels = [${label1}, ${label2}, ${label3}, ${label4}, ${label5},\n    ${label6}, ${label7}, ${label8}, ${label9}, ${label10}]\nwidths = [${width1}, ${width2}, ${width3}, ${width4}, ${width5},\n    ${width6}, ${width7}, ${width8}, ${width9}, ${width10}]\ncolors = [${color1}, ${color2}, ${color3}, ${color4}, ${color5},\n    ${color6}, ${color7}, ${color8}, ${color9}, ${color10}]\nstyles = [${style1}, ${style2}, ${style3}, ${style4}, ${style5},\n    ${style6}, ${style7}, ${style8}, ${style9}, ${style10}]\nmarkers = [${marker1}, ${marker2}, ${marker3}, ${marker4}, ${marker5},\n    ${marker6}, ${marker7}, ${marker8}, ${marker9}, ${marker10}]\nalphas = [${alpha1}, ${alpha2}, ${alpha3}, ${alpha4}, ${alpha5},\n    ${alpha6}, ${alpha7}, ${alpha8}, ${alpha9}, ${alpha10}]\n\nfor i in range(${1 if type.startswith('msg') else nconnections}):\n    if len(labels[i]) == 0:\n        self.${id}.set_line_label(i, \"Data {0}\".format(i))\n    else:\n        self.${id}.set_line_label(i, labels[i])\n    self.${id}.set_line_width(i, widths[i])\n    self.${id}.set_line_color(i, colors[i])\n    self.${id}.set_line_style(i, styles[i])\n    self.${id}.set_line_marker(i, markers[i])\n    self.${id}.set_line_alpha(i, alphas[i])\n\nself._${id}_win = sip.wrapinstance(self.${id}.pyqwidget(), Qt.QWidget)\n${gui_hint() % win}"}, "documentation": "The GUI hint can be used to position the widget within the application. The hint is of the form [tab_id@tab_index]: [row, col, row_span, col_span]. Both the tab specification and the grid position are optional.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/qtgui_edit_box_msg.block.yml": {"id": "qtgui_edit_box_msg", "label": "QT GUI Message Edit Box", "flags": ["python"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "default": "string", "options": ["string", "int", "float", "double", "complex", "int_vec", "flt_vec", "dbl_vec", "cpx_vec"], "option_labels": ["String", "Int", "Float", "Double", "Complex", "Int (Vec)", "Float (Vec)", "Double (Vec)", "Complex (Vec)"], "option_attributes": {"t": ["qtgui.STRING", "qtgui.INT", "qtgui.FLOAT", "qtgui.DOUBLE", "qtgui.COMPLEX", "qtgui.INT_VEC", "qtgui.FLOAT_VEC", "qtgui.DOUBLE_VEC", "qtgui.COMPLEX_VEC"]}}, {"id": "value", "label": "Value", "dtype": "string"}, {"id": "label", "label": "Label", "dtype": "string"}, {"id": "is_pair", "label": "Pair Mode", "dtype": "enum", "default": "True", "options": ["False", "True"]}, {"id": "is_static", "label": "Static Mode", "dtype": "enum", "default": "True", "options": ["False", "True"]}, {"id": "key", "label": "Key", "dtype": "string", "hide": "${ ('none' if is_pair == 'True' else 'all') }"}, {"id": "gui_hint", "label": "GUI Hint", "dtype": "gui_hint", "hide": "part"}], "asserts": ["${(len(key) > 0) or not ((is_pair == 'True') and (is_static == 'True'))}"], "inputs": [{"domain": "message", "id": "val", "optional": true}], "outputs": [{"domain": "message", "id": "msg", "optional": true}], "templates": {"imports": "from PyQt5 import Qt\nfrom gnuradio import qtgui\nimport sip", "make": "<%\n    win = 'self._%s_win'%id\n%>\\\nqtgui.edit_box_msg(${type.t}, ${value}, ${label}, ${is_pair}, ${is_static}, ${key})\n${win} = sip.wrapinstance(self.${id}.pyqwidget(), Qt.QWidget)\n${gui_hint() % win}"}, "documentation": "The GUI hint can be used to position the widget within the application. The hint is of the form [tab_id@tab_index]: [row, col, row_span, col_span]. Both the tab specification and the grid position are optional.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/qtgui_entry.block.yml": {"id": "variable_qtgui_entry", "label": "QT GUI Entry", "flags": ["show_id", "python", "cpp"], "parameters": [{"id": "label", "label": "Label", "dtype": "string", "hide": "${ ('none' if label else 'part') }"}, {"id": "type", "label": "Type", "dtype": "enum", "default": "int", "options": ["real", "int", "string", "bool", "raw"], "option_labels": ["Float", "Integer", "String", "Boolean", "Any"], "option_attributes": {"conv": ["eng_notation.str_to_num", "int", "str", "bool", "eval"], "str": ["eng_notation.num_to_str", "str", "str", "str", "repr"]}, "hide": "part"}, {"id": "value", "label": "Default Value", "dtype": "${ type }", "default": "0"}, {"id": "gui_hint", "label": "GUI Hint", "dtype": "gui_hint", "hide": "part"}], "value": "${ value }", "templates": {"imports": "from PyQt5 import Qt\nfrom gnuradio import eng_notation", "var_make": "self.${id} = ${id} = ${value}", "callbacks": ["self.set_${id}(${value})", "Qt.QMetaObject.invokeMethod(self._${id}_line_edit, \"setText\", Qt.Q_ARG(\"QString\", ${type.str}(${id})))"], "make": "<%\n    win = 'self._%s_tool_bar'%id\n%>\n${win} = Qt.QToolBar(self)\n${win}.addWidget(Qt.QLabel(${(label if (len(label) - 2 > 0) else repr(id))} + \": \"))\nself._${id}_line_edit = Qt.QLineEdit(str(self.${id}))\nself._${id}_tool_bar.addWidget(self._${id}_line_edit)\nself._${id}_line_edit.returnPressed.connect(\n    lambda: self.set_${id}(${type.conv}(str(self._${id}_line_edit.text()))))\n${gui_hint() % win}"}, "cpp_templates": {"includes": ["#include <QToolBar>", "#include <QLineEdit>", "#include <QLabel>", "#include <QMetaObject>", "#include <QString>"], "declarations": "QToolBar *_${id}_tool_bar;\nQLineEdit *_${id}_line_edit;\nQLabel *_${id}_label;", "var_make": "${id} = ${value};", "callbacks": ["set_${id}(${value})", "QMetaObject::invokeMethod(this->_${id}_line_edit, \"setText\", Q_ARG(QString, QString::number(${id})))"], "link": ["gnuradio-qtgui", "Qt5::Widgets"], "make": "this->_${id}_tool_bar = new QToolBar();\nthis->_${id}_label = new QLabel(QString::fromStdString(std::string(\"${label.strip(\"'\")}\")+ std::string(\":\")));\nthis->_${id}_tool_bar->addWidget(_${id}_label);\nthis->_${id}_line_edit = new QLineEdit(QString::number(this->${id}));\nthis->_${id}_tool_bar->addWidget(this->_${id}_line_edit);\nQObject::connect(this->_${id}_line_edit, &QLineEdit::returnPressed, this, [this] () {this->set_${id}(this->_${id}_line_edit->text().toInt());});\n\nthis->top_layout->addWidget(this->_${id}_tool_bar);"}, "documentation": "This block creates a variable with a text entry box. Leave the label blank to use the variable id as the label.\n\nThe GUI hint can be used to position the widget within the application. The hint is of the form [tab_id@tab_index]: [row, col, row_span, col_span]. Both the tab specification and the grid position are optional.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/qtgui_freq_sink_x.block.yml": {"id": "qtgui_freq_sink_x", "label": "QT GUI Frequency Sink", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "default": "complex", "options": ["complex", "float", "msg_complex", "msg_float"], "option_labels": ["Complex", "Float", "Complex Message", "Float Message"], "option_attributes": {"fcn": ["freq_sink_c", "freq_sink_f", "freq_sink_c", "freq_sink_f"], "t": ["complex", "float", "message", "message"]}, "hide": "part"}, {"id": "name", "label": "Name", "dtype": "string", "default": "\"\"", "hide": "${ ('none' if len(name) > 0 else 'part') }"}, {"id": "fftsize", "label": "FFT Size", "dtype": "int", "default": "1024", "hide": "${ ('all' if (type == 'msg_complex' or type == 'msg_float') else 'none') }"}, {"id": "freqhalf", "label": "Spectrum Width", "dtype": "enum", "default": "True", "options": ["True", "False"], "option_labels": ["Full", "Half"], "hide": "${ ('part' if type == \"float\" or type == \"msg_float\" else 'all') }"}, {"id": "wintype", "label": "Window Type", "dtype": "enum", "default": "firdes.WIN_BLACKMAN_hARRIS", "options": ["firdes.WIN_BLACKMAN_hARRIS", "firdes.WIN_HAMMING", "firdes.WIN_HANN", "firdes.WIN_BLACKMAN", "firdes.WIN_RECTANGULAR", "firdes.WIN_KAISER", "firdes.WIN_FLATTOP"], "option_labels": ["Blackman-harris", "Hamming", "Hann", "Blackman", "Rectangular", "Kaiser", "Flat-top"], "hide": "part"}, {"id": "fc", "label": "Center Frequency (Hz)", "dtype": "real", "default": "0"}, {"id": "bw", "label": "Bandwidth (Hz)", "dtype": "real", "default": "samp_rate"}, {"id": "grid", "label": "Grid", "dtype": "enum", "default": "False", "options": ["True", "False"], "option_labels": ["Yes", "No"], "hide": "part"}, {"id": "autoscale", "label": "Autoscale", "dtype": "enum", "default": "False", "options": ["True", "False"], "option_labels": ["Yes", "No"], "hide": "part"}, {"id": "average", "label": "Average", "dtype": "enum", "default": "False", "options": ["1.0", "0.2", "0.1", "0.05"], "option_labels": ["None", "Low", "Medium", "High"], "hide": "part"}, {"id": "ymin", "label": "Y min", "dtype": "real", "default": "-140", "hide": "part"}, {"id": "ymax", "label": "Y max", "dtype": "real", "default": "10", "hide": "part"}, {"id": "label", "label": "Y label", "dtype": "string", "default": "Relative Gain", "hide": "part"}, {"id": "units", "label": "Y units", "dtype": "string", "default": "dB", "hide": "part"}, {"id": "nconnections", "label": "Number of Inputs", "dtype": "int", "default": "1", "hide": "${ ('all' if (type == 'msg_complex' or type == 'msg_float') else 'part') }"}, {"id": "update_time", "label": "Update Period", "dtype": "real", "default": "0.10", "hide": "part"}, {"id": "gui_hint", "label": "GUI Hint", "dtype": "gui_hint", "hide": "part"}, {"id": "showports", "label": "Show Msg Ports", "dtype": "bool", "default": "False", "hide": "part"}, {"id": "tr_mode", "label": "Trigger Mode", "category": "Trigger", "dtype": "enum", "default": "qtgui.TRIG_MODE_FREE", "options": ["qtgui.TRIG_MODE_FREE", "qtgui.TRIG_MODE_AUTO", "qtgui.TRIG_MODE_NORM", "qtgui.TRIG_MODE_TAG"], "option_labels": ["Free", "Auto", "Normal", "Tag"], "hide": "part"}, {"id": "tr_level", "label": "Trigger Level", "category": "Trigger", "dtype": "float", "default": "0.0", "hide": "part"}, {"id": "tr_chan", "label": "Trigger Channel", "category": "Trigger", "dtype": "int", "default": "0", "hide": "part"}, {"id": "tr_tag", "label": "Trigger Tag Key", "category": "Trigger", "dtype": "string", "default": "\"\"", "hide": "part"}, {"id": "ctrlpanel", "label": "Control Panel", "category": "Config", "dtype": "enum", "default": "False", "options": ["True", "False"], "option_labels": ["Yes", "No"], "hide": "part"}, {"id": "legend", "label": "Legend", "category": "Config", "dtype": "enum", "default": "True", "options": ["True", "False"], "option_labels": ["Yes", "No"], "hide": "part"}, {"id": "axislabels", "label": "Axis Labels", "category": "Config", "dtype": "enum", "default": "True", "options": ["True", "False"], "option_labels": ["Yes", "No"], "hide": "part"}, {"id": "label1", "label": "Line 1 Label", "category": "Config", "dtype": "string", "hide": "${ ('part' if int(nconnections) >= 1 else 'all') }"}, {"id": "width1", "label": "Line 1 Width", "category": "Config", "dtype": "int", "default": "1", "hide": "${ ('part' if int(nconnections) >= 1 else 'all') }"}, {"id": "color1", "label": "Line 1 Color", "category": "Config", "dtype": "enum", "options": ["\"blue\"", "\"red\"", "\"green\"", "\"black\"", "\"cyan\"", "\"magenta\"", "\"yellow\"", "\"dark red\"", "\"dark green\"", "\"dark blue\""], "option_labels": ["Blue", "Red", "Green", "Black", "Cyan", "Magenta", "Yellow", "Dark Red", "Dark Green", "Dark Blue"], "hide": "${ ('part' if int(nconnections) >= 1 else 'all') }"}, {"id": "alpha1", "label": "Line 1 Alpha", "category": "Config", "dtype": "float", "default": "1.0", "hide": "${ ('part' if int(nconnections) >= 1 else 'all') }"}, {"id": "label2", "label": "Line 2 Label", "base_key": "label1", "default": "''", "hide": "${ ('part' if int(nconnections) >= 2 else 'all') }"}, {"id": "width2", "label": "Line 2 Width", "base_key": "width1", "default": "1", "hide": "${ ('part' if int(nconnections) >= 2 else 'all') }"}, {"id": "color2", "label": "Line 2 Color", "base_key": "color1", "default": "\"red\"", "hide": "${ ('part' if int(nconnections) >= 2 else 'all') }"}, {"id": "alpha2", "label": "Line 2 Alpha", "base_key": "alpha1", "default": "1.0", "hide": "${ ('part' if int(nconnections) >= 2 else 'all') }"}, {"id": "label3", "label": "Line 3 Label", "base_key": "label1", "default": "''", "hide": "${ ('part' if int(nconnections) >= 3 else 'all') }"}, {"id": "width3", "label": "Line 3 Width", "base_key": "width1", "default": "1", "hide": "${ ('part' if int(nconnections) >= 3 else 'all') }"}, {"id": "color3", "label": "Line 3 Color", "base_key": "color1", "default": "\"green\"", "hide": "${ ('part' if int(nconnections) >= 3 else 'all') }"}, {"id": "alpha3", "label": "Line 3 Alpha", "base_key": "alpha1", "default": "1.0", "hide": "${ ('part' if int(nconnections) >= 3 else 'all') }"}, {"id": "label4", "label": "Line 4 Label", "base_key": "label1", "default": "''", "hide": "${ ('part' if int(nconnections) >= 4 else 'all') }"}, {"id": "width4", "label": "Line 4 Width", "base_key": "width1", "default": "1", "hide": "${ ('part' if int(nconnections) >= 4 else 'all') }"}, {"id": "color4", "label": "Line 4 Color", "base_key": "color1", "default": "\"black\"", "hide": "${ ('part' if int(nconnections) >= 4 else 'all') }"}, {"id": "alpha4", "label": "Line 4 Alpha", "base_key": "alpha1", "default": "1.0", "hide": "${ ('part' if int(nconnections) >= 4 else 'all') }"}, {"id": "label5", "label": "Line 5 Label", "base_key": "label1", "default": "''", "hide": "${ ('part' if int(nconnections) >= 5 else 'all') }"}, {"id": "width5", "label": "Line 5 Width", "base_key": "width1", "default": "1", "hide": "${ ('part' if int(nconnections) >= 5 else 'all') }"}, {"id": "color5", "label": "Line 5 Color", "base_key": "color1", "default": "\"cyan\"", "hide": "${ ('part' if int(nconnections) >= 5 else 'all') }"}, {"id": "alpha5", "label": "Line 5 Alpha", "base_key": "alpha1", "default": "1.0", "hide": "${ ('part' if int(nconnections) >= 5 else 'all') }"}, {"id": "label6", "label": "Line 6 Label", "base_key": "label1", "default": "''", "hide": "${ ('part' if int(nconnections) >= 6 else 'all') }"}, {"id": "width6", "label": "Line 6 Width", "base_key": "width1", "default": "1", "hide": "${ ('part' if int(nconnections) >= 6 else 'all') }"}, {"id": "color6", "label": "Line 6 Color", "base_key": "color1", "default": "\"magenta\"", "hide": "${ ('part' if int(nconnections) >= 6 else 'all') }"}, {"id": "alpha6", "label": "Line 6 Alpha", "base_key": "alpha1", "default": "1.0", "hide": "${ ('part' if int(nconnections) >= 6 else 'all') }"}, {"id": "label7", "label": "Line 7 Label", "base_key": "label1", "default": "''", "hide": "${ ('part' if int(nconnections) >= 7 else 'all') }"}, {"id": "width7", "label": "Line 7 Width", "base_key": "width1", "default": "1", "hide": "${ ('part' if int(nconnections) >= 7 else 'all') }"}, {"id": "color7", "label": "Line 7 Color", "base_key": "color1", "default": "\"yellow\"", "hide": "${ ('part' if int(nconnections) >= 7 else 'all') }"}, {"id": "alpha7", "label": "Line 7 Alpha", "base_key": "alpha1", "default": "1.0", "hide": "${ ('part' if int(nconnections) >= 7 else 'all') }"}, {"id": "label8", "label": "Line 8 Label", "base_key": "label1", "default": "''", "hide": "${ ('part' if int(nconnections) >= 8 else 'all') }"}, {"id": "width8", "label": "Line 8 Width", "base_key": "width1", "default": "1", "hide": "${ ('part' if int(nconnections) >= 8 else 'all') }"}, {"id": "color8", "label": "Line 8 Color", "base_key": "color1", "default": "\"dark red\"", "hide": "${ ('part' if int(nconnections) >= 8 else 'all') }"}, {"id": "alpha8", "label": "Line 8 Alpha", "base_key": "alpha1", "default": "1.0", "hide": "${ ('part' if int(nconnections) >= 8 else 'all') }"}, {"id": "label9", "label": "Line 9 Label", "base_key": "label1", "default": "''", "hide": "${ ('part' if int(nconnections) >= 9 else 'all') }"}, {"id": "width9", "label": "Line 9 Width", "base_key": "width1", "default": "1", "hide": "${ ('part' if int(nconnections) >= 9 else 'all') }"}, {"id": "color9", "label": "Line 9 Color", "base_key": "color1", "default": "\"dark green\"", "hide": "${ ('part' if int(nconnections) >= 9 else 'all') }"}, {"id": "alpha9", "label": "Line 9 Alpha", "base_key": "alpha1", "default": "1.0", "hide": "${ ('part' if int(nconnections) >= 9 else 'all') }"}, {"id": "label10", "label": "Line 10 Label", "base_key": "label1", "default": "''", "hide": "${ ('part' if int(nconnections) >= 10 else 'all') }"}, {"id": "width10", "label": "Line 10 Width", "base_key": "width1", "default": "1", "hide": "${ ('part' if int(nconnections) >= 10 else 'all') }"}, {"id": "color10", "label": "Line 10 Color", "base_key": "color1", "default": "\"dark blue\"", "hide": "${ ('part' if int(nconnections) >= 10 else 'all') }"}, {"id": "alpha10", "label": "Line 10 Alpha", "base_key": "alpha1", "default": "1.0", "hide": "${ ('part' if int(nconnections) >= 10 else 'all') }"}], "inputs": [{"domain": "stream", "dtype": "${ type.t }", "multiplicity": "${ (0 if (type == 'msg_complex' or type == 'msg_float') else nconnections) }", "optional": true}, {"domain": "message", "id": "freq", "optional": true, "hide": "${ not showports }"}, {"domain": "message", "id": "bw", "optional": true, "hide": "${ not showports }"}], "outputs": [{"domain": "message", "id": "freq", "optional": true, "hide": "${ not showports }"}], "templates": {"imports": "from PyQt5 import Qt\nfrom gnuradio import qtgui\nfrom gnuradio.filter import firdes\nimport sip", "callbacks": ["set_frequency_range(${fc}, ${bw})", "set_update_time(${update_time})", "set_y_axis(${ymin}, ${ymax})", "self.${id}.set_trigger_mode(${tr_mode}, ${tr_level}, ${tr_chan}, ${tr_tag})"], "make": "<%\n    win = 'self._%s_win'%id\n%>\\\nqtgui.${type.fcn}(\n    ${fftsize}, #size\n    ${wintype}, #wintype\n    ${fc}, #fc\n    ${bw}, #bw\n    ${name}, #name\n    ${ 0 if (type == 'msg_complex' or type == 'msg_float') else nconnections }\n)\nself.${id}.set_update_time(${update_time})\nself.${id}.set_y_axis(${ymin}, ${ymax})\nself.${id}.set_y_label(${label}, ${units})\nself.${id}.set_trigger_mode(${tr_mode}, ${tr_level}, ${tr_chan}, ${tr_tag})\nself.${id}.enable_autoscale(${autoscale})\nself.${id}.enable_grid(${grid})\nself.${id}.set_fft_average(${average})\nself.${id}.enable_axis_labels(${axislabels})\nself.${id}.enable_control_panel(${ctrlpanel})\n\n% if legend == \"False\":\nself.${id}.disable_legend()\n% endif\n\n% if type == \"float\" or type == \"msg_float\":\nself.${id}.set_plot_pos_half(not ${freqhalf})\n% endif\n\nlabels = [${label1}, ${label2}, ${label3}, ${label4}, ${label5},\n    ${label6}, ${label7}, ${label8}, ${label9}, ${label10}]\nwidths = [${width1}, ${width2}, ${width3}, ${width4}, ${width5},\n    ${width6}, ${width7}, ${width8}, ${width9}, ${width10}]\ncolors = [${color1}, ${color2}, ${color3}, ${color4}, ${color5},\n    ${color6}, ${color7}, ${color8}, ${color9}, ${color10}]\nalphas = [${alpha1}, ${alpha2}, ${alpha3}, ${alpha4}, ${alpha5},\n    ${alpha6}, ${alpha7}, ${alpha8}, ${alpha9}, ${alpha10}]\n\nfor i in range(${1 if (type == 'msg_complex' or type == 'msg_float') else nconnections}):\n    if len(labels[i]) == 0:\n        self.${id}.set_line_label(i, \"Data {0}\".format(i))\n    else:\n        self.${id}.set_line_label(i, labels[i])\n    self.${id}.set_line_width(i, widths[i])\n    self.${id}.set_line_color(i, colors[i])\n    self.${id}.set_line_alpha(i, alphas[i])\n\n${win} = sip.wrapinstance(self.${id}.pyqwidget(), Qt.QWidget)\n${ gui_hint() % win}"}, "cpp_templates": {"includes": ["#include <gnuradio/qtgui/${type.fcn}.h>", "#include <gnuradio/filter/firdes.h>"], "declarations": "qtgui::${type.fcn}::sptr ${id};", "callbacks": ["set_frequency_range(${fc}, ${bw})", "set_update_time(${update_time})", "set_y_axis(${ymin}, ${ymax})", "this->${id}.set_trigger_mode(${tr_mode}, ${tr_level}, ${tr_chan}, ${tr_tag})"], "link": ["gnuradio-qtgui", "Qt5::Widgets"], "make": "this->${id} = qtgui::${type.fcn}::make(\n    ${fftsize}, // size\n    ${wintype}, // wintype\n    ${fc}, // fc\n    ${bw}, // bw\n    ${name}, // name\n    ${ 0 if (type == 'msg_complex' or type == 'msg_float') else nconnections } // nconnections\n);\n\nstd::string labels[10] = {\"${label1.strip(\"'\")}\", \"${label2.strip(\"'\")}\", \"${label3.strip(\"'\")}\", \"${label4.strip(\"'\")}\", \"${label5.strip(\"'\")}\",\n    \"${label6.strip(\"'\")}\", \"${label7.strip(\"'\")}\", \"${label8.strip(\"'\")}\", \"${label9.strip(\"'\")}\", \"${label10.strip(\"'\")}\"};\nint widths[10] = {${width1}, ${width2}, ${width3}, ${width4}, ${width5},\n    ${width6}, ${width7}, ${width8}, ${width9}, ${width10}};\nstd::string colors[10] = {${color1}, ${color2}, ${color3}, ${color4}, ${color5},\n    ${color6}, ${color7}, ${color8}, ${color9}, ${color10}};\ndouble alphas[10] = {${alpha1}, ${alpha2}, ${alpha3}, ${alpha4}, ${alpha5},\n    ${alpha6}, ${alpha7}, ${alpha8}, ${alpha9}, ${alpha10}};\n\nQWidget* _${id}_win;\n\nthis->${id}->set_update_time(${update_time});\nthis->${id}->set_y_axis(${ymin}, ${ymax});\nthis->${id}->set_y_label(\"${label.strip(\"'\")}\", \"${units.strip(\"'\")}\");\nthis->${id}->set_trigger_mode(${tr_mode}, ${tr_level}, ${tr_chan}, ${tr_tag});\nthis->${id}->enable_autoscale(${autoscale});\nthis->${id}->enable_grid(${grid});\nthis->${id}->set_fft_average(${average});\nthis->${id}->enable_axis_labels(${axislabels});\nthis->${id}->enable_control_panel(${ctrlpanel});\n\nif (!${legend}) {\n    this->${id}->disable_legend(); // if (!legend)\n}\n\n/* C++ doesn't have this\nif (\"${type}\" == \"float\" or \"${type}\" == \"msg_float\") {\n    this->${id}->set_plot_pos_half(not ${freqhalf});\n}*/\n\nfor (int i = 0; i < ${ 1 if (type == 'msg_complex' or type == 'msg_float') else nconnections }; i++) {\n    if (sizeof(labels[i]) == 0) {\n        this->${id}->set_line_label(i, \"Data \" + std::to_string(i));\n    } else {\n        this->${id}->set_line_label(i, labels[i]);\n    }\n    this->${id}->set_line_width(i, widths[i]);\n    this->${id}->set_line_color(i, colors[i]);\n    this->${id}->set_line_alpha(i, alphas[i]);\n}\n\n_${id}_win = this->${id}->qwidget();\nthis->top_layout->addWidget(_${id}_win);", "translations": {"firdes.": "filter::firdes::", "True": "true", "False": "false", "qtgui.": "qtgui::"}}, "documentation": "The GUI hint can be used to position the widget within the application. The hint is of the form [tab_id@tab_index]: [row, col, row_span, col_span]. Both the tab specification and the grid position are optional.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/qtgui_histogram_sink_x.block.yml": {"id": "qtgui_histogram_sink_x", "label": "QT GUI Histogram Sink", "flags": ["python"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "default": "float", "options": ["float", "msg_float"], "option_labels": ["Float", "Float Message"], "option_attributes": {"fcn": ["histogram_sink_f", "histogram_sink_f"], "t": ["float", "message"]}, "hide": "part"}, {"id": "name", "label": "Name", "dtype": "string", "default": "\"\"", "hide": "${ ('none' if len(name) > 0 else 'part') }"}, {"id": "size", "label": "Number of Points", "dtype": "int", "default": "1024", "hide": "${ ('all' if type.startswith('msg') else 'none') }"}, {"id": "bins", "label": "Number of Bins", "dtype": "int", "default": "100"}, {"id": "grid", "label": "Grid", "dtype": "enum", "default": "False", "options": ["True", "False"], "option_labels": ["Yes", "No"], "hide": "part"}, {"id": "autoscale", "label": "Autoscale", "dtype": "enum", "default": "True", "options": ["True", "False"], "option_labels": ["Yes", "No"]}, {"id": "accum", "label": "Accumulate", "dtype": "enum", "default": "False", "options": ["True", "False"], "option_labels": ["Yes", "No"]}, {"id": "xmin", "label": "Min x-axis", "dtype": "real", "default": "-1"}, {"id": "xmax", "label": "Max x-axis", "dtype": "real", "default": "1"}, {"id": "nconnections", "label": "Number of Inputs", "dtype": "int", "default": "1", "hide": "${ ('all' if type.startswith('msg') else 'part') }"}, {"id": "update_time", "label": "Update Period", "dtype": "float", "default": "0.10", "hide": "part"}, {"id": "gui_hint", "label": "GUI Hint", "dtype": "gui_hint", "hide": "part"}, {"id": "legend", "label": "Legend", "category": "Config", "dtype": "enum", "default": "True", "options": ["True", "False"], "option_labels": ["Yes", "No"], "hide": "part"}, {"id": "axislabels", "label": "Axis Labels", "category": "Config", "dtype": "enum", "default": "True", "options": ["True", "False"], "option_labels": ["Yes", "No"], "hide": "part"}, {"id": "label1", "label": "Line 1 Label", "category": "Config", "dtype": "string", "hide": "${ ('part' if int(nconnections) >= 1 else 'all') }"}, {"id": "width1", "label": "Line 1 Width", "category": "Config", "dtype": "int", "default": "1", "hide": "${ ('part' if int(nconnections) >= 1 else 'all') }"}, {"id": "color1", "label": "Line 1 Color", "category": "Config", "dtype": "enum", "options": ["\"blue\"", "\"red\"", "\"green\"", "\"black\"", "\"cyan\"", "\"magenta\"", "\"yellow\"", "\"dark red\"", "\"dark green\"", "\"dark blue\""], "option_labels": ["Blue", "Red", "Green", "Black", "Cyan", "Magenta", "Yellow", "Dark Red", "Dark Green", "Dark Blue"], "hide": "${ ('part' if int(nconnections) >= 1 else 'all') }"}, {"id": "style1", "label": "Line 1 Style", "category": "Config", "dtype": "enum", "options": ["1", "2", "3", "4", "5", "0"], "option_labels": ["Solid", "Dash", "Dots", "Dash-Dot", "Dash-Dot-Dot", "None"], "hide": "${ ('part' if int(nconnections) >= 1 else 'all') }"}, {"id": "marker1", "label": "Line 1 Marker", "category": "Config", "dtype": "enum", "options": ["-1", "0", "1", "2", "3", "4", "6", "7", "8", "9"], "option_labels": ["None", "Circle", "Rectangle", "Diamond", "Triangle", "Down Triangle", "Left Triangle", "Right Triangle", "Cross", "X-Cross"], "hide": "${ ('part' if int(nconnections) >= 1 else 'all') }"}, {"id": "alpha1", "label": "Line 1 Alpha", "category": "Config", "dtype": "float", "default": "1.0", "hide": "${ ('part' if int(nconnections) >= 1 else 'all') }"}, {"id": "label2", "label": "Line 2 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 2 else 'all') }"}, {"id": "width2", "label": "Line 2 Width", "base_key": "width1", "hide": "${ ('part' if int(nconnections) >= 2 else 'all') }"}, {"id": "color2", "label": "Line 2 Color", "base_key": "color1", "default": "\"red\"", "hide": "${ ('part' if int(nconnections) >= 2 else 'all') }"}, {"id": "style2", "label": "Line 2 Style", "base_key": "style1", "hide": "${ ('part' if int(nconnections) >= 2 else 'all') }"}, {"id": "marker2", "label": "Line 2 Marker", "base_key": "marker1", "hide": "${ ('part' if int(nconnections) >= 2 else 'all') }"}, {"id": "alpha2", "label": "Line 2 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 2 else 'all') }"}, {"id": "label3", "label": "Line 3 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 3 else 'all') }"}, {"id": "width3", "label": "Line 3 Width", "base_key": "width1", "hide": "${ ('part' if int(nconnections) >= 3 else 'all') }"}, {"id": "color3", "label": "Line 3 Color", "base_key": "color1", "default": "\"green\"", "hide": "${ ('part' if int(nconnections) >= 3 else 'all') }"}, {"id": "style3", "label": "Line 3 Style", "base_key": "style1", "hide": "${ ('part' if int(nconnections) >= 3 else 'all') }"}, {"id": "marker3", "label": "Line 3 Marker", "base_key": "marker1", "hide": "${ ('part' if int(nconnections) >= 3 else 'all') }"}, {"id": "alpha3", "label": "Line 3 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 3 else 'all') }"}, {"id": "label4", "label": "Line 4 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 4 else 'all') }"}, {"id": "width4", "label": "Line 4 Width", "base_key": "width1", "hide": "${ ('part' if int(nconnections) >= 4 else 'all') }"}, {"id": "color4", "label": "Line 4 Color", "base_key": "color1", "default": "\"black\"", "hide": "${ ('part' if int(nconnections) >= 4 else 'all') }"}, {"id": "style4", "label": "Line 4 Style", "base_key": "style1", "hide": "${ ('part' if int(nconnections) >= 4 else 'all') }"}, {"id": "marker4", "label": "Line 4 Marker", "base_key": "marker1", "hide": "${ ('part' if int(nconnections) >= 4 else 'all') }"}, {"id": "alpha4", "label": "Line 4 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 4 else 'all') }"}, {"id": "label5", "label": "Line 5 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 5 else 'all') }"}, {"id": "width5", "label": "Line 5 Width", "base_key": "width1", "hide": "${ ('part' if int(nconnections) >= 5 else 'all') }"}, {"id": "color5", "label": "Line 5 Color", "base_key": "color1", "default": "\"cyan\"", "hide": "${ ('part' if int(nconnections) >= 5 else 'all') }"}, {"id": "style5", "label": "Line 5 Style", "base_key": "style1", "hide": "${ ('part' if int(nconnections) >= 5 else 'all') }"}, {"id": "marker5", "label": "Line 5 Marker", "base_key": "marker1", "hide": "${ ('part' if int(nconnections) >= 5 else 'all') }"}, {"id": "alpha5", "label": "Line 5 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 5 else 'all') }"}, {"id": "label6", "label": "Line 6 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 6 else 'all') }"}, {"id": "width6", "label": "Line 6 Width", "base_key": "width1", "hide": "${ ('part' if int(nconnections) >= 6 else 'all') }"}, {"id": "color6", "label": "Line 6 Color", "base_key": "color1", "default": "\"magenta\"", "hide": "${ ('part' if int(nconnections) >= 6 else 'all') }"}, {"id": "style6", "label": "Line 6 Style", "base_key": "style1", "hide": "${ ('part' if int(nconnections) >= 6 else 'all') }"}, {"id": "marker6", "label": "Line 6 Marker", "base_key": "marker1", "hide": "${ ('part' if int(nconnections) >= 6 else 'all') }"}, {"id": "alpha6", "label": "Line 6 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 6 else 'all') }"}, {"id": "label7", "label": "Line 7 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 7 else 'all') }"}, {"id": "width7", "label": "Line 7 Width", "base_key": "width1", "hide": "${ ('part' if int(nconnections) >= 7 else 'all') }"}, {"id": "color7", "label": "Line 7 Color", "base_key": "color1", "default": "\"yellow\"", "hide": "${ ('part' if int(nconnections) >= 7 else 'all') }"}, {"id": "style7", "label": "Line 7 Style", "base_key": "style1", "hide": "${ ('part' if int(nconnections) >= 7 else 'all') }"}, {"id": "marker7", "label": "Line 7 Marker", "base_key": "marker1", "hide": "${ ('part' if int(nconnections) >= 7 else 'all') }"}, {"id": "alpha7", "label": "Line 7 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 7 else 'all') }"}, {"id": "label8", "label": "Line 8 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 8 else 'all') }"}, {"id": "width8", "label": "Line 8 Width", "base_key": "width1", "hide": "${ ('part' if int(nconnections) >= 8 else 'all') }"}, {"id": "color8", "label": "Line 8 Color", "base_key": "color1", "default": "\"dark red\"", "hide": "${ ('part' if int(nconnections) >= 8 else 'all') }"}, {"id": "style8", "label": "Line 8 Style", "base_key": "style1", "hide": "${ ('part' if int(nconnections) >= 8 else 'all') }"}, {"id": "marker8", "label": "Line 8 Marker", "base_key": "marker1", "hide": "${ ('part' if int(nconnections) >= 8 else 'all') }"}, {"id": "alpha8", "label": "Line 8 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 8 else 'all') }"}, {"id": "label9", "label": "Line 9 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 9 else 'all') }"}, {"id": "width9", "label": "Line 9 Width", "base_key": "width1", "hide": "${ ('part' if int(nconnections) >= 9 else 'all') }"}, {"id": "color9", "label": "Line 9 Color", "base_key": "color1", "default": "\"dark green\"", "hide": "${ ('part' if int(nconnections) >= 9 else 'all') }"}, {"id": "style9", "label": "Line 9 Style", "base_key": "style1", "hide": "${ ('part' if int(nconnections) >= 9 else 'all') }"}, {"id": "marker9", "label": "Line 9 Marker", "base_key": "marker1", "hide": "${ ('part' if int(nconnections) >= 9 else 'all') }"}, {"id": "alpha9", "label": "Line 9 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 9 else 'all') }"}, {"id": "label10", "label": "Line 10 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 10 else 'all') }"}, {"id": "width10", "label": "Line 10 Width", "base_key": "width1", "hide": "${ ('part' if int(nconnections) >= 10 else 'all') }"}, {"id": "color10", "label": "Line 10 Color", "base_key": "color1", "default": "\"dark blue\"", "hide": "${ ('part' if int(nconnections) >= 10 else 'all') }"}, {"id": "style10", "label": "Line 10 Style", "base_key": "style1", "hide": "${ ('part' if int(nconnections) >= 10 else 'all') }"}, {"id": "marker10", "label": "Line 10 Marker", "base_key": "marker1", "hide": "${ ('part' if int(nconnections) >= 10 else 'all') }"}, {"id": "alpha10", "label": "Line 10 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 10 else 'all') }"}], "inputs": [{"domain": "stream", "dtype": "${ type.t }", "multiplicity": "${ (0 if type.startswith('msg') else nconnections) }", "optional": true}], "templates": {"imports": "from PyQt5 import Qt\nfrom gnuradio import qtgui\nimport sip", "callbacks": ["set_update_time(${update_time})", "set_bins(${bins})", "set_x_axis(${xmin}, ${xmax})"], "make": "<%\n    win = 'self._%s_win'%id\n%>\\\nqtgui.histogram_sink_f(\n    ${size},\n    ${bins},\n    ${xmin},\n    ${xmax},\n    ${name},\n    ${ 0 if type.startswith('msg') else nconnections}\n)\n\nself.${id}.set_update_time(${update_time})\nself.${id}.enable_autoscale(${autoscale})\nself.${id}.enable_accumulate(${accum})\nself.${id}.enable_grid(${grid})\nself.${id}.enable_axis_labels(${axislabels})\n\n% if legend == \"False\":\nself.${id}.disable_legend()\n% endif\n\nlabels = [${label1}, ${label2}, ${label3}, ${label4}, ${label5},\n    ${label6}, ${label7}, ${label8}, ${label9}, ${label10}]\nwidths = [${width1}, ${width2}, ${width3}, ${width4}, ${width5},\n    ${width6}, ${width7}, ${width8}, ${width9}, ${width10}]\ncolors = [${color1}, ${color2}, ${color3}, ${color4}, ${color5},\n    ${color6}, ${color7}, ${color8}, ${color9}, ${color10}]\nstyles = [${style1}, ${style2}, ${style3}, ${style4}, ${style5},\n    ${style6}, ${style7}, ${style8}, ${style9}, ${style10}]\nmarkers= [${marker1}, ${marker2}, ${marker3}, ${marker4}, ${marker5},\n    ${marker6}, ${marker7}, ${marker8}, ${marker9}, ${marker10}]\nalphas = [${alpha1}, ${alpha2}, ${alpha3}, ${alpha4}, ${alpha5},\n    ${alpha6}, ${alpha7}, ${alpha8}, ${alpha9}, ${alpha10}]\n\nfor i in range(${1 if type.startswith('msg') else nconnections}):\n    if len(labels[i]) == 0:\n        self.${id}.set_line_label(i, \"Data {0}\".format(i))\n    else:\n        self.${id}.set_line_label(i, labels[i])\n    self.${id}.set_line_width(i, widths[i])\n    self.${id}.set_line_color(i, colors[i])\n    self.${id}.set_line_style(i, styles[i])\n    self.${id}.set_line_marker(i, markers[i])\n    self.${id}.set_line_alpha(i, alphas[i])\n\n${win} = sip.wrapinstance(self.${id}.pyqwidget(), Qt.QWidget)\n${gui_hint() % win}"}, "documentation": "The GUI hint can be used to position the widget within the application. The hint is of the form [tab_id@tab_index]: [row, col, row_span, col_span]. Both the tab specification and the grid position are optional.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/qtgui_label.block.yml": {"id": "variable_qtgui_label", "label": "QT GUI Label", "flags": ["show_id", "python"], "parameters": [{"id": "label", "label": "Label", "dtype": "string", "hide": "${ ('none' if label else 'part') }"}, {"id": "type", "label": "Type", "dtype": "enum", "default": "int", "options": ["real", "int", "string", "bool", "raw"], "option_labels": ["Float", "Integer", "String", "Boolean", "Any"], "option_attributes": {"conv": ["eng_notation.str_to_num", "int", "str", "bool", "eval"], "str": ["eng_notation.num_to_str", "str", "str", "str", "repr"]}, "hide": "part"}, {"id": "value", "label": "Default Value", "dtype": "${ type }", "default": "0"}, {"id": "formatter", "label": "Formatter", "dtype": "raw", "default": "None", "hide": "part"}, {"id": "gui_hint", "label": "GUI Hint", "dtype": "gui_hint", "hide": "part"}], "value": "${ value }", "templates": {"imports": "from PyQt5 import Qt\nfrom gnuradio import eng_notation", "var_make": "self.${id} = ${id} = ${value}", "callbacks": ["self.set_${id}(self._${id}_formatter(${value}))", "Qt.QMetaObject.invokeMethod(self._${id}_label, \"setText\", Qt.Q_ARG(\"QString\", ${id}))"], "make": "<%\n    win = 'self._%s_tool_bar'%id\n%>\\\n${win} = Qt.QToolBar(self)\n\nif ${formatter}:\n    self._${id}_formatter = ${formatter}\nelse:\n    self._${id}_formatter = lambda x: ${type.str}(x)\n\n${win}.addWidget(Qt.QLabel(${(label if (len(label) - 2 > 0) else repr(id))} + \": \"))\nself._${id}_label = Qt.QLabel(str(self._${id}_formatter(self.${id})))\nself._${id}_tool_bar.addWidget(self._${id}_label)\n${gui_hint() % win}"}, "documentation": "This block creates a variable with a label widget for text. Leave the label blank to use the variable id as the label.\n\nThe GUI hint can be used to position the widget within the application. The hint is of the form [tab_id@tab_index]: [row, col, row_span, col_span]. Both the tab specification and the grid position are optional.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/qtgui_number_sink.block.yml": {"id": "qtgui_number_sink", "label": "QT GUI Number Sink", "flags": ["python"], "parameters": [{"id": "name", "label": "Name", "dtype": "string", "default": "\"\"", "hide": "${ ('none' if len(name) > 0 else 'part') }"}, {"id": "type", "label": "Input Type", "category": "General", "dtype": "enum", "options": ["float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "autoscale", "label": "Autoscale", "dtype": "enum", "default": "False", "options": ["True", "False"], "option_labels": ["Yes", "No"]}, {"id": "avg", "label": "Average", "category": "General", "dtype": "float", "default": "0"}, {"id": "graph_type", "label": "Graph Type", "category": "General", "dtype": "enum", "options": ["qtgui.NUM_GRAPH_HORIZ", "qtgui.NUM_GRAPH_VERT", "qtgui.NUM_GRAPH_NONE"], "option_labels": ["Horizontal", "Vertical", "None"]}, {"id": "nconnections", "label": "Number of Inputs", "category": "General", "dtype": "int", "default": "1", "hide": "part"}, {"id": "min", "label": "Min", "dtype": "float", "default": "-1", "hide": "part"}, {"id": "max", "label": "Max", "dtype": "float", "default": "1", "hide": "part"}, {"id": "update_time", "label": "Update Period", "category": "General", "dtype": "float", "default": "0.10", "hide": "part"}, {"id": "gui_hint", "label": "GUI Hint", "category": "General", "dtype": "gui_hint", "hide": "part"}, {"id": "label1", "label": "Line 1 Label", "category": "Config", "dtype": "string", "hide": "${ ('part' if int(nconnections) >= 1 else 'all') }"}, {"id": "unit1", "label": "Line 1 Unit", "category": "Config", "dtype": "string", "hide": "${ ('part' if int(nconnections) >= 1 else 'all') }"}, {"id": "color1", "label": "Line 1 Color", "category": "Config", "dtype": "enum", "options": ["(\"black\", \"black\")", "(\"blue\", \"red\")", "(\"black\", \"white\")", "(\"white\", \"black\")", "(\"black\", \"red\")"], "option_labels": ["Black", "Blue-Red", "White Hot", "Black Hot", "Black-Red"], "hide": "${ ('part' if int(nconnections) >= 1 else 'all') }"}, {"id": "factor1", "label": "Line 1 Factor", "category": "Config", "dtype": "float", "default": "1", "hide": "${ ('part' if int(nconnections) >= 1 else 'all') }"}, {"id": "label2", "label": "Line 2 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 2 else 'all') }"}, {"id": "unit2", "label": "Line 2 Unit", "base_key": "unit1", "hide": "${ ('part' if int(nconnections) >= 2 else 'all') }"}, {"id": "color2", "label": "Line 2 Color", "base_key": "color1", "hide": "${ ('part' if int(nconnections) >= 2 else 'all') }"}, {"id": "factor2", "label": "Line 2 Factor", "base_key": "factor1", "hide": "${ ('part' if int(nconnections) >= 2 else 'all') }"}, {"id": "label3", "label": "Line 3 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 3 else 'all') }"}, {"id": "unit3", "label": "Line 3 Unit", "base_key": "unit1", "hide": "${ ('part' if int(nconnections) >= 3 else 'all') }"}, {"id": "color3", "label": "Line 3 Color", "base_key": "color1", "hide": "${ ('part' if int(nconnections) >= 3 else 'all') }"}, {"id": "factor3", "label": "Line 3 Factor", "base_key": "factor1", "hide": "${ ('part' if int(nconnections) >= 3 else 'all') }"}, {"id": "label4", "label": "Line 4 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 4 else 'all') }"}, {"id": "unit4", "label": "Line 4 Unit", "base_key": "unit1", "hide": "${ ('part' if int(nconnections) >= 4 else 'all') }"}, {"id": "color4", "label": "Line 4 Color", "base_key": "color1", "hide": "${ ('part' if int(nconnections) >= 4 else 'all') }"}, {"id": "factor4", "label": "Line 4 Factor", "base_key": "factor1", "hide": "${ ('part' if int(nconnections) >= 4 else 'all') }"}, {"id": "label5", "label": "Line 5 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 5 else 'all') }"}, {"id": "unit5", "label": "Line 5 Unit", "base_key": "unit1", "hide": "${ ('part' if int(nconnections) >= 5 else 'all') }"}, {"id": "color5", "label": "Line 5 Color", "base_key": "color1", "hide": "${ ('part' if int(nconnections) >= 5 else 'all') }"}, {"id": "factor5", "label": "Line 5 Factor", "base_key": "factor1", "hide": "${ ('part' if int(nconnections) >= 5 else 'all') }"}, {"id": "label6", "label": "Line 6 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 6 else 'all') }"}, {"id": "unit6", "label": "Line 6 Unit", "base_key": "unit1", "hide": "${ ('part' if int(nconnections) >= 6 else 'all') }"}, {"id": "color6", "label": "Line 6 Color", "base_key": "color1", "hide": "${ ('part' if int(nconnections) >= 6 else 'all') }"}, {"id": "factor6", "label": "Line 6 Factor", "base_key": "factor1", "hide": "${ ('part' if int(nconnections) >= 6 else 'all') }"}, {"id": "label7", "label": "Line 7 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 7 else 'all') }"}, {"id": "unit7", "label": "Line 7 Unit", "base_key": "unit1", "hide": "${ ('part' if int(nconnections) >= 7 else 'all') }"}, {"id": "color7", "label": "Line 7 Color", "base_key": "color1", "hide": "${ ('part' if int(nconnections) >= 7 else 'all') }"}, {"id": "factor7", "label": "Line 7 Factor", "base_key": "factor1", "hide": "${ ('part' if int(nconnections) >= 7 else 'all') }"}, {"id": "label8", "label": "Line 8 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 8 else 'all') }"}, {"id": "unit8", "label": "Line 8 Unit", "base_key": "unit1", "hide": "${ ('part' if int(nconnections) >= 8 else 'all') }"}, {"id": "color8", "label": "Line 8 Color", "base_key": "color1", "hide": "${ ('part' if int(nconnections) >= 8 else 'all') }"}, {"id": "factor8", "label": "Line 8 Factor", "base_key": "factor1", "hide": "${ ('part' if int(nconnections) >= 8 else 'all') }"}, {"id": "label9", "label": "Line 9 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 9 else 'all') }"}, {"id": "unit9", "label": "Line 9 Unit", "base_key": "unit1", "hide": "${ ('part' if int(nconnections) >= 9 else 'all') }"}, {"id": "color9", "label": "Line 9 Color", "base_key": "color1", "hide": "${ ('part' if int(nconnections) >= 9 else 'all') }"}, {"id": "factor9", "label": "Line 9 Factor", "base_key": "factor1", "hide": "${ ('part' if int(nconnections) >= 9 else 'all') }"}, {"id": "label10", "label": "Line 10 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 10 else 'all') }"}, {"id": "unit10", "label": "Line 10 Unit", "base_key": "unit1", "hide": "${ ('part' if int(nconnections) >= 10 else 'all') }"}, {"id": "color10", "label": "Line 10 Color", "base_key": "color1", "hide": "${ ('part' if int(nconnections) >= 10 else 'all') }"}, {"id": "factor10", "label": "Line 10 Factor", "base_key": "factor1", "hide": "${ ('part' if int(nconnections) >= 10 else 'all') }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "multiplicity": "${ nconnections }"}], "templates": {"imports": "from PyQt5 import Qt\nfrom gnuradio import qtgui\nimport sip", "callbacks": ["set_update_time(${update_time})"], "make": "<%\n    win = 'self._%s_win'%id\n%>\\\nqtgui.number_sink(\n    ${type.size},\n    ${avg},\n    ${graph_type},\n    ${nconnections}\n)\nself.${id}.set_update_time(${update_time})\nself.${id}.set_title(${name})\n\nlabels = [${label1}, ${label2}, ${label3}, ${label4}, ${label5},\n    ${label6}, ${label7}, ${label8}, ${label9}, ${label10}]\nunits = [${unit1}, ${unit2}, ${unit3}, ${unit4}, ${unit5},\n    ${unit6}, ${unit7}, ${unit8}, ${unit9}, ${unit10}]\ncolors = [${color1}, ${color2}, ${color3}, ${color4}, ${color5},\n    ${color6}, ${color7}, ${color8}, ${color9}, ${color10}]\nfactor = [${factor1}, ${factor2}, ${factor3}, ${factor4}, ${factor5},\n    ${factor6}, ${factor7}, ${factor8}, ${factor9}, ${factor10}]\n\nfor i in range(${nconnections}):\n    self.${id}.set_min(i, ${min})\n    self.${id}.set_max(i, ${max})\n    self.${id}.set_color(i, colors[i][0], colors[i][1])\n    if len(labels[i]) == 0:\n        self.${id}.set_label(i, \"Data {0}\".format(i))\n    else:\n        self.${id}.set_label(i, labels[i])\n    self.${id}.set_unit(i, units[i])\n    self.${id}.set_factor(i, factor[i])\n\nself.${id}.enable_autoscale(${autoscale})\n${win} = sip.wrapinstance(self.${id}.pyqwidget(), Qt.QWidget)\n${gui_hint() % win}"}, "documentation": "The GUI hint can be used to position the widget within the application.     The hint is of the form [tab_id@tab_index]: [row, col, row_span, col_span].     Both the tab specification and the grid position are optional.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/qtgui_push_button.block.yml": {"id": "variable_qtgui_push_button", "label": "QT GUI Push Button", "flags": ["show_id", "python"], "parameters": [{"id": "label", "label": "Label", "dtype": "string", "hide": "${ ('none' if label else 'part') }"}, {"id": "type", "label": "Type", "dtype": "enum", "default": "int", "options": ["real", "int", "string", "bool", "raw"], "option_labels": ["Float", "Integer", "String", "Boolean", "Any"], "option_attributes": {"conv": ["float", "int", "str", "bool", "eval"]}, "hide": "part"}, {"id": "value", "label": "Default Value", "dtype": "${ type }", "default": "0"}, {"id": "pressed", "label": "Pressed", "dtype": "${ type }", "default": "1"}, {"id": "released", "label": "Released", "dtype": "${ type }", "default": "0"}, {"id": "gui_hint", "label": "GUI Hint", "dtype": "gui_hint", "hide": "part"}], "value": "${ value }", "templates": {"imports": "from PyQt5 import Qt", "var_make": "self.${id} = ${id} = ${value}", "callbacks": ["self.set_${id}(${value})"], "make": "<%\n    win = '_%s_push_button'%id\n%>\\\n${win} = Qt.QPushButton(${label})\n${win} = Qt.QPushButton(${(label if (len(label) - 2 > 0) else repr(id))})\nself._${id}_choices = {'Pressed': ${pressed}, 'Released': ${released}}\n${win}.pressed.connect(lambda: self.set_${id}(self._${id}_choices['Pressed']))\n${win}.released.connect(lambda: self.set_${id}(self._${id}_choices['Released']))\n${gui_hint() % win}"}, "documentation": "This block creates a variable push button. Leave the label blank to use the variable id as the label.\n\nA push button selects between two values of similar type. The variable will take on one value or the other depending on whether the button is pressed or released.\n\nThe GUI hint can be used to position the widget within the application. The hint is of the form [tab_id@tab_index]: [row, col, row_span, col_span]. Both the tab specification and the grid position are optional.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/qtgui_range.block.yml": {"id": "variable_qtgui_range", "label": "QT GUI Range", "flags": ["show_id", "python"], "parameters": [{"id": "label", "label": "Label", "dtype": "string", "hide": "${ ('none' if label else 'part') }"}, {"id": "rangeType", "label": "Type", "dtype": "enum", "default": "\"float\"", "options": ["float", "int"], "option_attributes": {"type": ["float", "int"]}, "hide": "part"}, {"id": "value", "label": "Default Value", "dtype": "${ rangeType.type }", "default": "50"}, {"id": "start", "label": "Start", "dtype": "${ rangeType.type }", "default": "0"}, {"id": "stop", "label": "Stop", "dtype": "${ rangeType.type }", "default": "100"}, {"id": "step", "label": "Step", "dtype": "${ rangeType.type }", "default": "1"}, {"id": "widget", "label": "Widget", "dtype": "enum", "default": "counter_slider", "options": ["counter_slider", "counter", "slider", "dial"], "option_labels": ["Counter + Slider", "Counter", "Slider", "Knob"], "hide": "part"}, {"id": "orient", "label": "Orientation", "dtype": "enum", "default": "Qt.Horizontal", "options": ["Qt.Horizontal", "Qt.Vertical"], "option_labels": ["Horizontal", "Vertical"], "option_attributes": {"minfcn": ["setMinimumWidth", "setMinimumHeight"], "scalepos": ["BottomScale", "LeftScale"]}, "hide": "${ ('part' if widget == \"slider\" else 'all') }"}, {"id": "min_len", "label": "Minimum Length", "dtype": "int", "default": "200", "hide": "part"}, {"id": "gui_hint", "label": "GUI Hint", "dtype": "gui_hint", "hide": "part"}], "value": "${ value }", "asserts": ["${start <= value <= stop}", "${start <= stop}"], "templates": {"imports": "from gnuradio.qtgui import Range, RangeWidget", "var_make": "self.${id} = ${id} = ${value}", "callbacks": ["self.set_${id}(${value})"], "make": "<%\n    win = 'self._%s_win'%id\n    range = 'self._%s_range'%id\n%>\\\n${range} = Range(${start}, ${stop}, ${step}, ${value}, ${min_len})\n${win} = RangeWidget(${range}, self.set_${id}, ${(label if (len(label) - 2 > 0) else repr(id))}, \"${widget}\", ${rangeType})\n${gui_hint() % win}"}, "documentation": "This block creates a variable with a slider.     Leave the label blank to use the variable id as the label.     The value must be a real number.     The value must be between the start and the stop.\n\n    The GUI hint can be used to position the widget within the application.     The hint is of the form [tab_id@tab_index]: [row, col, row_span, col_span].     Both the tab specification and the grid position are optional.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/qtgui_sink_x.block.yml": {"id": "qtgui_sink_x", "label": "QT GUI Sink", "flags": ["python"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "default": "complex", "options": ["complex", "float"], "option_attributes": {"fcn": ["sink_c", "sink_f"]}, "hide": "part"}, {"id": "name", "label": "Name", "dtype": "string", "default": "\"\""}, {"id": "fftsize", "label": "FFT Size", "dtype": "int", "default": "1024"}, {"id": "wintype", "label": "Window Type", "dtype": "int", "default": "firdes.WIN_BLACKMAN_hARRIS", "options": ["firdes.WIN_BLACKMAN_hARRIS", "firdes.WIN_HAMMING", "firdes.WIN_HANN", "firdes.WIN_BLACKMAN", "firdes.WIN_RECTANGULAR", "firdes.WIN_KAISER"], "option_labels": ["Blackman-harris", "Hamming", "Hann", "Blackman", "Rectangular", "Kaiser"], "hide": "part"}, {"id": "fc", "label": "Center Frequency (Hz)", "dtype": "real", "default": "0"}, {"id": "bw", "label": "Bandwidth (Hz)", "dtype": "real", "default": "samp_rate"}, {"id": "rate", "label": "Update Rate", "dtype": "real", "default": "10"}, {"id": "showrf", "label": "Show RF Freq", "dtype": "enum", "default": "False", "options": ["True", "False"], "option_labels": ["Yes", "No"], "hide": "part"}, {"id": "plotfreq", "label": "Plot Frequency", "dtype": "bool", "default": "True", "options": ["True", "False"], "option_labels": ["On", "Off"], "hide": "part"}, {"id": "plotwaterfall", "label": "Plot Waterfall", "dtype": "bool", "default": "True", "options": ["True", "False"], "option_labels": ["On", "Off"], "hide": "part"}, {"id": "plottime", "label": "Plot Time", "dtype": "bool", "default": "True", "options": ["True", "False"], "option_labels": ["On", "Off"], "hide": "part"}, {"id": "plotconst", "label": "Plot Const", "dtype": "bool", "default": "True", "options": ["True", "False"], "option_labels": ["On", "Off"], "hide": "part"}, {"id": "gui_hint", "label": "GUI Hint", "dtype": "gui_hint", "hide": "part"}, {"id": "showports", "label": "Show Msg Ports", "dtype": "bool", "default": "False", "hide": "part"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "multiplicity": "${ num_inputs }"}, {"domain": "message", "id": "freq", "optional": true, "hide": "${ not showports }"}], "outputs": [{"domain": "message", "id": "freq", "optional": true, "hide": "${ not showports }"}], "templates": {"imports": "from PyQt5 import Qt\nfrom gnuradio import qtgui\nfrom gnuradio.filter import firdes\nimport sip", "callbacks": ["set_frequency_range(${fc}, ${bw})"], "make": "<%\n    win = 'self._%s_win'%id\n%>\\\nqtgui.${type.fcn}(\n    ${fftsize}, #fftsize\n    ${wintype}, #wintype\n    ${fc}, #fc\n    ${bw}, #bw\n    ${name}, #name\n    ${plotfreq}, #plotfreq\n    ${plotwaterfall}, #plotwaterfall\n    ${plottime}, #plottime\n    ${plotconst} #plotconst\n)\nself.${id}.set_update_time(1.0/${rate})\n${win} = sip.wrapinstance(self.${id}.pyqwidget(), Qt.QWidget)\n\nself.${id}.enable_rf_freq(${showrf})\n\n${gui_hint() % win}"}, "documentation": "The GUI hint can be used to position the widget within the application. The hint is of the form [tab_id@tab_index]: [row, col, row_span, col_span]. Both the tab specification and the grid position are optional.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/qtgui_tab_widget.block.yml": {"id": "qtgui_tab_widget", "label": "QT GUI Tab Widget", "flags": ["show_id", "python"], "parameters": [{"id": "num_tabs", "label": "Num Tabs", "dtype": "enum", "default": "1", "options": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20"]}, {"id": "label0", "label": "Label 0", "dtype": "string", "default": "Tab 0", "hide": "${ ('none' if int(num_tabs) > 0 else 'all') }"}, {"id": "label1", "label": "Label 1", "dtype": "string", "default": "Tab 1", "hide": "${ ('none' if int(num_tabs) > 1 else 'all') }"}, {"id": "label2", "label": "Label 2", "dtype": "string", "default": "Tab 2", "hide": "${ ('none' if int(num_tabs) > 2 else 'all') }"}, {"id": "label3", "label": "Label 3", "dtype": "string", "default": "Tab 3", "hide": "${ ('none' if int(num_tabs) > 3 else 'all') }"}, {"id": "label4", "label": "Label 4", "dtype": "string", "default": "Tab 4", "hide": "${ ('none' if int(num_tabs) > 4 else 'all') }"}, {"id": "label5", "label": "Label 5", "dtype": "string", "default": "Tab 5", "hide": "${ ('none' if int(num_tabs) > 5 else 'all') }"}, {"id": "label6", "label": "Label 6", "dtype": "string", "default": "Tab 6", "hide": "${ ('none' if int(num_tabs) > 6 else 'all') }"}, {"id": "label7", "label": "Label 7", "dtype": "string", "default": "Tab 7", "hide": "${ ('none' if int(num_tabs) > 7 else 'all') }"}, {"id": "label8", "label": "Label 8", "dtype": "string", "default": "Tab 8", "hide": "${ ('none' if int(num_tabs) > 8 else 'all') }"}, {"id": "label9", "label": "Label 9", "dtype": "string", "default": "Tab 9", "hide": "${ ('none' if int(num_tabs) > 9 else 'all') }"}, {"id": "label10", "label": "Label 10", "dtype": "string", "default": "Tab 10", "hide": "${ ('none' if int(num_tabs) > 10 else 'all') }"}, {"id": "label11", "label": "Label 11", "dtype": "string", "default": "Tab 11", "hide": "${ ('none' if int(num_tabs) > 11 else 'all') }"}, {"id": "label12", "label": "Label 12", "dtype": "string", "default": "Tab 12", "hide": "${ ('none' if int(num_tabs) > 12 else 'all') }"}, {"id": "label13", "label": "Label 13", "dtype": "string", "default": "Tab 13", "hide": "${ ('none' if int(num_tabs) > 13 else 'all') }"}, {"id": "label14", "label": "Label 14", "dtype": "string", "default": "Tab 14", "hide": "${ ('none' if int(num_tabs) > 14 else 'all') }"}, {"id": "label15", "label": "Label 15", "dtype": "string", "default": "Tab 15", "hide": "${ ('none' if int(num_tabs) > 15 else 'all') }"}, {"id": "label16", "label": "Label 16", "dtype": "string", "default": "Tab 16", "hide": "${ ('none' if int(num_tabs) > 16 else 'all') }"}, {"id": "label17", "label": "Label 17", "dtype": "string", "default": "Tab 17", "hide": "${ ('none' if int(num_tabs) > 17 else 'all') }"}, {"id": "label18", "label": "Label 18", "dtype": "string", "default": "Tab 18", "hide": "${ ('none' if int(num_tabs) > 18 else 'all') }"}, {"id": "label19", "label": "Label 19", "dtype": "string", "default": "Tab 19", "hide": "${ ('none' if int(num_tabs) > 19 else 'all') }"}, {"id": "gui_hint", "label": "GUI Hint", "dtype": "gui_hint", "hide": "part"}], "templates": {"imports": "from PyQt5 import Qt", "make": "<%\n    win = 'self.%s'%id\n    all_labels = [label0, label1, label2, label3, label4,\n                  label5, label6, label7, label8, label9,\n                  label10, label11, label12, label13, label14,\n                  label15, label16, label17, label18, label19][:int(num_tabs)]\n%>\\\nQt.QTabWidget()\n% for i, label in enumerate(all_labels):\nself.${id}_widget_${i} = Qt.QWidget()\nself.${id}_layout_${i} = Qt.QBoxLayout(Qt.QBoxLayout.TopToBottom, self.${id}_widget_${i})\nself.${id}_grid_layout_${i} = Qt.QGridLayout()\nself.${id}_layout_${i}.addLayout(self.${id}_grid_layout_${i})\n${win}.addTab(self.${id}_widget_${i}, ${label})\n% endfor\n${gui_hint() % win}"}, "documentation": "This block creates a tabbed widget to organize other widgets. The ID of this block can be used as the tab_id in the GUI hints of other widgets.\n\nThe GUI hint can be used to position the widget within the application. The hint is of the form [tab_id@tab_index]: [row, col, row_span, col_span]. Both the tab specification and the grid position are optional.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/qtgui_time_raster_x.block.yml": {"id": "qtgui_time_raster_sink_x", "label": "QT GUI Time Raster Sink", "flags": ["python"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "default": "complex", "options": ["byte", "float", "msg_byte", "msg_float"], "option_labels": ["Byte", "Float", "Byte Message", "Float Message"], "option_attributes": {"fcn": ["time_raster_sink_b", "time_raster_sink_f", "time_raster_sink_b", "time_raster_sink_f"], "t": ["byte", "float", "message", "message"]}, "hide": "part"}, {"id": "name", "label": "Name", "dtype": "string", "default": "\"\"", "hide": "${ ('none' if len(name) > 0 else 'part') }"}, {"id": "samp_rate", "label": "Sample Rate", "dtype": "real", "default": "samp_rate"}, {"id": "nrows", "label": "Num. Rows", "dtype": "int", "default": 256, "hide": "${ ('all' if type.startswith('msg') else 'none') }"}, {"id": "ncols", "label": "Num. Cols", "dtype": "int", "default": 256}, {"id": "grid", "label": "Grid", "dtype": "enum", "default": "False", "options": ["True", "False"], "option_labels": ["Yes", "No"], "hide": "part"}, {"id": "zmin", "label": "Int. min", "dtype": "real", "default": "-1", "hide": "part"}, {"id": "zmax", "label": "Int. max", "dtype": "real", "default": "1", "hide": "part"}, {"id": "mult", "label": "Multiplier", "dtype": "real_vector", "default": "[]", "hide": "part"}, {"id": "offset", "label": "Offset", "dtype": "real_vector", "default": "[]", "hide": "part"}, {"id": "nconnections", "label": "Number of Inputs", "dtype": "int", "default": "1", "hide": "${ ('all' if type.startswith('msg') else 'part') }"}, {"id": "update_time", "label": "Update Period", "dtype": "real", "default": "0.10", "hide": "part"}, {"id": "gui_hint", "label": "GUI Hint", "dtype": "gui_hint", "hide": "part"}, {"id": "axislabels", "label": "Axis Labels", "category": "Config", "dtype": "enum", "default": "True", "options": ["True", "False"], "option_labels": ["Yes", "No"], "hide": "part"}, {"id": "label1", "label": "Line 1 Label", "category": "Config", "dtype": "string", "hide": "${ ('part' if int(nconnections) >= 1 else 'all') }"}, {"id": "color1", "label": "Line 1 Color", "category": "Config", "dtype": "enum", "options": ["0", "1", "2", "3", "5", "6"], "option_labels": ["Multi Color", "White Hot", "Black Hot", "Incandescent", "Sunset", "Cool"], "hide": "${ ('part' if int(nconnections) >= 1 else 'all') }"}, {"id": "alpha1", "label": "Line 1 Alpha", "category": "Config", "dtype": "float", "default": "1.0", "hide": "${ ('part' if int(nconnections) >= 1 else 'all') }"}, {"id": "label2", "label": "Line 2 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 2 else 'all') }"}, {"id": "color2", "label": "Line 2 Color", "base_key": "color1", "hide": "${ ('part' if int(nconnections) >= 2 else 'all') }"}, {"id": "alpha2", "label": "Line 2 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 2 else 'all') }"}, {"id": "label3", "label": "Line 3 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 3 else 'all') }"}, {"id": "color3", "label": "Line 3 Color", "base_key": "color1", "hide": "${ ('part' if int(nconnections) >= 3 else 'all') }"}, {"id": "alpha3", "label": "Line 3 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 3 else 'all') }"}, {"id": "label4", "label": "Line 4 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 4 else 'all') }"}, {"id": "color4", "label": "Line 4 Color", "base_key": "color1", "hide": "${ ('part' if int(nconnections) >= 4 else 'all') }"}, {"id": "alpha4", "label": "Line 4 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 4 else 'all') }"}, {"id": "label5", "label": "Line 5 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 5 else 'all') }"}, {"id": "color5", "label": "Line 5 Color", "base_key": "color1", "hide": "${ ('part' if int(nconnections) >= 5 else 'all') }"}, {"id": "alpha5", "label": "Line 5 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 5 else 'all') }"}, {"id": "label6", "label": "Line 6 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 6 else 'all') }"}, {"id": "color6", "label": "Line 6 Color", "base_key": "color1", "hide": "${ ('part' if int(nconnections) >= 6 else 'all') }"}, {"id": "alpha6", "label": "Line 6 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 6 else 'all') }"}, {"id": "label7", "label": "Line 7 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 7 else 'all') }"}, {"id": "color7", "label": "Line 7 Color", "base_key": "color1", "hide": "${ ('part' if int(nconnections) >= 7 else 'all') }"}, {"id": "alpha7", "label": "Line 7 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 7 else 'all') }"}, {"id": "label8", "label": "Line 8 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 8 else 'all') }"}, {"id": "color8", "label": "Line 8 Color", "base_key": "color1", "hide": "${ ('part' if int(nconnections) >= 8 else 'all') }"}, {"id": "alpha8", "label": "Line 8 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 8 else 'all') }"}, {"id": "label9", "label": "Line 9 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 9 else 'all') }"}, {"id": "color9", "label": "Line 9 Color", "base_key": "color1", "hide": "${ ('part' if int(nconnections) >= 9 else 'all') }"}, {"id": "alpha9", "label": "Line 9 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 9 else 'all') }"}, {"id": "label10", "label": "Line 10 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 10 else 'all') }"}, {"id": "color10", "label": "Line 10 Color", "base_key": "color1", "hide": "${ ('part' if int(nconnections) >= 10 else 'all') }"}, {"id": "alpha10", "label": "Line 10 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 10 else 'all') }"}], "inputs": [{"domain": "stream", "dtype": "${ type.t }", "multiplicity": "${ (0 if type.startswith('msg') else nconnections) }", "optional": true}], "templates": {"imports": "from PyQt5 import Qt\nfrom gnuradio import qtgui\nimport sip", "callbacks": ["set_num_rows(${nrows})", "set_num_cols(${ncols})", "set_multiplier(${mult})", "set_offset(${offset})", "set_update_time(${update_time})"], "make": "<%\n    win = 'self._%s_win'%id\n%>\\\nqtgui.${type.fcn}(\n    ${samp_rate},\n    ${nrows},\n    ${ncols},\n    ${mult},\n    ${offset},\n    ${name},\n    ${0 if type.startswith('msg') else nconnections}\n)\n\nself.${id}.set_update_time(${update_time})\nself.${id}.set_intensity_range(${zmin}, ${zmax})\nself.${id}.enable_grid(${grid})\nself.${id}.enable_axis_labels(${axislabels})\n\nlabels = [${label1}, ${label2}, ${label3}, ${label4}, ${label5},\n    ${label6}, ${label7}, ${label8}, ${label9}, ${label10}]\ncolors = [${color1}, ${color2}, ${color3}, ${color4}, ${color5},\n    ${color6}, ${color7}, ${color8}, ${color9}, ${color10}]\nalphas = [${alpha1}, ${alpha2}, ${alpha3}, ${alpha4}, ${alpha5},\n    ${alpha6}, ${alpha7}, ${alpha8}, ${alpha9}, ${alpha10}]\n\nfor i in range(${1 if type.startswith('msg') else nconnections}):\n    if len(labels[i]) == 0:\n        self.${id}.set_line_label(i, \"Data {0}\".format(i))\n    else:\n        self.${id}.set_line_label(i, labels[i])\n    self.${id}.set_color_map(i, colors[i])\n    self.${id}.set_line_alpha(i, alphas[i])\n\n${win} = sip.wrapinstance(self.${id}.pyqwidget(), Qt.QWidget)\n${gui_hint() % win}"}, "documentation": "The GUI hint can be used to position the widget within the application. The hint is of the form [tab_id@tab_index]: [row, col, row_span, col_span]. Both the tab specification and the grid position are optional.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/qtgui_time_sink_x.block.yml": {"id": "qtgui_time_sink_x", "label": "QT GUI Time Sink", "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "default": "complex", "options": ["complex", "float", "msg_complex", "msg_float"], "option_labels": ["Complex", "Float", "Complex Message", "Float Message"], "option_attributes": {"fcn": ["time_sink_c", "time_sink_f", "time_sink_c", "time_sink_f"], "t": ["complex", "float", "message", "message"]}, "hide": "part"}, {"id": "name", "label": "Name", "dtype": "string", "default": "\"\"", "hide": "${ ('none' if len(name) > 0 else 'part') }"}, {"id": "ylabel", "label": "Y Axis Label", "dtype": "string", "default": "Amplitude", "hide": "part"}, {"id": "yunit", "label": "Y Axis Unit", "dtype": "string", "default": "\"\"", "hide": "part"}, {"id": "size", "label": "Number of Points", "dtype": "int", "default": "1024", "hide": "${ ('all' if type.startswith('msg') else 'none') }"}, {"id": "srate", "label": "Sample Rate", "dtype": "float", "default": "samp_rate"}, {"id": "grid", "label": "Grid", "dtype": "enum", "default": "False", "options": ["True", "False"], "option_labels": ["Yes", "No"], "hide": "part"}, {"id": "autoscale", "label": "Autoscale", "dtype": "enum", "default": "False", "options": ["True", "False"], "option_labels": ["Yes", "No"]}, {"id": "ymin", "label": "Y min", "dtype": "float", "default": "-1", "hide": "part"}, {"id": "ymax", "label": "Y max", "dtype": "float", "default": "1", "hide": "part"}, {"id": "nconnections", "label": "Number of Inputs", "dtype": "int", "default": "1", "hide": "${ ('all' if type.startswith('msg') else 'part') }"}, {"id": "update_time", "label": "Update Period", "dtype": "float", "default": "0.10", "hide": "part"}, {"id": "entags", "label": "Disp. Tags", "dtype": "enum", "default": "True", "options": ["True", "False"], "option_labels": ["Yes", "No"], "hide": "${ ('all' if type.startswith('msg') else 'part') }"}, {"id": "gui_hint", "label": "GUI Hint", "dtype": "gui_hint", "hide": "part"}, {"id": "tr_mode", "label": "Trigger Mode", "category": "Trigger", "dtype": "enum", "default": "qtgui.TRIG_MODE_FREE", "options": ["qtgui.TRIG_MODE_FREE", "qtgui.TRIG_MODE_AUTO", "qtgui.TRIG_MODE_NORM", "qtgui.TRIG_MODE_TAG"], "option_labels": ["Free", "Auto", "Normal", "Tag"], "hide": "part"}, {"id": "tr_slope", "label": "Trigger Slope", "category": "Trigger", "dtype": "enum", "default": "qtgui.TRIG_MODE_POS", "options": ["qtgui.TRIG_SLOPE_POS", "qtgui.TRIG_SLOPE_NEG"], "option_labels": ["Positive", "Negative"], "hide": "part"}, {"id": "tr_level", "label": "Trigger Level", "category": "Trigger", "dtype": "float", "default": "0.0", "hide": "part"}, {"id": "tr_delay", "label": "Trigger Delay", "category": "Trigger", "dtype": "float", "default": "0", "hide": "part"}, {"id": "tr_chan", "label": "Trigger Channel", "category": "Trigger", "dtype": "int", "default": "0", "hide": "part"}, {"id": "tr_tag", "label": "Trigger Tag Key", "category": "Trigger", "dtype": "string", "default": "\"\"", "hide": "part"}, {"id": "ctrlpanel", "label": "Control Panel", "category": "Config", "dtype": "enum", "default": "False", "options": ["True", "False"], "option_labels": ["Yes", "No"], "hide": "part"}, {"id": "legend", "label": "Legend", "category": "Config", "dtype": "enum", "default": "True", "options": ["True", "False"], "option_labels": ["Yes", "No"], "hide": "part"}, {"id": "axislabels", "label": "Axis Labels", "category": "Config", "dtype": "enum", "default": "True", "options": ["True", "False"], "option_labels": ["Yes", "No"], "hide": "part"}, {"id": "stemplot", "label": "Stem Plot", "category": "Config", "dtype": "enum", "default": "False", "options": ["True", "False"], "option_labels": ["Yes", "No"], "hide": "part"}, {"id": "label1", "label": "Line 1 Label", "dtype": "string", "default": "Signal 1", "hide": "${ ('part' if ( int(nconnections) >= 1 or (type == \"complex\" and int(nconnections) >= 1) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "width1", "label": "Line 1 Width", "default": 1, "hide": "${ ('part' if ( int(nconnections) >= 1 or (type == \"complex\" and int(nconnections) >= 1) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "color1", "label": "Line 1 Color", "dtype": "enum", "options": ["blue", "red", "green", "black", "cyan", "magenta", "yellow", "dark red", "dark green", "dark blue"], "option_labels": ["Blue", "Red", "Green", "Black", "Cyan", "Magenta", "Yellow", "Dark Red", "Dark Green", "Dark Blue"], "default": "blue", "hide": "${ ('part' if ( int(nconnections) >= 1 or (type == \"complex\" and int(nconnections) >= 1) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "style1", "label": "Line 1 Style", "dtype": "enum", "options": ["1", "2", "3", "4", "5", "0"], "option_labels": ["Solid", "Dash", "Dots", "Dash-Dot", "Dash-Dot-Dot"], "default": 1, "hide": "${ ('part' if ( int(nconnections) >= 1 or (type == \"complex\" and int(nconnections) >= 1) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "marker1", "label": "Line 1 Marker", "dtype": "enum", "options": ["-1", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"], "option_labels": ["None", "Circle", "Rectangle", "Diamond", "Triangle", "Down Triangle", "Left Triangle", "Right Triangle", "Cross", "X-Cross"], "default": -1, "hide": "${ ('part' if ( int(nconnections) >= 1 or (type == \"complex\" and int(nconnections) >= 1) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "alpha1", "label": "Line 1 Alpha", "dtype": "real", "default": 1.0, "hide": "${ ('part' if ( int(nconnections) >= 1 or (type == \"complex\" and int(nconnections) >= 1) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "label2", "label": "Line 2 Label", "dtype": "string", "default": "Signal 2", "base_key": "label1", "hide": "${ ('part' if ( int(nconnections) >= 2 or (type == \"complex\" and int(nconnections) >= 1) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "width2", "label": "Line 2 Width", "default": 1, "base_key": "width1", "hide": "${ ('part' if ( int(nconnections) >= 2 or (type == \"complex\" and int(nconnections) >= 1) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "color2", "label": "Line 2 Color", "dtype": "enum", "options": ["blue", "red", "green", "black", "cyan", "magenta", "yellow", "dark red", "dark green", "dark blue"], "option_labels": ["Blue", "Red", "Green", "Black", "Cyan", "Magenta", "Yellow", "Dark Red", "Dark Green", "Dark Blue"], "default": "red", "base_key": "color1", "hide": "${ ('part' if ( int(nconnections) >= 2 or (type == \"complex\" and int(nconnections) >= 1) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "style2", "label": "Line 2 Style", "dtype": "enum", "options": ["1", "2", "3", "4", "5", "0"], "option_labels": ["Solid", "Dash", "Dots", "Dash-Dot", "Dash-Dot-Dot"], "default": 1, "base_key": "style1", "hide": "${ ('part' if ( int(nconnections) >= 2 or (type == \"complex\" and int(nconnections) >= 1) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "marker2", "label": "Line 2 Marker", "dtype": "enum", "options": ["-1", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"], "option_labels": ["None", "Circle", "Rectangle", "Diamond", "Triangle", "Down Triangle", "Left Triangle", "Right Triangle", "Cross", "X-Cross"], "default": -1, "base_key": "marker1", "hide": "${ ('part' if ( int(nconnections) >= 2 or (type == \"complex\" and int(nconnections) >= 1) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "alpha2", "label": "Line 2 Alpha", "dtype": "real", "default": 1.0, "base_key": "alpha1", "hide": "${ ('part' if ( int(nconnections) >= 2 or (type == \"complex\" and int(nconnections) >= 1) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "label3", "label": "Line 3 Label", "dtype": "string", "default": "Signal 3", "base_key": "label1", "hide": "${ ('part' if ( int(nconnections) >= 3 or (type == \"complex\" and int(nconnections) >= 2) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "width3", "label": "Line 3 Width", "default": 1, "base_key": "width1", "hide": "${ ('part' if ( int(nconnections) >= 3 or (type == \"complex\" and int(nconnections) >= 2) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "color3", "label": "Line 3 Color", "dtype": "enum", "options": ["blue", "red", "green", "black", "cyan", "magenta", "yellow", "dark red", "dark green", "dark blue"], "option_labels": ["Blue", "Red", "Green", "Black", "Cyan", "Magenta", "Yellow", "Dark Red", "Dark Green", "Dark Blue"], "default": "green", "base_key": "color1", "hide": "${ ('part' if ( int(nconnections) >= 3 or (type == \"complex\" and int(nconnections) >= 2) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "style3", "label": "Line 3 Style", "dtype": "enum", "options": ["1", "2", "3", "4", "5", "0"], "option_labels": ["Solid", "Dash", "Dots", "Dash-Dot", "Dash-Dot-Dot"], "default": 1, "base_key": "style1", "hide": "${ ('part' if ( int(nconnections) >= 3 or (type == \"complex\" and int(nconnections) >= 2) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "marker3", "label": "Line 3 Marker", "dtype": "enum", "options": ["-1", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"], "option_labels": ["None", "Circle", "Rectangle", "Diamond", "Triangle", "Down Triangle", "Left Triangle", "Right Triangle", "Cross", "X-Cross"], "default": -1, "base_key": "marker1", "hide": "${ ('part' if ( int(nconnections) >= 3 or (type == \"complex\" and int(nconnections) >= 2) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "alpha3", "label": "Line 3 Alpha", "dtype": "real", "default": 1.0, "base_key": "alpha1", "hide": "${ ('part' if ( int(nconnections) >= 3 or (type == \"complex\" and int(nconnections) >= 2) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "label4", "label": "Line 4 Label", "dtype": "string", "default": "Signal 4", "base_key": "label1", "hide": "${ ('part' if ( int(nconnections) >= 4 or (type == \"complex\" and int(nconnections) >= 2) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "width4", "label": "Line 4 Width", "default": 1, "base_key": "width1", "hide": "${ ('part' if ( int(nconnections) >= 4 or (type == \"complex\" and int(nconnections) >= 2) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "color4", "label": "Line 4 Color", "dtype": "enum", "options": ["blue", "red", "green", "black", "cyan", "magenta", "yellow", "dark red", "dark green", "dark blue"], "option_labels": ["Blue", "Red", "Green", "Black", "Cyan", "Magenta", "Yellow", "Dark Red", "Dark Green", "Dark Blue"], "default": "black", "base_key": "color1", "hide": "${ ('part' if ( int(nconnections) >= 4 or (type == \"complex\" and int(nconnections) >= 2) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "style4", "label": "Line 4 Style", "dtype": "enum", "options": ["1", "2", "3", "4", "5", "0"], "option_labels": ["Solid", "Dash", "Dots", "Dash-Dot", "Dash-Dot-Dot"], "default": 1, "base_key": "style1", "hide": "${ ('part' if ( int(nconnections) >= 4 or (type == \"complex\" and int(nconnections) >= 2) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "marker4", "label": "Line 4 Marker", "dtype": "enum", "options": ["-1", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"], "option_labels": ["None", "Circle", "Rectangle", "Diamond", "Triangle", "Down Triangle", "Left Triangle", "Right Triangle", "Cross", "X-Cross"], "default": -1, "base_key": "marker1", "hide": "${ ('part' if ( int(nconnections) >= 4 or (type == \"complex\" and int(nconnections) >= 2) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "alpha4", "label": "Line 4 Alpha", "dtype": "real", "default": 1.0, "base_key": "alpha1", "hide": "${ ('part' if ( int(nconnections) >= 4 or (type == \"complex\" and int(nconnections) >= 2) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "label5", "label": "Line 5 Label", "dtype": "string", "default": "Signal 5", "base_key": "label1", "hide": "${ ('part' if ( int(nconnections) >= 5 or (type == \"complex\" and int(nconnections) >= 3) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "width5", "label": "Line 5 Width", "default": 1, "base_key": "width1", "hide": "${ ('part' if ( int(nconnections) >= 5 or (type == \"complex\" and int(nconnections) >= 3) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "color5", "label": "Line 5 Color", "dtype": "enum", "options": ["blue", "red", "green", "black", "cyan", "magenta", "yellow", "dark red", "dark green", "dark blue"], "option_labels": ["Blue", "Red", "Green", "Black", "Cyan", "Magenta", "Yellow", "Dark Red", "Dark Green", "Dark Blue"], "default": "cyan", "base_key": "color1", "hide": "${ ('part' if ( int(nconnections) >= 5 or (type == \"complex\" and int(nconnections) >= 3) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "style5", "label": "Line 5 Style", "dtype": "enum", "options": ["1", "2", "3", "4", "5", "0"], "option_labels": ["Solid", "Dash", "Dots", "Dash-Dot", "Dash-Dot-Dot"], "default": 1, "base_key": "style1", "hide": "${ ('part' if ( int(nconnections) >= 5 or (type == \"complex\" and int(nconnections) >= 3) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "marker5", "label": "Line 5 Marker", "dtype": "enum", "options": ["-1", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"], "option_labels": ["None", "Circle", "Rectangle", "Diamond", "Triangle", "Down Triangle", "Left Triangle", "Right Triangle", "Cross", "X-Cross"], "default": -1, "base_key": "marker1", "hide": "${ ('part' if ( int(nconnections) >= 5 or (type == \"complex\" and int(nconnections) >= 3) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "alpha5", "label": "Line 5 Alpha", "dtype": "real", "default": 1.0, "base_key": "alpha1", "hide": "${ ('part' if ( int(nconnections) >= 5 or (type == \"complex\" and int(nconnections) >= 3) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "label6", "label": "Line 6 Label", "dtype": "string", "default": "Signal 6", "base_key": "label1", "hide": "${ ('part' if ( int(nconnections) >= 6 or (type == \"complex\" and int(nconnections) >= 3) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "width6", "label": "Line 6 Width", "default": 1, "base_key": "width1", "hide": "${ ('part' if ( int(nconnections) >= 6 or (type == \"complex\" and int(nconnections) >= 3) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "color6", "label": "Line 6 Color", "dtype": "enum", "options": ["blue", "red", "green", "black", "cyan", "magenta", "yellow", "dark red", "dark green", "dark blue"], "option_labels": ["Blue", "Red", "Green", "Black", "Cyan", "Magenta", "Yellow", "Dark Red", "Dark Green", "Dark Blue"], "default": "magenta", "base_key": "color1", "hide": "${ ('part' if ( int(nconnections) >= 6 or (type == \"complex\" and int(nconnections) >= 3) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "style6", "label": "Line 6 Style", "dtype": "enum", "options": ["1", "2", "3", "4", "5", "0"], "option_labels": ["Solid", "Dash", "Dots", "Dash-Dot", "Dash-Dot-Dot"], "default": 1, "base_key": "style1", "hide": "${ ('part' if ( int(nconnections) >= 6 or (type == \"complex\" and int(nconnections) >= 3) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "marker6", "label": "Line 6 Marker", "dtype": "enum", "options": ["-1", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"], "option_labels": ["None", "Circle", "Rectangle", "Diamond", "Triangle", "Down Triangle", "Left Triangle", "Right Triangle", "Cross", "X-Cross"], "default": -1, "base_key": "marker1", "hide": "${ ('part' if ( int(nconnections) >= 6 or (type == \"complex\" and int(nconnections) >= 3) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "alpha6", "label": "Line 6 Alpha", "dtype": "real", "default": 1.0, "base_key": "alpha1", "hide": "${ ('part' if ( int(nconnections) >= 6 or (type == \"complex\" and int(nconnections) >= 3) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "label7", "label": "Line 7 Label", "dtype": "string", "default": "Signal 7", "base_key": "label1", "hide": "${ ('part' if ( int(nconnections) >= 7 or (type == \"complex\" and int(nconnections) >= 4) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "width7", "label": "Line 7 Width", "default": 1, "base_key": "width1", "hide": "${ ('part' if ( int(nconnections) >= 7 or (type == \"complex\" and int(nconnections) >= 4) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "color7", "label": "Line 7 Color", "dtype": "enum", "options": ["blue", "red", "green", "black", "cyan", "magenta", "yellow", "dark red", "dark green", "dark blue"], "option_labels": ["Blue", "Red", "Green", "Black", "Cyan", "Magenta", "Yellow", "Dark Red", "Dark Green", "Dark Blue"], "default": "yellow", "base_key": "color1", "hide": "${ ('part' if ( int(nconnections) >= 7 or (type == \"complex\" and int(nconnections) >= 4) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "style7", "label": "Line 7 Style", "dtype": "enum", "options": ["1", "2", "3", "4", "5", "0"], "option_labels": ["Solid", "Dash", "Dots", "Dash-Dot", "Dash-Dot-Dot"], "default": 1, "base_key": "style1", "hide": "${ ('part' if ( int(nconnections) >= 7 or (type == \"complex\" and int(nconnections) >= 4) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "marker7", "label": "Line 7 Marker", "dtype": "enum", "options": ["-1", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"], "option_labels": ["None", "Circle", "Rectangle", "Diamond", "Triangle", "Down Triangle", "Left Triangle", "Right Triangle", "Cross", "X-Cross"], "default": -1, "base_key": "marker1", "hide": "${ ('part' if ( int(nconnections) >= 7 or (type == \"complex\" and int(nconnections) >= 4) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "alpha7", "label": "Line 7 Alpha", "dtype": "real", "default": 1.0, "base_key": "alpha1", "hide": "${ ('part' if ( int(nconnections) >= 7 or (type == \"complex\" and int(nconnections) >= 4) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "label8", "label": "Line 8 Label", "dtype": "string", "default": "Signal 8", "base_key": "label1", "hide": "${ ('part' if ( int(nconnections) >= 8 or (type == \"complex\" and int(nconnections) >= 4) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "width8", "label": "Line 8 Width", "default": 1, "base_key": "width1", "hide": "${ ('part' if ( int(nconnections) >= 8 or (type == \"complex\" and int(nconnections) >= 4) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "color8", "label": "Line 8 Color", "dtype": "enum", "options": ["blue", "red", "green", "black", "cyan", "magenta", "yellow", "dark red", "dark green", "dark blue"], "option_labels": ["Blue", "Red", "Green", "Black", "Cyan", "Magenta", "Yellow", "Dark Red", "Dark Green", "Dark Blue"], "default": "dark red", "base_key": "color1", "hide": "${ ('part' if ( int(nconnections) >= 8 or (type == \"complex\" and int(nconnections) >= 4) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "style8", "label": "Line 8 Style", "dtype": "enum", "options": ["1", "2", "3", "4", "5", "0"], "option_labels": ["Solid", "Dash", "Dots", "Dash-Dot", "Dash-Dot-Dot"], "default": 1, "base_key": "style1", "hide": "${ ('part' if ( int(nconnections) >= 8 or (type == \"complex\" and int(nconnections) >= 4) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "marker8", "label": "Line 8 Marker", "dtype": "enum", "options": ["-1", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"], "option_labels": ["None", "Circle", "Rectangle", "Diamond", "Triangle", "Down Triangle", "Left Triangle", "Right Triangle", "Cross", "X-Cross"], "default": -1, "base_key": "marker1", "hide": "${ ('part' if ( int(nconnections) >= 8 or (type == \"complex\" and int(nconnections) >= 4) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "alpha8", "label": "Line 8 Alpha", "dtype": "real", "default": 1.0, "base_key": "alpha1", "hide": "${ ('part' if ( int(nconnections) >= 8 or (type == \"complex\" and int(nconnections) >= 4) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "label9", "label": "Line 9 Label", "dtype": "string", "default": "Signal 9", "base_key": "label1", "hide": "${ ('part' if ( int(nconnections) >= 9 or (type == \"complex\" and int(nconnections) >= 5) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "width9", "label": "Line 9 Width", "default": 1, "base_key": "width1", "hide": "${ ('part' if ( int(nconnections) >= 9 or (type == \"complex\" and int(nconnections) >= 5) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "color9", "label": "Line 9 Color", "dtype": "enum", "options": ["blue", "red", "green", "black", "cyan", "magenta", "yellow", "dark red", "dark green", "dark blue"], "option_labels": ["Blue", "Red", "Green", "Black", "Cyan", "Magenta", "Yellow", "Dark Red", "Dark Green", "Dark Blue"], "default": "dark green", "base_key": "color1", "hide": "${ ('part' if ( int(nconnections) >= 9 or (type == \"complex\" and int(nconnections) >= 5) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "style9", "label": "Line 9 Style", "dtype": "enum", "options": ["1", "2", "3", "4", "5", "0"], "option_labels": ["Solid", "Dash", "Dots", "Dash-Dot", "Dash-Dot-Dot"], "default": 1, "base_key": "style1", "hide": "${ ('part' if ( int(nconnections) >= 9 or (type == \"complex\" and int(nconnections) >= 5) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "marker9", "label": "Line 9 Marker", "dtype": "enum", "options": ["-1", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"], "option_labels": ["None", "Circle", "Rectangle", "Diamond", "Triangle", "Down Triangle", "Left Triangle", "Right Triangle", "Cross", "X-Cross"], "default": -1, "base_key": "marker1", "hide": "${ ('part' if ( int(nconnections) >= 9 or (type == \"complex\" and int(nconnections) >= 5) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "alpha9", "label": "Line 9 Alpha", "dtype": "real", "default": 1.0, "base_key": "alpha1", "hide": "${ ('part' if ( int(nconnections) >= 9 or (type == \"complex\" and int(nconnections) >= 5) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "label10", "label": "Line 10 Label", "dtype": "string", "default": "Signal 10", "base_key": "label1", "hide": "${ ('part' if ( int(nconnections) >= 10 or (type == \"complex\" and int(nconnections) >= 5) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "width10", "label": "Line 10 Width", "default": 1, "base_key": "width1", "hide": "${ ('part' if ( int(nconnections) >= 10 or (type == \"complex\" and int(nconnections) >= 5) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "color10", "label": "Line 10 Color", "dtype": "enum", "options": ["blue", "red", "green", "black", "cyan", "magenta", "yellow", "dark red", "dark green", "dark blue"], "option_labels": ["Blue", "Red", "Green", "Black", "Cyan", "Magenta", "Yellow", "Dark Red", "Dark Green", "Dark Blue"], "default": "dark blue", "base_key": "color1", "hide": "${ ('part' if ( int(nconnections) >= 10 or (type == \"complex\" and int(nconnections) >= 5) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "style10", "label": "Line 10 Style", "dtype": "enum", "options": ["1", "2", "3", "4", "5", "0"], "option_labels": ["Solid", "Dash", "Dots", "Dash-Dot", "Dash-Dot-Dot"], "default": 1, "base_key": "style1", "hide": "${ ('part' if ( int(nconnections) >= 10 or (type == \"complex\" and int(nconnections) >= 5) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "marker10", "label": "Line 10 Marker", "dtype": "enum", "options": ["-1", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"], "option_labels": ["None", "Circle", "Rectangle", "Diamond", "Triangle", "Down Triangle", "Left Triangle", "Right Triangle", "Cross", "X-Cross"], "default": -1, "base_key": "marker1", "hide": "${ ('part' if ( int(nconnections) >= 10 or (type == \"complex\" and int(nconnections) >= 5) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}, {"id": "alpha10", "label": "Line 10 Alpha", "dtype": "real", "default": 1.0, "base_key": "alpha1", "hide": "${ ('part' if ( int(nconnections) >= 10 or (type == \"complex\" and int(nconnections) >= 5) or (type == \"msg_complex\")) and (not type == \"msg_float\") else 'all') }", "category": "Config"}], "asserts": ["${nconnections <= (5 if type == 'complex' else 10)}"], "inputs": [{"domain": "stream", "dtype": "${ type.t }", "multiplicity": "${ (0 if type.startswith('msg') else nconnections) }", "optional": true}], "templates": {"imports": "from PyQt5 import Qt\nfrom gnuradio import qtgui\nfrom gnuradio.filter import firdes\nimport sip", "callbacks": ["set_time_domain_axis(${min}, ${max})", "set_update_time(${update_time})", "set_y_axis(${ymin}, ${ymax})", "set_samp_rate(${srate})", "self.${id}.set_trigger_mode(${tr_mode}, ${tr_slope}, ${tr_level}, ${tr_delay}, ${tr_chan}, ${tr_tag})"], "make": "<%\n    win = 'self._%s_win'%id\n%>\\\nqtgui.${type.fcn}(\n    ${size}, #size\n    ${srate}, #samp_rate\n    ${name}, #name\n    ${0 if type.startswith('msg') else nconnections} #number of inputs\n)\nself.${id}.set_update_time(${update_time})\nself.${id}.set_y_axis(${ymin}, ${ymax})\n\nself.${id}.set_y_label(${ylabel}, ${yunit})\n\nself.${id}.enable_tags(${entags})\nself.${id}.set_trigger_mode(${tr_mode}, ${tr_slope}, ${tr_level}, ${tr_delay}, ${tr_chan}, ${tr_tag})\nself.${id}.enable_autoscale(${autoscale})\nself.${id}.enable_grid(${grid})\nself.${id}.enable_axis_labels(${axislabels})\nself.${id}.enable_control_panel(${ctrlpanel})\nself.${id}.enable_stem_plot(${stemplot})\n\n% if legend == \"False\":\nself.${id}.disable_legend()\n% endif\n\nlabels = [${label1}, ${label2}, ${label3}, ${label4}, ${label5},\n    ${label6}, ${label7}, ${label8}, ${label9}, ${label10}]\nwidths = [${width1}, ${width2}, ${width3}, ${width4}, ${width5},\n    ${width6}, ${width7}, ${width8}, ${width9}, ${width10}]\ncolors = ['${color1}', '${color2}', '${color3}', '${color4}', '${color5}',\n    '${color6}', '${color7}', '${color8}', '${color9}', '${color10}']\nalphas = [${alpha1}, ${alpha2}, ${alpha3}, ${alpha4}, ${alpha5},\n    ${alpha6}, ${alpha7}, ${alpha8}, ${alpha9}, ${alpha10}]\nstyles = [${style1}, ${style2}, ${style3}, ${style4}, ${style5},\n    ${style6}, ${style7}, ${style8}, ${style9}, ${style10}]\nmarkers = [${marker1}, ${marker2}, ${marker3}, ${marker4}, ${marker5},\n    ${marker6}, ${marker7}, ${marker8}, ${marker9}, ${marker10}]\n\n\n% if type.endswith('complex'):\nfor i in range(${2 if type.startswith('msg') else 2*int(nconnections)}):\n    if len(labels[i]) == 0:\n        if (i % 2 == 0):\n            self.${id}.set_line_label(i, \"Re{{Data {0}}}\".format(i/2))\n        else:\n            self.${id}.set_line_label(i, \"Im{{Data {0}}}\".format(i/2))\n    else:\n        self.${id}.set_line_label(i, labels[i])\n    self.${id}.set_line_width(i, widths[i])\n    self.${id}.set_line_color(i, colors[i])\n    self.${id}.set_line_style(i, styles[i])\n    self.${id}.set_line_marker(i, markers[i])\n    self.${id}.set_line_alpha(i, alphas[i])\n% else:\nfor i in range(${1 if type.startswith('msg') else int(nconnections)}):\n    if len(labels[i]) == 0:\n        self.${id}.set_line_label(i, \"Data {0}\".format(i))\n    else:\n        self.${id}.set_line_label(i, labels[i])\n    self.${id}.set_line_width(i, widths[i])\n    self.${id}.set_line_color(i, colors[i])\n    self.${id}.set_line_style(i, styles[i])\n    self.${id}.set_line_marker(i, markers[i])\n    self.${id}.set_line_alpha(i, alphas[i])\n% endif\n\n${win} = sip.wrapinstance(self.${id}.pyqwidget(), Qt.QWidget)\n${gui_hint() % win}"}, "documentation": "The GUI hint can be used to position the widget within the application. The hint is of the form [tab_id@tab_index]: [row, col, row_span, col_span]. Both the tab specification and the grid position are optional.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/qtgui_vector_sink_f.block.yml": {"id": "qtgui_vector_sink_f", "label": "QT GUI Vector Sink", "flags": ["python"], "parameters": [{"id": "name", "label": "Name", "dtype": "string", "default": "\"\"", "hide": "${ ('none' if len(name) > 0 else 'part') }"}, {"id": "vlen", "label": "Vector Size", "dtype": "int", "default": "1024", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "x_start", "label": "X-Axis Start Value", "dtype": "real", "default": "0"}, {"id": "x_step", "label": "X-Axis Step Value", "dtype": "real", "default": "1.0"}, {"id": "x_axis_label", "label": "X-Axis Label", "dtype": "string", "default": "\"x-Axis\"", "hide": "${ ('none' if (len(x_axis_label) > 0 and x_axis_label != \"x-Axis\") else 'part') }"}, {"id": "y_axis_label", "label": "Y-Axis Label", "dtype": "string", "default": "\"y-Axis\"", "hide": "${ ('none' if (len(y_axis_label) > 0 and y_axis_label != \"y-Axis\") else 'part') }"}, {"id": "x_units", "label": "X-Axis Units", "dtype": "string", "default": "\"\"", "hide": "'part'"}, {"id": "y_units", "label": "Y-Axis Units", "dtype": "string", "default": "\"\"", "hide": "'part'"}, {"id": "ref_level", "label": "Ref Level", "dtype": "real", "default": "0"}, {"id": "grid", "label": "Grid", "dtype": "enum", "default": "False", "options": ["True", "False"], "option_labels": ["Yes", "No"], "hide": "part"}, {"id": "autoscale", "label": "Autoscale", "dtype": "enum", "default": "False", "options": ["True", "False"], "option_labels": ["Yes", "No"], "hide": "part"}, {"id": "average", "label": "Average", "dtype": "enum", "default": "False", "options": ["1.0", "0.2", "0.1", "0.05"], "option_labels": ["None", "Low", "Medium", "High"], "hide": "part"}, {"id": "ymin", "label": "Y min", "dtype": "real", "default": "-140", "hide": "part"}, {"id": "ymax", "label": "Y max", "dtype": "real", "default": "10", "hide": "part"}, {"id": "nconnections", "label": "Number of Inputs", "dtype": "int", "default": "1", "hide": "part"}, {"id": "update_time", "label": "Update Period", "dtype": "real", "default": "0.10", "hide": "part"}, {"id": "gui_hint", "label": "GUI Hint", "dtype": "gui_hint", "hide": "part"}, {"id": "showports", "label": "Show Msg Ports", "dtype": "bool", "default": "False", "hide": "part"}, {"id": "label1", "label": "Line 1 Label", "category": "Config", "dtype": "string", "hide": "${ ('part' if int(nconnections) >= 1 else 'all') }"}, {"id": "width1", "label": "Line 1 Width", "category": "Config", "dtype": "int", "default": "1", "hide": "${ ('part' if int(nconnections) >= 1 else 'all') }"}, {"id": "color1", "label": "Line 1 Color", "category": "Config", "dtype": "enum", "options": ["\"blue\"", "\"red\"", "\"green\"", "\"black\"", "\"cyan\"", "\"magenta\"", "\"yellow\"", "\"dark red\"", "\"dark green\"", "\"dark blue\""], "option_labels": ["Blue", "Red", "Green", "Black", "Cyan", "Magenta", "Yellow", "Dark Red", "Dark Green", "Dark Blue"], "hide": "${ ('part' if int(nconnections) >= 1 else 'all') }"}, {"id": "alpha1", "label": "Line 1 Alpha", "category": "Config", "dtype": "float", "default": "1.0", "hide": "${ ('part' if int(nconnections) >= 1 else 'all') }"}, {"id": "label2", "label": "Line 2 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 2 else 'all') }"}, {"id": "width2", "label": "Line 2 Width", "base_key": "width1", "hide": "${ ('part' if int(nconnections) >= 2 else 'all') }"}, {"id": "color2", "label": "Line 2 Color", "base_key": "color1", "default": "\"red\"", "hide": "${ ('part' if int(nconnections) >= 2 else 'all') }"}, {"id": "alpha2", "label": "Line 2 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 2 else 'all') }"}, {"id": "label3", "label": "Line 3 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 3 else 'all') }"}, {"id": "width3", "label": "Line 3 Width", "base_key": "width1", "hide": "${ ('part' if int(nconnections) >= 3 else 'all') }"}, {"id": "color3", "label": "Line 3 Color", "base_key": "color1", "default": "\"green\"", "hide": "${ ('part' if int(nconnections) >= 3 else 'all') }"}, {"id": "alpha3", "label": "Line 3 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 3 else 'all') }"}, {"id": "label4", "label": "Line 4 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 4 else 'all') }"}, {"id": "width4", "label": "Line 4 Width", "base_key": "width1", "hide": "${ ('part' if int(nconnections) >= 4 else 'all') }"}, {"id": "color4", "label": "Line 4 Color", "base_key": "color1", "default": "\"black\"", "hide": "${ ('part' if int(nconnections) >= 4 else 'all') }"}, {"id": "alpha4", "label": "Line 4 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 4 else 'all') }"}, {"id": "label5", "label": "Line 5 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 5 else 'all') }"}, {"id": "width5", "label": "Line 5 Width", "base_key": "width1", "hide": "${ ('part' if int(nconnections) >= 5 else 'all') }"}, {"id": "color5", "label": "Line 5 Color", "base_key": "color1", "default": "\"cyan\"", "hide": "${ ('part' if int(nconnections) >= 5 else 'all') }"}, {"id": "alpha5", "label": "Line 5 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 5 else 'all') }"}, {"id": "label6", "label": "Line 6 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 6 else 'all') }"}, {"id": "width6", "label": "Line 6 Width", "base_key": "width1", "hide": "${ ('part' if int(nconnections) >= 6 else 'all') }"}, {"id": "color6", "label": "Line 6 Color", "base_key": "color1", "default": "\"magenta\"", "hide": "${ ('part' if int(nconnections) >= 6 else 'all') }"}, {"id": "alpha6", "label": "Line 6 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 6 else 'all') }"}, {"id": "label7", "label": "Line 7 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 7 else 'all') }"}, {"id": "width7", "label": "Line 7 Width", "base_key": "width1", "hide": "${ ('part' if int(nconnections) >= 7 else 'all') }"}, {"id": "color7", "label": "Line 7 Color", "base_key": "color1", "default": "\"yellow\"", "hide": "${ ('part' if int(nconnections) >= 7 else 'all') }"}, {"id": "alpha7", "label": "Line 7 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 7 else 'all') }"}, {"id": "label8", "label": "Line 8 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 8 else 'all') }"}, {"id": "width8", "label": "Line 8 Width", "base_key": "width1", "hide": "${ ('part' if int(nconnections) >= 8 else 'all') }"}, {"id": "color8", "label": "Line 8 Color", "base_key": "color1", "default": "\"dark red\"", "hide": "${ ('part' if int(nconnections) >= 8 else 'all') }"}, {"id": "alpha8", "label": "Line 8 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 8 else 'all') }"}, {"id": "label9", "label": "Line 9 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 9 else 'all') }"}, {"id": "width9", "label": "Line 9 Width", "base_key": "width1", "hide": "${ ('part' if int(nconnections) >= 9 else 'all') }"}, {"id": "color9", "label": "Line 9 Color", "base_key": "color1", "default": "\"dark green\"", "hide": "${ ('part' if int(nconnections) >= 9 else 'all') }"}, {"id": "alpha9", "label": "Line 9 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 9 else 'all') }"}, {"id": "label10", "label": "Line 10 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 10 else 'all') }"}, {"id": "width10", "label": "Line 10 Width", "base_key": "width1", "hide": "${ ('part' if int(nconnections) >= 10 else 'all') }"}, {"id": "color10", "label": "Line 10 Color", "base_key": "color1", "default": "\"dark blue\"", "hide": "${ ('part' if int(nconnections) >= 10 else 'all') }"}, {"id": "alpha10", "label": "Line 10 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 10 else 'all') }"}], "inputs": [{"domain": "stream", "dtype": "float", "vlen": "${ vlen }", "multiplicity": "${ nconnections }"}], "outputs": [{"domain": "message", "id": "xval", "optional": true, "hide": "${ not showports }"}], "templates": {"imports": "from PyQt5 import Qt\nfrom gnuradio import qtgui\nimport sip", "callbacks": ["set_update_time(${update_time})", "set_x_axis(${x_start}, ${x_step})", "set_y_axis(${ymin}, ${ymax})", "set_ref_level(${ref_level})", "set_x_axis_units(${x_units})", "set_y_axis_units(${y_units})"], "make": "<%\n    win = 'self._%s_win'%id\n%>\\\nqtgui.vector_sink_f(\n    ${vlen},\n    ${x_start},\n    ${x_step},\n    ${x_axis_label},\n    ${y_axis_label},\n    ${name},\n    ${nconnections} # Number of inputs\n)\nself.${id}.set_update_time(${update_time})\nself.${id}.set_y_axis(${ymin}, ${ymax})\nself.${id}.enable_autoscale(${autoscale})\nself.${id}.enable_grid(${grid})\nself.${id}.set_x_axis_units(${x_units})\nself.${id}.set_y_axis_units(${y_units})\nself.${id}.set_ref_level(${ref_level})\n\nlabels = [${label1}, ${label2}, ${label3}, ${label4}, ${label5},\n    ${label6}, ${label7}, ${label8}, ${label9}, ${label10}]\nwidths = [${width1}, ${width2}, ${width3}, ${width4}, ${width5},\n    ${width6}, ${width7}, ${width8}, ${width9}, ${width10}]\ncolors = [${color1}, ${color2}, ${color3}, ${color4}, ${color5},\n    ${color6}, ${color7}, ${color8}, ${color9}, ${color10}]\nalphas = [${alpha1}, ${alpha2}, ${alpha3}, ${alpha4}, ${alpha5},\n    ${alpha6}, ${alpha7}, ${alpha8}, ${alpha9}, ${alpha10}]\n\nfor i in range(${nconnections}):\n    if len(labels[i]) == 0:\n        self.${id}.set_line_label(i, \"Data {0}\".format(i))\n    else:\n        self.${id}.set_line_label(i, labels[i])\n    self.${id}.set_line_width(i, widths[i])\n    self.${id}.set_line_color(i, colors[i])\n    self.${id}.set_line_alpha(i, alphas[i])\n\n${win} = sip.wrapinstance(self.${id}.pyqwidget(), Qt.QWidget)\n${gui_hint() % win}"}, "documentation": "The GUI hint can be used to position the widget within the application. The hint is of the form [tab_id@tab_index]: [row, col, row_span, col_span]. Both the tab specification and the grid position are optional.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/qtgui_waterfall_sink_x.block.yml": {"id": "qtgui_waterfall_sink_x", "label": "QT GUI Waterfall Sink", "flags": ["python", "cpp"], "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "default": "complex", "options": ["complex", "float", "msg_complex", "msg_float"], "option_labels": ["Complex", "Float", "Complex Message", "Float Message"], "option_attributes": {"fcn": ["waterfall_sink_c", "waterfall_sink_f", "waterfall_sink_c", "waterfall_sink_f"], "t": ["complex", "float", "message", "message"]}, "hide": "part"}, {"id": "name", "label": "Name", "dtype": "string", "default": "\"\"", "hide": "${ ('none' if len(name) > 0 else 'part') }"}, {"id": "fftsize", "label": "FFT Size", "dtype": "int", "default": "1024", "hide": "${ ('all' if type.startswith('msg') else 'none') }"}, {"id": "freqhalf", "label": "Spectrum Width", "dtype": "enum", "default": "True", "options": ["True", "False"], "option_labels": ["Full", "Half"], "hide": "${ ('part' if type == \"float\" or type == \"msg_float\" else 'all') }"}, {"id": "wintype", "label": "Window Type", "dtype": "int", "default": "firdes.WIN_BLACKMAN_hARRIS", "options": ["firdes.WIN_BLACKMAN_hARRIS", "firdes.WIN_HAMMING", "firdes.WIN_HANN", "firdes.WIN_BLACKMAN", "firdes.WIN_RECTANGULAR", "firdes.WIN_KAISER", "firdes.WIN_FLATTOP"], "option_labels": ["Blackman-harris", "Hamming", "Hann", "Blackman", "Rectangular", "Kaiser", "Flat-top"], "hide": "part"}, {"id": "fc", "label": "Center Frequency (Hz)", "dtype": "real", "default": "0"}, {"id": "bw", "label": "Bandwidth (Hz)", "dtype": "real", "default": "samp_rate"}, {"id": "int_min", "label": "Intensity Min", "dtype": "float", "default": "-140", "hide": "part"}, {"id": "int_max", "label": "Intensity Max", "dtype": "float", "default": "10", "hide": "part"}, {"id": "grid", "label": "Grid", "dtype": "enum", "default": "False", "options": ["True", "False"], "option_labels": ["Yes", "No"], "hide": "part"}, {"id": "nconnections", "label": "Number of Inputs", "dtype": "int", "default": "1", "hide": "${ ('all' if type.startswith('msg') else 'part') }"}, {"id": "update_time", "label": "Update Period", "dtype": "real", "default": "0.10", "hide": "part"}, {"id": "gui_hint", "label": "GUI Hint", "dtype": "gui_hint", "hide": "part"}, {"id": "showports", "label": "Show Msg Ports", "dtype": "bool", "default": "False", "hide": "part"}, {"id": "legend", "label": "Legend", "category": "Config", "dtype": "enum", "default": "True", "options": ["True", "False"], "option_labels": ["Yes", "No"], "hide": "part"}, {"id": "label1", "label": "Line 1 Label", "category": "Config", "dtype": "string", "hide": "${ ('part' if int(nconnections) >= 1 else 'all') }"}, {"id": "axislabels", "label": "Axis Labels", "category": "Config", "dtype": "enum", "default": "True", "options": ["True", "False"], "option_labels": ["Yes", "No"], "hide": "part"}, {"id": "color1", "label": "Line 1 Color", "category": "Config", "dtype": "enum", "options": ["0", "1", "2", "3", "5", "6"], "option_labels": ["Multi Color", "White Hot", "Black Hot", "Incandescent", "Sunset", "Cool"], "hide": "${ ('part' if int(nconnections) >= 1 else 'all') }"}, {"id": "alpha1", "label": "Line 1 Alpha", "category": "Config", "dtype": "float", "default": "1.0", "hide": "${ ('part' if int(nconnections) >= 1 else 'all') }"}, {"id": "label2", "label": "Line 2 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 2 else 'all') }"}, {"id": "color2", "label": "Line 2 Color", "base_key": "color1", "hide": "${ ('part' if int(nconnections) >= 2 else 'all') }"}, {"id": "alpha2", "label": "Line 2 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 2 else 'all') }"}, {"id": "label3", "label": "Line 3 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 3 else 'all') }"}, {"id": "color3", "label": "Line 3 Color", "base_key": "color1", "hide": "${ ('part' if int(nconnections) >= 3 else 'all') }"}, {"id": "alpha3", "label": "Line 3 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 3 else 'all') }"}, {"id": "label4", "label": "Line 4 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 4 else 'all') }"}, {"id": "color4", "label": "Line 4 Color", "base_key": "color1", "hide": "${ ('part' if int(nconnections) >= 4 else 'all') }"}, {"id": "alpha4", "label": "Line 4 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 4 else 'all') }"}, {"id": "label5", "label": "Line 5 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 5 else 'all') }"}, {"id": "color5", "label": "Line 5 Color", "base_key": "color1", "hide": "${ ('part' if int(nconnections) >= 5 else 'all') }"}, {"id": "alpha5", "label": "Line 5 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 5 else 'all') }"}, {"id": "label6", "label": "Line 6 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 6 else 'all') }"}, {"id": "color6", "label": "Line 6 Color", "base_key": "color1", "hide": "${ ('part' if int(nconnections) >= 6 else 'all') }"}, {"id": "alpha6", "label": "Line 6 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 6 else 'all') }"}, {"id": "label7", "label": "Line 7 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 7 else 'all') }"}, {"id": "color7", "label": "Line 7 Color", "base_key": "color1", "hide": "${ ('part' if int(nconnections) >= 7 else 'all') }"}, {"id": "alpha7", "label": "Line 7 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 7 else 'all') }"}, {"id": "label8", "label": "Line 8 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 8 else 'all') }"}, {"id": "color8", "label": "Line 8 Color", "base_key": "color1", "hide": "${ ('part' if int(nconnections) >= 8 else 'all') }"}, {"id": "alpha8", "label": "Line 8 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 8 else 'all') }"}, {"id": "label9", "label": "Line 9 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 9 else 'all') }"}, {"id": "color9", "label": "Line 9 Color", "base_key": "color1", "hide": "${ ('part' if int(nconnections) >= 9 else 'all') }"}, {"id": "alpha9", "label": "Line 9 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 9 else 'all') }"}, {"id": "label10", "label": "Line 10 Label", "base_key": "label1", "hide": "${ ('part' if int(nconnections) >= 10 else 'all') }"}, {"id": "color10", "label": "Line 10 Color", "base_key": "color1", "hide": "${ ('part' if int(nconnections) >= 10 else 'all') }"}, {"id": "alpha10", "label": "Line 10 Alpha", "base_key": "alpha1", "hide": "${ ('part' if int(nconnections) >= 10 else 'all') }"}], "inputs": [{"domain": "stream", "dtype": "${ type.t }", "multiplicity": "${ (0 if type.startswith('msg') else nconnections) }", "optional": true}, {"domain": "message", "id": "freq", "optional": true, "hide": "${ not showports }"}, {"domain": "message", "id": "bw", "optional": true, "hide": "${ not showports }"}], "outputs": [{"domain": "message", "id": "freq", "optional": true, "hide": "${ not showports }"}], "templates": {"imports": "from PyQt5 import Qt\nfrom gnuradio import qtgui\nfrom gnuradio.filter import firdes\nimport sip", "callbacks": ["set_frequency_range(${fc}, ${bw})", "set_update_time(${update_time})", "set_intensity_range(${int_min}, ${int_max})"], "make": "<%\n    win = 'self._%s_win'%id\n%>\\\nqtgui.${type.fcn}(\n    ${fftsize}, #size\n    ${wintype}, #wintype\n    ${fc}, #fc\n    ${bw}, #bw\n    ${name}, #name\n    ${ (0 if type.startswith('msg') else nconnections) } #number of inputs\n)\nself.${id}.set_update_time(${update_time})\nself.${id}.enable_grid(${grid})\nself.${id}.enable_axis_labels(${axislabels})\n\n% if legend == \"False\":\nself.${id}.disable_legend()\n% endif\n\n% if type == \"float\" or type == \"msg_float\":\nself.${id}.set_plot_pos_half(not ${freqhalf})\n% endif\n\nlabels = [${label1}, ${label2}, ${label3}, ${label4}, ${label5},\n          ${label6}, ${label7}, ${label8}, ${label9}, ${label10}]\ncolors = [${color1}, ${color2}, ${color3}, ${color4}, ${color5},\n          ${color6}, ${color7}, ${color8}, ${color9}, ${color10}]\nalphas = [${alpha1}, ${alpha2}, ${alpha3}, ${alpha4}, ${alpha5},\n          ${alpha6}, ${alpha7}, ${alpha8}, ${alpha9}, ${alpha10}]\n\nfor i in range(${1 if type.startswith('msg') else nconnections}):\n    if len(labels[i]) == 0:\n        self.${id}.set_line_label(i, \"Data {0}\".format(i))\n    else:\n        self.${id}.set_line_label(i, labels[i])\n    self.${id}.set_color_map(i, colors[i])\n    self.${id}.set_line_alpha(i, alphas[i])\n\nself.${id}.set_intensity_range(${int_min}, ${int_max})\n\n${win} = sip.wrapinstance(self.${id}.pyqwidget(), Qt.QWidget)\n${gui_hint() % win}"}, "cpp_templates": {"includes": ["#include <gnuradio/qtgui/${type.fcn}.h>", "#include <gnuradio/filter/firdes.h>"], "declarations": "qtgui::${type.fcn}::sptr ${id};", "callbacks": ["set_frequency_range(${fc}, ${bw})", "set_update_time(${update_time})"], "link": ["gnuradio-qtgui", "Qt5::Widgets"], "make": "this->${id} = qtgui::${type.fcn}::make(\n    ${fftsize}, // size\n    ${wintype}, // wintype\n    ${fc}, // fc\n    ${bw}, // bw\n    ${name}, // name\n    ${ (0 if type.startswith('msg') else nconnections) } // number of inputs\n);\n\nstd::string labels[10] = {\"${label1.strip(\"'\")}\", \"${label2.strip(\"'\")}\", \"${label3.strip(\"'\")}\", \"${label4.strip(\"'\")}\", \"${label5.strip(\"'\")}\",\n    \"${label6.strip(\"'\")}\", \"${label7.strip(\"'\")}\", \"${label8.strip(\"'\")}\", \"${label9.strip(\"'\")}\", \"${label10.strip(\"'\")}\"};\nint colors[10] = {${color1 or 0}, ${color2 or 0}, ${color3 or 0}, ${color4 or 0}, ${color5 or 0},\n    ${color6 or 0}, ${color7 or 0}, ${color8 or 0}, ${color9 or 0}, ${color10 or 0}};\ndouble alphas[10] = {${alpha1 or 1.0}, ${alpha2 or 1.0}, ${alpha3 or 1.0}, ${alpha4 or 1.0}, ${alpha5 or 1.0},\n    ${alpha6 or 1.0}, ${alpha7 or 1.0}, ${alpha8 or 1.0}, ${alpha9 or 1.0}, ${alpha10 or 1.0}};\n\nQWidget* _${id}_win;\n\nthis->${id}->set_update_time(${update_time});\nthis->${id}->enable_grid(${grid});\nthis->${id}->enable_axis_labels(${axislabels});\n\nif (!${legend}) {\n    this->${id}->disable_legend(); // if (!legend)\n}\n\n/* C++ doesn't have this\nif (\"${type}\" == \"float\" or \"${type}\" == \"msg_float\") {\n    this->${id}->set_plot_pos_half(not ${freqhalf});\n}*/\n\nfor (int i = 0; i < ${ 1 if (type == 'msg_complex' or type == 'msg_float') else nconnections }; i++) {\n    if (sizeof(labels[i]) == 0) {\n        this->${id}->set_line_label(i, \"Data \" + std::to_string(i));\n    } else {\n        this->${id}->set_line_label(i, labels[i]);\n    }\n    this->${id}->set_color_map(i, colors[i]);\n    this->${id}->set_line_alpha(i, alphas[i]);\n}\n\nthis->${id}->set_intensity_range(${int_min}, ${int_max});\n\n_${id}_win = this->${id}->qwidget();\nthis->top_layout->addWidget(_${id}_win);", "translations": {"firdes.": "filter::firdes::", "True": "true", "False": "false"}}, "documentation": "The GUI hint can be used to position the widget within the application. The hint is of the form [tab_id@tab_index]: [row, col, row_span, col_span]. Both the tab specification and the grid position are optional.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/snippet.block.yml": {"id": "snippet", "label": "Python Snippet", "flags": ["python"], "parameters": [{"id": "section", "label": "Section of Flowgraph", "dtype": "string", "options": ["main_after_init", "main_after_start", "main_after_stop"], "option_labels": ["Main - After Init", "Main - After Start", "Main - After Stop"]}, {"id": "priority", "label": "Priority", "dtype": "int", "hide": "${'part' if priority <= 0 else 'none'}"}, {"id": "code", "label": "Code Snippet", "dtype": "_multiline"}], "templates": {"var_make": "${code}"}, "documentation": "CAUTION: This is an ADVANCED feature and can lead to unintended consequences in the rendering of a flowgraph.  Use at your own risk.\n\nInsert a snippet of Python code directly into the flowgraph at the end of the specified section. \\\nFor each snippet a function is generated with the block name of the snippet (use GRC Show Block IDs option to modify).  These functions are\\\nthen grouped into their respective sections in the rendered flowgraph.\n\nThe purpose of the python snippets is to be able to exercise features from within GRC that are not entirely supported by the block callbacks, \\ \nmethods and mechanisms to generate the code.  One example of this would be calling UHD timed commands before starting the flowgraph\n\nIndents will be handled upon insertion into the python flowgraph\n\nExample 1:\nepy_mod_0.some_function(self.some_block.some_property)\n\nWill place the function call in the generated .py file using the name of the appropriate embedded python block in the proper scope\nThe scope is relative to the blocks in the flowgraph, e.g. to reference a block, it should be identified as self.block\n\nExample 2:\nprint('The flowgraph has been stopped')\n\nWith section selected as 'Main - After Stop', will place the print statement after the flowgraph has been stopped.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/stream.domain.yml": {"id": "stream", "label": "Stream", "color": "#000000", "multiple_connections_per_input": false, "multiple_connections_per_output": true, "templates": [{"type": ["stream", "stream"], "connect": "self.connect(${ make_port_sig(source) }, ${ make_port_sig(sink) })", "cpp_connect": "hier_block2::connect(${ make_port_sig(source) }, ${ make_port_sig(sink) })"}]}, "/usr/local/share/gnuradio/grc/blocks/tpc_decoder_def_list.block.yml": {"id": "variable_tpc_decoder_def", "label": "TPC Decoder Definition", "flags": ["show_id"], "parameters": [{"id": "value", "label": "Ignore Me", "dtype": "raw", "default": "\"ok\"", "hide": "all"}, {"id": "ndim", "label": "Parallelism", "dtype": "enum", "default": "0", "options": ["0", "1", "2"]}, {"id": "dim1", "label": "Dimension 1", "dtype": "int", "default": "4", "hide": "${ ('none' if (int(ndim) >= 1) else 'all') }"}, {"id": "dim2", "label": "Dimension 2", "dtype": "int", "default": "4", "hide": "${ ('none' if (int(ndim) >= 2) else 'all') }"}, {"id": "row_poly", "label": "Row Encoder Polynomials", "dtype": "int_vector", "default": "[3]"}, {"id": "col_poly", "label": "Column Encoder Polynomials", "dtype": "int_vector", "default": "[43]"}, {"id": "krow", "label": "K Row", "dtype": "int", "default": "26"}, {"id": "kcol", "label": "K Col", "dtype": "int", "default": "6"}, {"id": "bval", "label": "B", "dtype": "int", "default": "9"}, {"id": "qval", "label": "Q", "dtype": "int", "default": "3"}, {"id": "max_iter", "label": "NUM Turbo Iterations", "dtype": "int", "default": "6"}, {"id": "decoder_type", "label": "Decoder Type", "dtype": "enum", "options": ["0", "1", "2", "3", "4"], "option_labels": ["Linear LOG-MAP", "MAX LOG-MAP", "Constant LOG-MAP", "LOG-MAP (LUT Correction Factor)", "LOG-MAP (C Correction Factor)"]}], "value": "${ value }", "templates": {"imports": "from gnuradio import fec", "var_make": "% if int(ndim)==0:\nself.${id} = ${id} = fec.tpc_decoder_make(${row_poly}, ${col_poly}, ${krow}, ${kcol}, ${bval}, ${qval}, ${max_iter}, ${decoder_type})\n% elif int(ndim)==1:\nself.${id} = ${id} = list(map( (lambda a: fec.tpc_decoder_make(${row_poly}, ${col_poly}, ${krow}, ${kcol}, ${bval}, ${qval}, \\\n${max_iter}, ${decoder_type})), range(0,${dim1}) ))\n% else:\nself.${id} = ${id} = list(map( (lambda b: list(map( ( lambda a: fec.tpc_decoder_make(${row_poly}, ${col_poly}, ${krow}, ${kcol}, \\\n${bval}, ${qval}, ${max_iter}, ${decoder_type})), range(0,${dim2})))), range(0,${dim1})))\n% endif"}, "documentation": "This instantiates a 1-dim array or 2-dim array fo Turbo Product Encoders (TPC).\n        Restrictions: B and Q must be carefully chosen such that when the matrices are setup,\n        and the first B outputs are removed, they (the first B outputs) are all 0's.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/tpc_encoder_def_list.block.yml": {"id": "variable_tpc_encoder_def", "label": "TPC Encoder Definition", "flags": ["show_id"], "parameters": [{"id": "value", "label": "Ignore Me", "dtype": "raw", "default": "\"ok\"", "hide": "all"}, {"id": "ndim", "label": "Parallelism", "dtype": "enum", "default": "0", "options": ["0", "1", "2"]}, {"id": "dim1", "label": "Dimension 1", "dtype": "int", "default": "4", "hide": "${ ('none' if (int(ndim) >= 1) else 'all') }"}, {"id": "dim2", "label": "Dimension 2", "dtype": "int", "default": "4", "hide": "${ ('none' if (int(ndim) >= 2) else 'all') }"}, {"id": "row_poly", "label": "Row Encoder Polynomials", "dtype": "int_vector", "default": "[3]"}, {"id": "col_poly", "label": "Column Encoder Polynomials", "dtype": "int_vector", "default": "[43]"}, {"id": "krow", "label": "K Row", "dtype": "int", "default": "26"}, {"id": "kcol", "label": "K Col", "dtype": "int", "default": "6"}, {"id": "bval", "label": "B", "dtype": "int", "default": "9"}, {"id": "qval", "label": "Q", "dtype": "int", "default": "3"}], "value": "${ value }", "templates": {"imports": "from gnuradio import fec", "var_make": "% if int(ndim)==0:\nself.${id} = ${id} = fec.tpc_encoder_make(${row_poly}, ${col_poly}, ${krow}, ${kcol}, ${bval}, ${qval})\n% elif int(ndim)==1:\nself.${id} = ${id} = list(map( (lambda a: fec.tpc_encoder_make(${row_poly}, ${col_poly}, ${krow}, ${kcol}, ${bval}, ${qval})), range(0,${dim1}) ))\n% else:\nself.${id} = ${id} = list(map( (lambda b: list(map( ( lambda a: fec.tpc_encoder_make(${row_poly}, ${col_poly}, ${krow}, ${kcol}, ${bval}, ${qval})), range(0,${dim2}) ) ) ), range(0,${dim1})))\n% endif"}, "documentation": "This instantiates a 1-dim array or 2-dim array fo Turbo Product Encoders (TPC).\n        Restrictions: B and Q must be carefully chosen such that when the matrices are setup,\n        and the first B outputs are removed, they (the first B outputs) are all 0's.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/trellis_encoder_xx.block.yml": {"id": "trellis_encoder_xx", "label": "Trellis Encoder", "category": "[Core]/Trellis Coding", "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["bb", "bs", "bi", "ss", "si", "ii"], "option_labels": ["Byte->Byte", "Byte->Short", "Byte->Int", "Short->Short", "Short->Int", "Int->Int"], "option_attributes": {"input": ["byte", "byte", "byte", "short", "short", "int"], "output": ["byte", "short", "int", "short", "int", "int"]}, "hide": "part"}, {"id": "fsm_args", "label": "FSM Args", "dtype": "raw"}, {"id": "init_state", "label": "Initial State", "dtype": "int", "default": "0"}, {"id": "blockwise", "label": "Blockwise", "dtype": "enum", "default": "False", "options": ["True", "False"], "option_labels": ["On", "Off"], "hide": "part"}, {"id": "blocklength", "label": "Block length", "dtype": "int", "default": "0", "hide": "${ ('none' if blockwise == 'True' else 'all') }"}], "inputs": [{"domain": "stream", "dtype": "${ type.input }"}], "outputs": [{"domain": "stream", "dtype": "${ type.output }"}], "asserts": ["${ (isinstance(eval(\"\"\" fsm_args \"\"\"[1:-1], locals(),globals()), str) and open(fsm_args).close()) or True }"], "templates": {"imports": "from gnuradio import trellis", "make": " trellis.encoder_${type}(trellis.fsm(${fsm_args}), ${init_state}, ${blocklength}) if ${blockwise} else trellis.encoder_${type}(trellis.fsm(${fsm_args}), ${init_state}) ", "callbacks": ["set_FSM(trellis.fsm(${fsm_args}))", "set_ST(${init_state})", "set_K(${blocklength})"]}, "documentation": "The fsm arguments are passed directly to the trellis.fsm() constructor.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/trellis_metrics_x.block.yml": {"id": "trellis_metrics_x", "label": "Trellis Metrics", "category": "[Core]/Trellis Coding", "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["c", "f", "i", "s"], "option_labels": ["Complex", "Float", "Int", "Short"], "option_attributes": {"io": ["complex", "float", "int", "short"], "table": ["complex_vector", "real_vector", "int_vector", "int_vector"]}, "hide": "part"}, {"id": "card", "label": "Output Cardinality", "dtype": "int"}, {"id": "dim", "label": "Dimensionality", "dtype": "int"}, {"id": "table", "label": "Constellation", "dtype": "${ type.table }"}, {"id": "metric_type", "label": "Metric Type", "dtype": "enum", "options": ["digital.TRELLIS_EUCLIDEAN", "digital.TRELLIS_HARD_SYMBOL", "digital.TRELLIS_HARD_BIT"], "option_labels": ["Euclidean", "Hard Symbol", "Hard Bit"]}], "inputs": [{"domain": "stream", "dtype": "${ type.io }"}], "outputs": [{"domain": "stream", "dtype": "float"}], "templates": {"imports": "from gnuradio import trellis, digital", "make": "trellis.metrics_${type}(${card}, ${dim}, ${table}, ${metric_type})", "callbacks": ["set_O(${card})", "set_D(${dim})", "set_TYPE(${metric_type})", "set_TABLE(${table})"]}, "documentation": "Generate metrics required for Viterbi or SISO algorithms.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/trellis_pccc_decoder_combined_xx.block.yml": {"id": "trellis_pccc_decoder_combined_xx", "label": "PCCC Decoder Combo", "category": "[Core]/Trellis Coding", "parameters": [{"id": "type", "label": "Input Type", "dtype": "enum", "options": ["c", "f"], "option_labels": ["Complex", "Float"], "option_attributes": {"io": ["complex", "float"], "table": ["complex_vector", "real_vector"]}, "hide": "part"}, {"id": "out_type", "label": "Output Type", "dtype": "enum", "options": ["i", "s", "b"], "option_labels": ["Int", "Short", "Byte"], "option_attributes": {"io": ["int", "short", "byte"]}, "hide": "part"}, {"id": "o_fsm_args", "label": "FSM 1", "dtype": "raw"}, {"id": "o_init_state", "label": "Initial State 1", "dtype": "int", "default": "0"}, {"id": "o_final_state", "label": "Final State 1", "dtype": "int", "default": "-1"}, {"id": "i_fsm_args", "label": "FSM 2", "dtype": "raw"}, {"id": "i_init_state", "label": "Initial State 2", "dtype": "int", "default": "0"}, {"id": "i_final_state", "label": "Final State 2", "dtype": "int", "default": "-1"}, {"id": "interleaver", "label": "Interleaver", "dtype": "raw"}, {"id": "block_size", "label": "Block Size", "dtype": "int"}, {"id": "iterations", "label": "Iterations", "dtype": "int", "default": "10"}, {"id": "dim", "label": "Dimensionality", "dtype": "int"}, {"id": "table", "label": "Constellation", "dtype": "${ type.table }"}, {"id": "metric_type", "label": "Metric Type", "dtype": "enum", "options": ["digital.TRELLIS_EUCLIDEAN", "digital.TRELLIS_HARD_SYMBOL", "digital.TRELLIS_HARD_BIT"], "option_labels": ["Euclidean", "Hard Symbol", "Hard Bit"]}, {"id": "siso_type", "label": "SISO Type", "dtype": "enum", "options": ["trellis.TRELLIS_MIN_SUM", "trellis.TRELLIS_SUM_PRODUCT"], "option_labels": ["Min Sum", "Sum Product"]}, {"id": "scaling", "label": "Scaling", "dtype": "real", "default": "1.0"}], "inputs": [{"domain": "stream", "dtype": "${ type.io }"}], "outputs": [{"domain": "stream", "dtype": "${ out_type.io }"}], "asserts": ["${ (isinstance(eval(\"\"\" o_fsm_args \"\"\"[1:-1], locals(),globals()), str) and open(o_fsm_args).close()) or True }", "${ (isinstance(eval(\"\"\" i_fsm_args \"\"\"[1:-1], locals(),globals()), str) and open(i_fsm_args).close()) or True }"], "templates": {"imports": "from gnuradio import trellis, digital", "make": "trellis.pccc_decoder_combined_${type}${out_type}(\n    trellis.fsm(${o_fsm_args}), ${o_init_state}, ${o_final_state},\n    trellis.fsm(${i_fsm_args}), ${i_init_state}, ${i_final_state},\n    trellis.interleaver(${interleaver}),\n    ${block_size},\n    ${iterations},\n    ${siso_type},\n    ${dim}, ${table}, ${metric_type},\n    ${scaling})\n  ", "callbacks": ["set_scaling(${scaling})"]}, "documentation": "PCCC turbo Decoder combined with metric calculation.\nThe fsm arguments are passed directly to the trellis.fsm() constructor.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/trellis_pccc_decoder_x.block.yml": {"id": "trellis_pccc_decoder_x", "label": "PCCC Decoder", "category": "[Core]/Trellis Coding", "parameters": [{"id": "out_type", "label": "Output Type", "dtype": "enum", "options": ["i", "s", "b"], "option_labels": ["Int", "Short", "Byte"], "option_attributes": {"io": ["int", "short", "byte"]}, "hide": "part"}, {"id": "o_fsm_args", "label": "FSM 1", "dtype": "raw"}, {"id": "o_init_state", "label": "Initial State 1", "dtype": "int", "default": "0"}, {"id": "o_final_state", "label": "Final State 1", "dtype": "int", "default": "-1"}, {"id": "i_fsm_args", "label": "FSM 2", "dtype": "raw"}, {"id": "i_init_state", "label": "Initial State 2", "dtype": "int", "default": "0"}, {"id": "i_final_state", "label": "Final State 2", "dtype": "int", "default": "-1"}, {"id": "interleaver", "label": "Interleaver", "dtype": "raw"}, {"id": "block_size", "label": "Block Size", "dtype": "int"}, {"id": "iterations", "label": "Iterations", "dtype": "int", "default": "10"}, {"id": "siso_type", "label": "SISO Type", "dtype": "enum", "options": ["trellis.TRELLIS_MIN_SUM", "trellis.TRELLIS_SUM_PRODUCT"], "option_labels": ["Min Sum", "Sum Product"]}], "inputs": [{"domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "${ out_type.io }"}], "asserts": ["${ (isinstance(eval(\"\"\" o_fsm_args \"\"\"[1:-1], locals(),globals()), str) and open(o_fsm_args).close()) or True }", "${ (isinstance(eval(\"\"\" i_fsm_args \"\"\"[1:-1], locals(),globals()), str) and open(i_fsm_args).close()) or True }"], "templates": {"imports": "from gnuradio import trellis", "make": "trellis.pccc_decoder_${out_type}(\n    trellis.fsm(${o_fsm_args}), ${o_init_state}, ${o_final_state},\n    trellis.fsm(${i_fsm_args}), ${i_init_state}, ${i_final_state},\n    trellis.interleaver(${interleaver}),\n    ${block_size},\n    ${iterations},\n                ${siso_type})\n  "}, "documentation": "PCCC turbo Decoder.\nThe fsm and interleaver arguments are passed directly to the trellis.fsm() and trellis.interleaver() constructors.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/trellis_pccc_encoder_xx.block.yml": {"id": "trellis_pccc_encoder_xx", "label": "PCCC Encoder", "category": "[Core]/Trellis Coding", "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["bb", "bs", "bi", "ss", "si", "ii"], "option_labels": ["Byte->Byte", "Byte->Short", "Byte->Int", "Short->Short", "Short->Int", "Int->Int"], "option_attributes": {"input": ["byte", "byte", "byte", "short", "short", "int"], "output": ["byte", "short", "int", "short", "int", "int"]}, "hide": "part"}, {"id": "o_fsm_args", "label": "FSM 1", "dtype": "raw"}, {"id": "o_init_state", "label": "Initial State 1", "dtype": "int", "default": "0"}, {"id": "i_fsm_args", "label": "FSM 2", "dtype": "raw"}, {"id": "i_init_state", "label": "Initial State 2", "dtype": "int", "default": "0"}, {"id": "interleaver_args", "label": "Interleaver", "dtype": "raw"}, {"id": "bl", "label": "Blocklength", "dtype": "int"}], "inputs": [{"domain": "stream", "dtype": "${ type.input }"}], "outputs": [{"domain": "stream", "dtype": "${ type.output }"}], "asserts": ["${ (isinstance(eval(\"\"\" o_fsm_args \"\"\"[1:-1], locals(),globals()), str) and open(o_fsm_args).close()) or True }", "${ (isinstance(eval(\"\"\" i_fsm_args \"\"\"[1:-1], locals(),globals()), str) and open(i_fsm_args).close()) or True }"], "templates": {"imports": "from gnuradio import trellis", "make": "trellis.pccc_encoder_${type}(trellis.fsm(${o_fsm_args}), ${o_init_state}, trellis.fsm(${i_fsm_args}), ${i_init_state}, trellis.interleaver(${interleaver_args}), ${bl})"}, "documentation": "The fsm and interleaver arguments are passed directly to the trellis.fsm() and trellis.interleaver() constructors.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/trellis_permutation.block.yml": {"id": "trellis_permutation", "label": "Trellis Permutation", "category": "[Core]/Trellis Coding", "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"size": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "interleaver_size", "label": "Interleaver Size", "dtype": "int"}, {"id": "table", "label": "Table", "dtype": "int_vector"}, {"id": "syms_per_block", "label": "Symbols per Block", "dtype": "int"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "asserts": ["${ vlen > 0 }"], "templates": {"imports": "from gnuradio import trellis", "make": "trellis.permutation(${interleaver_size}, ${table}, ${syms_per_block}, ${type.size}*${vlen})", "callbacks": ["set_K(${interleaver_size})", "set_TABLE(${table})", "set_SYMS_PER_BLOCK(${syms_per_block})"]}, "documentation": "Interleaver size is given in blocks.\nOne Symbol = (in/out type) * (vector length)", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/trellis_sccc_decoder_combined_xx.block.yml": {"id": "trellis_sccc_decoder_combined_xx", "label": "SCCC Decoder Combo", "category": "[Core]/Trellis Coding", "parameters": [{"id": "type", "label": "Input Type", "dtype": "enum", "options": ["c", "f"], "option_labels": ["Complex", "Float"], "option_attributes": {"io": ["complex", "float"], "table": ["complex_vector", "real_vector"]}, "hide": "part"}, {"id": "out_type", "label": "Output Type", "dtype": "enum", "options": ["i", "s", "b"], "option_labels": ["Int", "Short", "Byte"], "option_attributes": {"io": ["int", "short", "byte"]}, "hide": "part"}, {"id": "o_fsm_args", "label": "Outer FSM", "dtype": "raw"}, {"id": "o_init_state", "label": "Outer Initial State", "dtype": "int", "default": "0"}, {"id": "o_final_state", "label": "Outer Final State", "dtype": "int", "default": "-1"}, {"id": "i_fsm_args", "label": "Inner FSM", "dtype": "raw"}, {"id": "i_init_state", "label": "Inner Initial State", "dtype": "int", "default": "0"}, {"id": "i_final_state", "label": "Inner Final State", "dtype": "int", "default": "-1"}, {"id": "interleaver", "label": "Interleaver", "dtype": "raw"}, {"id": "block_size", "label": "Block Size", "dtype": "int"}, {"id": "iterations", "label": "Iterations", "dtype": "int", "default": "10"}, {"id": "dim", "label": "Dimensionality", "dtype": "int"}, {"id": "table", "label": "Constellation", "dtype": "${ type.table }"}, {"id": "metric_type", "label": "Metric Type", "dtype": "enum", "options": ["digital.TRELLIS_EUCLIDEAN", "digital.TRELLIS_HARD_SYMBOL", "digital.TRELLIS_HARD_BIT"], "option_labels": ["Euclidean", "Hard Symbol", "Hard Bit"]}, {"id": "siso_type", "label": "SISO Type", "dtype": "enum", "options": ["trellis.TRELLIS_MIN_SUM", "trellis.TRELLIS_SUM_PRODUCT"], "option_labels": ["Min Sum", "Sum Product"]}, {"id": "scaling", "label": "Scaling", "dtype": "real", "default": "1.0"}], "inputs": [{"domain": "stream", "dtype": "${ type.io }"}], "outputs": [{"domain": "stream", "dtype": "${ out_type.io }"}], "asserts": ["${ (isinstance(eval(\"\"\" o_fsm_args \"\"\"[1:-1], locals(),globals()), str) and open(o_fsm_args).close()) or True }", "${ (isinstance(eval(\"\"\" i_fsm_args \"\"\"[1:-1], locals(),globals()), str) and open(i_fsm_args).close()) or True }"], "templates": {"imports": "from gnuradio import trellis, digital", "make": "trellis.sccc_decoder_combined_${type}${out_type}(\n    trellis.fsm(${o_fsm_args}), ${o_init_state}, ${o_final_state},\n    trellis.fsm(${i_fsm_args}), ${i_init_state}, ${i_final_state},\n    trellis.interleaver(${interleaver}),\n    ${block_size},\n    ${iterations},\n                ${siso_type},\n    ${dim}, ${table}, ${metric_type},\n    ${scaling})\n  ", "callbacks": ["set_scaling(${scaling})"]}, "documentation": "SCCC turbo Decoder combined with metric calculation.\nThe fsm arguments are passed directly to the trellis.fsm() constructor.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/trellis_sccc_decoder_x.block.yml": {"id": "trellis_sccc_decoder_x", "label": "SCCC Decoder", "category": "[Core]/Trellis Coding", "parameters": [{"id": "out_type", "label": "Output Type", "dtype": "enum", "options": ["i", "s", "b"], "option_labels": ["Int", "Short", "Byte"], "option_attributes": {"io": ["int", "short", "byte"]}, "hide": "part"}, {"id": "o_fsm_args", "label": "Outer FSM", "dtype": "raw"}, {"id": "o_init_state", "label": "Outer Initial State", "dtype": "int", "default": "0"}, {"id": "o_final_state", "label": "Outer Final State", "dtype": "int", "default": "-1"}, {"id": "i_fsm_args", "label": "Inner FSM", "dtype": "raw"}, {"id": "i_init_state", "label": "Inner Initial State", "dtype": "int", "default": "0"}, {"id": "i_final_state", "label": "Inner Final State", "dtype": "int", "default": "-1"}, {"id": "interleaver", "label": "Interleaver", "dtype": "raw"}, {"id": "block_size", "label": "Block Size", "dtype": "int"}, {"id": "iterations", "label": "Iterations", "dtype": "int", "default": "10"}, {"id": "siso_type", "label": "SISO Type", "dtype": "enum", "options": ["trellis.TRELLIS_MIN_SUM", "trellis.TRELLIS_SUM_PRODUCT"], "option_labels": ["Min Sum", "Sum Product"]}], "inputs": [{"domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "${ out_type.io }"}], "asserts": ["${ (isinstance(eval(\"\"\" o_fsm_args \"\"\"[1:-1], locals(),globals()), str) and open(o_fsm_args).close()) or True }", "${ (isinstance(eval(\"\"\" i_fsm_args \"\"\"[1:-1], locals(),globals()), str) and open(i_fsm_args).close()) or True }"], "templates": {"imports": "from gnuradio import trellis", "make": "trellis.sccc_decoder_${out_type}(\n    trellis.fsm(${o_fsm_args}), ${o_init_state}, ${o_final_state},\n    trellis.fsm(${i_fsm_args}), ${i_init_state}, ${i_final_state},\n    trellis.interleaver(${interleaver}),\n    ${block_size},\n    ${iterations},\n                ${siso_type})\n  "}, "documentation": "SCCC turbo Decoder.\nThe fsm and interleaver arguments are passed directly to the trellis.fsm() and trellis.interleaver() constructors.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/trellis_sccc_encoder_xx.block.yml": {"id": "trellis_sccc_encoder_xx", "label": "SCCC Encoder", "category": "[Core]/Trellis Coding", "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["bb", "bs", "bi", "ss", "si", "ii"], "option_labels": ["Byte->Byte", "Byte->Short", "Byte->Int", "Short->Short", "Short->Int", "Int->Int"], "option_attributes": {"input": ["byte", "byte", "byte", "short", "short", "int"], "output": ["byte", "short", "int", "short", "int", "int"]}, "hide": "part"}, {"id": "o_fsm_args", "label": "Outer FSM", "dtype": "raw"}, {"id": "o_init_state", "label": "Outer Initial State", "dtype": "int", "default": "0"}, {"id": "i_fsm_args", "label": "Inner FSM", "dtype": "raw"}, {"id": "i_init_state", "label": "Inner Initial State", "dtype": "int", "default": "0"}, {"id": "interleaver_args", "label": "Interleaver", "dtype": "raw"}, {"id": "bl", "label": "Blocklength", "dtype": "int"}], "inputs": [{"domain": "stream", "dtype": "${ type.input }"}], "outputs": [{"domain": "stream", "dtype": "${ type.output }"}], "asserts": ["${ (isinstance(eval(\"\"\" o_fsm_args \"\"\"[1:-1], locals(),globals()), str) and open(o_fsm_args).close()) or True }", "${ (isinstance(eval(\"\"\" i_fsm_args \"\"\"[1:-1], locals(),globals()), str) and open(i_fsm_args).close()) or True }"], "templates": {"imports": "from gnuradio import trellis", "make": "trellis.sccc_encoder_${type}(trellis.fsm(${o_fsm_args}), ${o_init_state}, trellis.fsm(${i_fsm_args}), ${i_init_state}, trellis.interleaver(${interleaver_args}), ${bl})"}, "documentation": "The fsm and interleaver arguments are passed directly to the trellis.fsm() and trellis.interleaver() constructors.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/trellis_siso_combined_f.block.yml": {"id": "trellis_siso_combined_f", "label": "SISO Combo", "category": "[Core]/Trellis Coding", "parameters": [{"id": "fsm_args", "label": "FSM Args", "dtype": "raw"}, {"id": "block_size", "label": "Block Size", "dtype": "int"}, {"id": "init_state", "label": "Initial State", "dtype": "int", "default": "0"}, {"id": "final_state", "label": "Final State", "dtype": "int", "default": "-1"}, {"id": "a_post_in", "label": "A-posteriori In", "dtype": "enum", "options": ["True", "False"], "option_labels": ["Yes", "No"]}, {"id": "a_post_out", "label": "A-posteriori Out", "dtype": "enum", "options": ["True", "False"], "option_labels": ["Yes", "No"]}, {"id": "siso_type", "label": "SISO Type", "dtype": "enum", "options": ["trellis.TRELLIS_MIN_SUM", "trellis.TRELLIS_SUM_PRODUCT"], "option_labels": ["Min Sum", "Sum Product"]}, {"id": "dim", "label": "Dimensionality", "dtype": "int"}, {"id": "table", "label": "Constellation", "dtype": "real_vector"}, {"id": "metric_type", "label": "Metric Type", "dtype": "enum", "options": ["trellis.TRELLIS_EUCLIDEAN", "trellis.TRELLIS_HARD_SYMBOL", "trellis.TRELLIS_HARD_BIT"], "option_labels": ["Euclidean", "Hard Symbol", "Hard Bit"]}], "inputs": [{"label": "in_i", "domain": "stream", "dtype": "float"}, {"label": "in_o", "domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "float"}], "templates": {"imports": "from gnuradio import trellis", "make": "trellis.siso_combined_f(trellis.fsm(${fsm_args}), ${block_size}, ${init_state}, ${final_state}, ${a_post_in}, ${a_post_out}, ${siso_type}, ${dim}, ${table}, ${metric_type})", "callbacks": ["set_FSM(trellis.fsm(${fsm_args}))", "set_K(${block_size})", "set_S0(${init_state})", "set_SK(${final_state})", "set_POSTI(${a_post_in})", "set_POSTO(${a_post_out})", "set_SISO_TYPE(${siso_type})", "set_D(${dim})", "set_TABLE(${table})", "set_TYPE(${metric_type})"]}, "documentation": "BCJR Algorithm combined with metric calculation. The fsm arguments are passed directly to the trellis.fsm() constructor.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/trellis_siso_f.block.yml": {"id": "trellis_siso_f", "label": "SISO", "category": "[Core]/Trellis Coding", "parameters": [{"id": "fsm_args", "label": "FSM Args", "dtype": "raw"}, {"id": "block_size", "label": "Block Size", "dtype": "int"}, {"id": "init_state", "label": "Initial State", "dtype": "int", "default": "0"}, {"id": "final_state", "label": "Final State", "dtype": "int", "default": "-1"}, {"id": "a_post_in", "label": "A-posteriori In", "dtype": "enum", "options": ["True", "False"], "option_labels": ["Yes", "No"]}, {"id": "a_post_out", "label": "A-posteriori Out", "dtype": "enum", "options": ["True", "False"], "option_labels": ["Yes", "No"]}, {"id": "siso_type", "label": "SISO Type", "dtype": "enum", "options": ["trellis.TRELLIS_MIN_SUM", "trellis.TRELLIS_SUM_PRODUCT"], "option_labels": ["Min Sum", "Sum Product"]}], "inputs": [{"label": "priori", "domain": "stream", "dtype": "float"}, {"label": "prioro", "domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "float"}], "asserts": ["${ (isinstance(eval(\"\"\" fsm_args \"\"\"[1:-1], locals(),globals()), str) and open(fsm_args).close()) or True }"], "templates": {"imports": "from gnuradio import trellis", "make": "trellis.siso_f(trellis.fsm(${fsm_args}), ${block_size}, ${init_state}, ${final_state}, ${a_post_in}, ${a_post_out}, ${siso_type})", "callbacks": ["set_FSM(trellis.fsm(${fsm_args}))", "set_K(${block_size})", "set_S0(${init_state})", "set_SK(${final_state})", "set_POSTI(${a_post_in})", "set_POSTO(${a_post_out})", "set_SISO_TYPE(${siso_type})"]}, "documentation": "BCJR Algorithm. The fsm arguments are passed directly to the trellis.fsm() constructor.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/trellis_viterbi_combined_xx.block.yml": {"id": "trellis_viterbi_combined_xx", "label": "Viterbi Combo", "category": "[Core]/Trellis Coding", "parameters": [{"id": "type", "label": "Input Type", "dtype": "enum", "options": ["c", "f", "i", "s"], "option_labels": ["Complex", "Float", "Int", "Short"], "option_attributes": {"io": ["complex", "float", "int", "short"], "table": ["complex_vector", "real_vector", "int_vector", "int_vector"]}, "hide": "part"}, {"id": "out_type", "label": "Output Type", "dtype": "enum", "options": ["i", "s", "b"], "option_labels": ["Int", "Short", "Byte"], "option_attributes": {"io": ["int", "short", "byte"]}, "hide": "part"}, {"id": "fsm_args", "label": "FSM Args", "dtype": "raw"}, {"id": "block_size", "label": "Block Size", "dtype": "int"}, {"id": "init_state", "label": "Initial State", "dtype": "int", "default": "0"}, {"id": "final_state", "label": "Final State", "dtype": "int", "default": "-1"}, {"id": "dim", "label": "Dimensionality", "dtype": "int"}, {"id": "table", "label": "Constellation", "dtype": "${ type.table }"}, {"id": "metric_type", "label": "Metric Type", "dtype": "enum", "options": ["digital.TRELLIS_EUCLIDEAN", "digital.TRELLIS_HARD_SYMBOL", "digital.TRELLIS_HARD_BIT"], "option_labels": ["Euclidean", "Hard Symbol", "Hard Bit"]}], "inputs": [{"domain": "stream", "dtype": "${ type.io }"}], "outputs": [{"domain": "stream", "dtype": "${ out_type.io }"}], "asserts": ["${ (isinstance(eval(\"\"\" fsm_args \"\"\"[1:-1], locals(),globals()), str) and open(fsm_args).close()) or True }"], "templates": {"imports": "from gnuradio import trellis, digital", "make": "trellis.viterbi_combined_${type}${out_type}(trellis.fsm(${fsm_args}), ${block_size}, ${init_state}, ${final_state}, ${dim}, ${table}, ${metric_type})", "callbacks": ["set_FSM(trellis.fsm(${fsm_args}))", "set_K(${block_size})", "set_S0(${init_state})", "set_SK(${final_state})", "set_D(${dim})", "set_TABLE(${table})", "set_TYPE(${metric_type})"]}, "documentation": "Viterbi Decoder combined with metric calculation. The fsm arguments are passed directly to the trellis.fsm() constructor.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/trellis_viterbi_x.block.yml": {"id": "trellis_viterbi_x", "label": "Viterbi", "category": "[Core]/Trellis Coding", "parameters": [{"id": "type", "label": "Type", "dtype": "enum", "options": ["i", "s", "b"], "option_labels": ["Int", "Short", "Byte"], "option_attributes": {"io": ["int", "short", "byte"]}, "hide": "part"}, {"id": "fsm_args", "label": "FSM Args", "dtype": "raw"}, {"id": "block_size", "label": "Block Size", "dtype": "int"}, {"id": "init_state", "label": "Initial State", "dtype": "int", "default": "0"}, {"id": "final_state", "label": "Final State", "dtype": "int", "default": "-1"}], "inputs": [{"domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "${ type.io }"}], "asserts": ["${ (isinstance(eval(\"\"\" fsm_args \"\"\"[1:-1], locals(),globals()), str) and open(fsm_args).close()) or True }"], "templates": {"imports": "from gnuradio import trellis", "make": "trellis.viterbi_${type}(trellis.fsm(${fsm_args}), ${block_size}, ${init_state}, ${final_state})", "callbacks": ["set_FSM(trellis.fsm(${fsm_args}))", "set_K(${block_size})", "set_S0(${init_state})", "set_SK(${final_state})"]}, "documentation": "Viterbi Decoder. The fsm arguments are passed directly to the trellis.fsm() constructor.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/uhd.tree.yml": {"[Core]": [{"UHD": ["uhd_usrp_source", "uhd_usrp_sink", "uhd_amsg_source"]}]}, "/usr/local/share/gnuradio/grc/blocks/uhd_amsg_source.block.yml": {"id": "uhd_amsg_source", "label": "UHD: USRP Async Msg Source", "parameters": [{"id": "dev_addr", "label": "Device Addr", "dtype": "string", "hide": "${ 'none' if dev_addr else 'part' }"}], "outputs": [{"domain": "stream", "dtype": "msg"}], "templates": {"imports": "from gnuradio import uhd", "make": "uhd.amsg_source(device_addr=${dev_addr}, msgq=${id}_msgq_out)"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/uhd_usrp_sink.block.yml": {"id": "uhd_usrp_sink", "label": "UHD: USRP Sink", "flags": "throttle", "parameters": [{"id": "type", "label": "Input Type", "dtype": "enum", "options": ["fc32", "sc16", "item32"], "option_labels": ["Complex float32", "Complex int16", "VITA word32"], "option_attributes": {"type": ["fc32", "sc16", "s32"]}, "hide": "part"}, {"id": "otw", "label": "Wire Format", "dtype": "enum", "options": ["", "sc16", "sc12", "sc8"], "option_labels": ["Automatic", "Complex int16", "Complex int12", "Complex int8"], "hide": "${ 'none' if otw else 'part'}"}, {"id": "stream_args", "label": "Stream args", "dtype": "string", "options": ["", "peak=0.003906"], "option_labels": ["", "peak=0.003906"], "hide": "${ 'none' if stream_args else 'part'}"}, {"id": "stream_chans", "label": "Stream channels", "dtype": "int_vector", "default": "[]", "hide": "${ 'none' if stream_chans else 'part'}"}, {"id": "dev_addr", "label": "Device Address", "dtype": "string", "default": "\"\"", "hide": "${ 'none' if dev_addr else 'part'}"}, {"id": "dev_args", "label": "Device Arguments", "dtype": "string", "default": "\"\"", "hide": "${ 'none' if dev_args else 'part'}"}, {"id": "sync", "label": "Sync", "dtype": "enum", "options": ["sync", "pc_clock", "none"], "option_labels": ["Unknown PPS", "PC Clock", "No Sync"], "hide": "${ 'none' if sync else 'part'}"}, {"id": "clock_rate", "label": "Clock Rate (Hz)", "dtype": "real", "default": "0e0", "options": ["0e0", "200e6", "184.32e6", "120e6", "30.72e6"], "option_labels": ["Default", "200 MHz", "184.32 MHz", "120 MHz", "30.72 MHz"], "hide": "${ 'none' if clock_rate else 'part' }"}, {"id": "num_mboards", "label": "Num Mboards", "dtype": "int", "default": 1, "options": [1, 2, 3, 4, 5, 6, 7, 8], "hide": "part"}, {"id": "clock_source0", "label": "Mb0: Clock Source", "dtype": "string", "options": ["", "internal", "external", "mimo", "gpsdo"], "option_labels": ["Default", "Internal", "External", "MIMO Cable", "O/B GPSDO"], "hide": "${ 'all' if not (num_mboards > 0) else ( 'none' if clock_source0 else 'part')}"}, {"id": "time_source0", "label": "Mb0: Time Source", "dtype": "string", "options": ["", "external", "mimo", "gpsdo"], "option_labels": ["Default", "External", "MIMO Cable", "O/B GPSDO"], "hide": "${ 'all' if not (num_mboards > 0) else ('none' if time_source0 else 'part')}"}, {"id": "sd_spec0", "label": "Mb0: Subdev Spec", "dtype": "string", "hide": "${ 'all' if not (num_mboards > 0) else ('none' if sd_spec0 else 'part')}"}, {"id": "clock_source1", "label": "Mb1: Clock Source", "dtype": "string", "options": ["", "internal", "external", "mimo", "gpsdo"], "option_labels": ["Default", "Internal", "External", "MIMO Cable", "O/B GPSDO"], "hide": "${ 'all' if not (num_mboards > 1) else ( 'none' if clock_source1 else 'part')}"}, {"id": "time_source1", "label": "Mb1: Time Source", "dtype": "string", "options": ["", "external", "mimo", "gpsdo"], "option_labels": ["Default", "External", "MIMO Cable", "O/B GPSDO"], "hide": "${ 'all' if not (num_mboards > 1) else ('none' if time_source1 else 'part')}"}, {"id": "sd_spec1", "label": "Mb1: Subdev Spec", "dtype": "string", "hide": "${ 'all' if not (num_mboards > 1) else ('none' if sd_spec1 else 'part')}"}, {"id": "clock_source2", "label": "Mb2: Clock Source", "dtype": "string", "options": ["", "internal", "external", "mimo", "gpsdo"], "option_labels": ["Default", "Internal", "External", "MIMO Cable", "O/B GPSDO"], "hide": "${ 'all' if not (num_mboards > 2) else ( 'none' if clock_source2 else 'part')}"}, {"id": "time_source2", "label": "Mb2: Time Source", "dtype": "string", "options": ["", "external", "mimo", "gpsdo"], "option_labels": ["Default", "External", "MIMO Cable", "O/B GPSDO"], "hide": "${ 'all' if not (num_mboards > 2) else ('none' if time_source2 else 'part')}"}, {"id": "sd_spec2", "label": "Mb2: Subdev Spec", "dtype": "string", "hide": "${ 'all' if not (num_mboards > 2) else ('none' if sd_spec2 else 'part')}"}, {"id": "clock_source3", "label": "Mb3: Clock Source", "dtype": "string", "options": ["", "internal", "external", "mimo", "gpsdo"], "option_labels": ["Default", "Internal", "External", "MIMO Cable", "O/B GPSDO"], "hide": "${ 'all' if not (num_mboards > 3) else ( 'none' if clock_source3 else 'part')}"}, {"id": "time_source3", "label": "Mb3: Time Source", "dtype": "string", "options": ["", "external", "mimo", "gpsdo"], "option_labels": ["Default", "External", "MIMO Cable", "O/B GPSDO"], "hide": "${ 'all' if not (num_mboards > 3) else ('none' if time_source3 else 'part')}"}, {"id": "sd_spec3", "label": "Mb3: Subdev Spec", "dtype": "string", "hide": "${ 'all' if not (num_mboards > 3) else ('none' if sd_spec3 else 'part')}"}, {"id": "clock_source4", "label": "Mb4: Clock Source", "dtype": "string", "options": ["", "internal", "external", "mimo", "gpsdo"], "option_labels": ["Default", "Internal", "External", "MIMO Cable", "O/B GPSDO"], "hide": "${ 'all' if not (num_mboards > 4) else ( 'none' if clock_source4 else 'part')}"}, {"id": "time_source4", "label": "Mb4: Time Source", "dtype": "string", "options": ["", "external", "mimo", "gpsdo"], "option_labels": ["Default", "External", "MIMO Cable", "O/B GPSDO"], "hide": "${ 'all' if not (num_mboards > 4) else ('none' if time_source4 else 'part')}"}, {"id": "sd_spec4", "label": "Mb4: Subdev Spec", "dtype": "string", "hide": "${ 'all' if not (num_mboards > 4) else ('none' if sd_spec4 else 'part')}"}, {"id": "clock_source5", "label": "Mb5: Clock Source", "dtype": "string", "options": ["", "internal", "external", "mimo", "gpsdo"], "option_labels": ["Default", "Internal", "External", "MIMO Cable", "O/B GPSDO"], "hide": "${ 'all' if not (num_mboards > 5) else ( 'none' if clock_source5 else 'part')}"}, {"id": "time_source5", "label": "Mb5: Time Source", "dtype": "string", "options": ["", "external", "mimo", "gpsdo"], "option_labels": ["Default", "External", "MIMO Cable", "O/B GPSDO"], "hide": "${ 'all' if not (num_mboards > 5) else ('none' if time_source5 else 'part')}"}, {"id": "sd_spec5", "label": "Mb5: Subdev Spec", "dtype": "string", "hide": "${ 'all' if not (num_mboards > 5) else ('none' if sd_spec5 else 'part')}"}, {"id": "clock_source6", "label": "Mb6: Clock Source", "dtype": "string", "options": ["", "internal", "external", "mimo", "gpsdo"], "option_labels": ["Default", "Internal", "External", "MIMO Cable", "O/B GPSDO"], "hide": "${ 'all' if not (num_mboards > 6) else ( 'none' if clock_source6 else 'part')}"}, {"id": "time_source6", "label": "Mb6: Time Source", "dtype": "string", "options": ["", "external", "mimo", "gpsdo"], "option_labels": ["Default", "External", "MIMO Cable", "O/B GPSDO"], "hide": "${ 'all' if not (num_mboards > 6) else ('none' if time_source6 else 'part')}"}, {"id": "sd_spec6", "label": "Mb6: Subdev Spec", "dtype": "string", "hide": "${ 'all' if not (num_mboards > 6) else ('none' if sd_spec6 else 'part')}"}, {"id": "clock_source7", "label": "Mb7: Clock Source", "dtype": "string", "options": ["", "internal", "external", "mimo", "gpsdo"], "option_labels": ["Default", "Internal", "External", "MIMO Cable", "O/B GPSDO"], "hide": "${ 'all' if not (num_mboards > 7) else ( 'none' if clock_source7 else 'part')}"}, {"id": "time_source7", "label": "Mb7: Time Source", "dtype": "string", "options": ["", "external", "mimo", "gpsdo"], "option_labels": ["Default", "External", "MIMO Cable", "O/B GPSDO"], "hide": "${ 'all' if not (num_mboards > 7) else ('none' if time_source7 else 'part')}"}, {"id": "sd_spec7", "label": "Mb7: Subdev Spec", "dtype": "string", "hide": "${ 'all' if not (num_mboards > 7) else ('none' if sd_spec7 else 'part')}"}, {"id": "nchan", "label": "Num Channels", "dtype": "int", "default": 1, "options": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "hide": "part"}, {"id": "samp_rate", "label": "Samp rate (Sps)", "dtype": "real", "default": "samp_rate"}, {"id": "center_freq0", "label": "Ch0: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 0) else 'all' }"}, {"id": "gain0", "label": "Ch0: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 0 else 'all' }"}, {"id": "norm_gain0", "label": "Ch0: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 0 else ('none' if bool(eval('norm_gain' + str(0))) else 'part')}"}, {"id": "ant0", "label": "Ch0: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX"], "option_labels": ["TX/RX"], "hide": "${ 'all' if not nchan > 0 else ('none' if eval('ant' + str(0)) else 'part')}"}, {"id": "bw0", "label": "Ch0: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 0 else ('none' if eval('bw' + str(0)) else 'part')}"}, {"id": "lo_source0", "label": "Ch0: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 0 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export0", "label": "Ch0: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 0 else ('none' if show_lo_controls else 'all')}"}, {"id": "center_freq1", "label": "Ch1: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 1) else 'all' }"}, {"id": "gain1", "label": "Ch1: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 1 else 'all' }"}, {"id": "norm_gain1", "label": "Ch1: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 1 else ('none' if bool(eval('norm_gain' + str(1))) else 'part')}"}, {"id": "ant1", "label": "Ch1: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX"], "option_labels": ["TX/RX"], "hide": "${ 'all' if not nchan > 1 else ('none' if eval('ant' + str(1)) else 'part')}"}, {"id": "bw1", "label": "Ch1: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 1 else ('none' if eval('bw' + str(1)) else 'part')}"}, {"id": "lo_source1", "label": "Ch1: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 1 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export1", "label": "Ch1: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 1 else ('none' if show_lo_controls else 'all')}"}, {"id": "center_freq2", "label": "Ch2: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 2) else 'all' }"}, {"id": "gain2", "label": "Ch2: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 2 else 'all' }"}, {"id": "norm_gain2", "label": "Ch2: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 2 else ('none' if bool(eval('norm_gain' + str(2))) else 'part')}"}, {"id": "ant2", "label": "Ch2: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX"], "option_labels": ["TX/RX"], "hide": "${ 'all' if not nchan > 2 else ('none' if eval('ant' + str(2)) else 'part')}"}, {"id": "bw2", "label": "Ch2: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 2 else ('none' if eval('bw' + str(2)) else 'part')}"}, {"id": "lo_source2", "label": "Ch2: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 2 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export2", "label": "Ch2: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 2 else ('none' if show_lo_controls else 'all')}"}, {"id": "center_freq3", "label": "Ch3: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 3) else 'all' }"}, {"id": "gain3", "label": "Ch3: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 3 else 'all' }"}, {"id": "norm_gain3", "label": "Ch3: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 3 else ('none' if bool(eval('norm_gain' + str(3))) else 'part')}"}, {"id": "ant3", "label": "Ch3: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX"], "option_labels": ["TX/RX"], "hide": "${ 'all' if not nchan > 3 else ('none' if eval('ant' + str(3)) else 'part')}"}, {"id": "bw3", "label": "Ch3: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 3 else ('none' if eval('bw' + str(3)) else 'part')}"}, {"id": "lo_source3", "label": "Ch3: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 3 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export3", "label": "Ch3: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 3 else ('none' if show_lo_controls else 'all')}"}, {"id": "center_freq4", "label": "Ch4: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 4) else 'all' }"}, {"id": "gain4", "label": "Ch4: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 4 else 'all' }"}, {"id": "norm_gain4", "label": "Ch4: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 4 else ('none' if bool(eval('norm_gain' + str(4))) else 'part')}"}, {"id": "ant4", "label": "Ch4: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX"], "option_labels": ["TX/RX"], "hide": "${ 'all' if not nchan > 4 else ('none' if eval('ant' + str(4)) else 'part')}"}, {"id": "bw4", "label": "Ch4: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 4 else ('none' if eval('bw' + str(4)) else 'part')}"}, {"id": "lo_source4", "label": "Ch4: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 4 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export4", "label": "Ch4: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 4 else ('none' if show_lo_controls else 'all')}"}, {"id": "center_freq5", "label": "Ch5: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 5) else 'all' }"}, {"id": "gain5", "label": "Ch5: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 5 else 'all' }"}, {"id": "norm_gain5", "label": "Ch5: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 5 else ('none' if bool(eval('norm_gain' + str(5))) else 'part')}"}, {"id": "ant5", "label": "Ch5: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX"], "option_labels": ["TX/RX"], "hide": "${ 'all' if not nchan > 5 else ('none' if eval('ant' + str(5)) else 'part')}"}, {"id": "bw5", "label": "Ch5: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 5 else ('none' if eval('bw' + str(5)) else 'part')}"}, {"id": "lo_source5", "label": "Ch5: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 5 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export5", "label": "Ch5: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 5 else ('none' if show_lo_controls else 'all')}"}, {"id": "center_freq6", "label": "Ch6: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 6) else 'all' }"}, {"id": "gain6", "label": "Ch6: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 6 else 'all' }"}, {"id": "norm_gain6", "label": "Ch6: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 6 else ('none' if bool(eval('norm_gain' + str(6))) else 'part')}"}, {"id": "ant6", "label": "Ch6: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX"], "option_labels": ["TX/RX"], "hide": "${ 'all' if not nchan > 6 else ('none' if eval('ant' + str(6)) else 'part')}"}, {"id": "bw6", "label": "Ch6: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 6 else ('none' if eval('bw' + str(6)) else 'part')}"}, {"id": "lo_source6", "label": "Ch6: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 6 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export6", "label": "Ch6: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 6 else ('none' if show_lo_controls else 'all')}"}, {"id": "center_freq7", "label": "Ch7: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 7) else 'all' }"}, {"id": "gain7", "label": "Ch7: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 7 else 'all' }"}, {"id": "norm_gain7", "label": "Ch7: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 7 else ('none' if bool(eval('norm_gain' + str(7))) else 'part')}"}, {"id": "ant7", "label": "Ch7: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX"], "option_labels": ["TX/RX"], "hide": "${ 'all' if not nchan > 7 else ('none' if eval('ant' + str(7)) else 'part')}"}, {"id": "bw7", "label": "Ch7: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 7 else ('none' if eval('bw' + str(7)) else 'part')}"}, {"id": "lo_source7", "label": "Ch7: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 7 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export7", "label": "Ch7: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 7 else ('none' if show_lo_controls else 'all')}"}, {"id": "center_freq8", "label": "Ch8: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 8) else 'all' }"}, {"id": "gain8", "label": "Ch8: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 8 else 'all' }"}, {"id": "norm_gain8", "label": "Ch8: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 8 else ('none' if bool(eval('norm_gain' + str(8))) else 'part')}"}, {"id": "ant8", "label": "Ch8: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX"], "option_labels": ["TX/RX"], "hide": "${ 'all' if not nchan > 8 else ('none' if eval('ant' + str(8)) else 'part')}"}, {"id": "bw8", "label": "Ch8: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 8 else ('none' if eval('bw' + str(8)) else 'part')}"}, {"id": "lo_source8", "label": "Ch8: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 8 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export8", "label": "Ch8: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 8 else ('none' if show_lo_controls else 'all')}"}, {"id": "center_freq9", "label": "Ch9: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 9) else 'all' }"}, {"id": "gain9", "label": "Ch9: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 9 else 'all' }"}, {"id": "norm_gain9", "label": "Ch9: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 9 else ('none' if bool(eval('norm_gain' + str(9))) else 'part')}"}, {"id": "ant9", "label": "Ch9: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX"], "option_labels": ["TX/RX"], "hide": "${ 'all' if not nchan > 9 else ('none' if eval('ant' + str(9)) else 'part')}"}, {"id": "bw9", "label": "Ch9: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 9 else ('none' if eval('bw' + str(9)) else 'part')}"}, {"id": "lo_source9", "label": "Ch9: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 9 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export9", "label": "Ch9: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 9 else ('none' if show_lo_controls else 'all')}"}, {"id": "center_freq10", "label": "Ch10: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 10) else 'all' }"}, {"id": "gain10", "label": "Ch10: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 10 else 'all' }"}, {"id": "norm_gain10", "label": "Ch10: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 10 else ('none' if bool(eval('norm_gain' + str(10))) else 'part')}"}, {"id": "ant10", "label": "Ch10: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX"], "option_labels": ["TX/RX"], "hide": "${ 'all' if not nchan > 10 else ('none' if eval('ant' + str(10)) else 'part')}"}, {"id": "bw10", "label": "Ch10: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 10 else ('none' if eval('bw' + str(10)) else 'part')}"}, {"id": "lo_source10", "label": "Ch10: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 10 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export10", "label": "Ch10: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 10 else ('none' if show_lo_controls else 'all')}"}, {"id": "center_freq11", "label": "Ch11: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 11) else 'all' }"}, {"id": "gain11", "label": "Ch11: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 11 else 'all' }"}, {"id": "norm_gain11", "label": "Ch11: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 11 else ('none' if bool(eval('norm_gain' + str(11))) else 'part')}"}, {"id": "ant11", "label": "Ch11: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX"], "option_labels": ["TX/RX"], "hide": "${ 'all' if not nchan > 11 else ('none' if eval('ant' + str(11)) else 'part')}"}, {"id": "bw11", "label": "Ch11: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 11 else ('none' if eval('bw' + str(11)) else 'part')}"}, {"id": "lo_source11", "label": "Ch11: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 11 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export11", "label": "Ch11: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 11 else ('none' if show_lo_controls else 'all')}"}, {"id": "center_freq12", "label": "Ch12: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 12) else 'all' }"}, {"id": "gain12", "label": "Ch12: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 12 else 'all' }"}, {"id": "norm_gain12", "label": "Ch12: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 12 else ('none' if bool(eval('norm_gain' + str(12))) else 'part')}"}, {"id": "ant12", "label": "Ch12: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX"], "option_labels": ["TX/RX"], "hide": "${ 'all' if not nchan > 12 else ('none' if eval('ant' + str(12)) else 'part')}"}, {"id": "bw12", "label": "Ch12: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 12 else ('none' if eval('bw' + str(12)) else 'part')}"}, {"id": "lo_source12", "label": "Ch12: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 12 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export12", "label": "Ch12: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 12 else ('none' if show_lo_controls else 'all')}"}, {"id": "center_freq13", "label": "Ch13: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 13) else 'all' }"}, {"id": "gain13", "label": "Ch13: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 13 else 'all' }"}, {"id": "norm_gain13", "label": "Ch13: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 13 else ('none' if bool(eval('norm_gain' + str(13))) else 'part')}"}, {"id": "ant13", "label": "Ch13: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX"], "option_labels": ["TX/RX"], "hide": "${ 'all' if not nchan > 13 else ('none' if eval('ant' + str(13)) else 'part')}"}, {"id": "bw13", "label": "Ch13: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 13 else ('none' if eval('bw' + str(13)) else 'part')}"}, {"id": "lo_source13", "label": "Ch13: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 13 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export13", "label": "Ch13: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 13 else ('none' if show_lo_controls else 'all')}"}, {"id": "center_freq14", "label": "Ch14: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 14) else 'all' }"}, {"id": "gain14", "label": "Ch14: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 14 else 'all' }"}, {"id": "norm_gain14", "label": "Ch14: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 14 else ('none' if bool(eval('norm_gain' + str(14))) else 'part')}"}, {"id": "ant14", "label": "Ch14: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX"], "option_labels": ["TX/RX"], "hide": "${ 'all' if not nchan > 14 else ('none' if eval('ant' + str(14)) else 'part')}"}, {"id": "bw14", "label": "Ch14: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 14 else ('none' if eval('bw' + str(14)) else 'part')}"}, {"id": "lo_source14", "label": "Ch14: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 14 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export14", "label": "Ch14: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 14 else ('none' if show_lo_controls else 'all')}"}, {"id": "center_freq15", "label": "Ch15: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 15) else 'all' }"}, {"id": "gain15", "label": "Ch15: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 15 else 'all' }"}, {"id": "norm_gain15", "label": "Ch15: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 15 else ('none' if bool(eval('norm_gain' + str(15))) else 'part')}"}, {"id": "ant15", "label": "Ch15: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX"], "option_labels": ["TX/RX"], "hide": "${ 'all' if not nchan > 15 else ('none' if eval('ant' + str(15)) else 'part')}"}, {"id": "bw15", "label": "Ch15: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 15 else ('none' if eval('bw' + str(15)) else 'part')}"}, {"id": "lo_source15", "label": "Ch15: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 15 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export15", "label": "Ch15: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 15 else ('none' if show_lo_controls else 'all')}"}, {"id": "center_freq16", "label": "Ch16: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 16) else 'all' }"}, {"id": "gain16", "label": "Ch16: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 16 else 'all' }"}, {"id": "norm_gain16", "label": "Ch16: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 16 else ('none' if bool(eval('norm_gain' + str(16))) else 'part')}"}, {"id": "ant16", "label": "Ch16: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX"], "option_labels": ["TX/RX"], "hide": "${ 'all' if not nchan > 16 else ('none' if eval('ant' + str(16)) else 'part')}"}, {"id": "bw16", "label": "Ch16: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 16 else ('none' if eval('bw' + str(16)) else 'part')}"}, {"id": "lo_source16", "label": "Ch16: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 16 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export16", "label": "Ch16: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 16 else ('none' if show_lo_controls else 'all')}"}, {"id": "center_freq17", "label": "Ch17: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 17) else 'all' }"}, {"id": "gain17", "label": "Ch17: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 17 else 'all' }"}, {"id": "norm_gain17", "label": "Ch17: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 17 else ('none' if bool(eval('norm_gain' + str(17))) else 'part')}"}, {"id": "ant17", "label": "Ch17: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX"], "option_labels": ["TX/RX"], "hide": "${ 'all' if not nchan > 17 else ('none' if eval('ant' + str(17)) else 'part')}"}, {"id": "bw17", "label": "Ch17: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 17 else ('none' if eval('bw' + str(17)) else 'part')}"}, {"id": "lo_source17", "label": "Ch17: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 17 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export17", "label": "Ch17: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 17 else ('none' if show_lo_controls else 'all')}"}, {"id": "center_freq18", "label": "Ch18: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 18) else 'all' }"}, {"id": "gain18", "label": "Ch18: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 18 else 'all' }"}, {"id": "norm_gain18", "label": "Ch18: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 18 else ('none' if bool(eval('norm_gain' + str(18))) else 'part')}"}, {"id": "ant18", "label": "Ch18: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX"], "option_labels": ["TX/RX"], "hide": "${ 'all' if not nchan > 18 else ('none' if eval('ant' + str(18)) else 'part')}"}, {"id": "bw18", "label": "Ch18: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 18 else ('none' if eval('bw' + str(18)) else 'part')}"}, {"id": "lo_source18", "label": "Ch18: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 18 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export18", "label": "Ch18: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 18 else ('none' if show_lo_controls else 'all')}"}, {"id": "center_freq19", "label": "Ch19: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 19) else 'all' }"}, {"id": "gain19", "label": "Ch19: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 19 else 'all' }"}, {"id": "norm_gain19", "label": "Ch19: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 19 else ('none' if bool(eval('norm_gain' + str(19))) else 'part')}"}, {"id": "ant19", "label": "Ch19: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX"], "option_labels": ["TX/RX"], "hide": "${ 'all' if not nchan > 19 else ('none' if eval('ant' + str(19)) else 'part')}"}, {"id": "bw19", "label": "Ch19: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 19 else ('none' if eval('bw' + str(19)) else 'part')}"}, {"id": "lo_source19", "label": "Ch19: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 19 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export19", "label": "Ch19: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 19 else ('none' if show_lo_controls else 'all')}"}, {"id": "center_freq20", "label": "Ch20: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 20) else 'all' }"}, {"id": "gain20", "label": "Ch20: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 20 else 'all' }"}, {"id": "norm_gain20", "label": "Ch20: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 20 else ('none' if bool(eval('norm_gain' + str(20))) else 'part')}"}, {"id": "ant20", "label": "Ch20: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX"], "option_labels": ["TX/RX"], "hide": "${ 'all' if not nchan > 20 else ('none' if eval('ant' + str(20)) else 'part')}"}, {"id": "bw20", "label": "Ch20: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 20 else ('none' if eval('bw' + str(20)) else 'part')}"}, {"id": "lo_source20", "label": "Ch20: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 20 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export20", "label": "Ch20: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 20 else ('none' if show_lo_controls else 'all')}"}, {"id": "center_freq21", "label": "Ch21: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 21) else 'all' }"}, {"id": "gain21", "label": "Ch21: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 21 else 'all' }"}, {"id": "norm_gain21", "label": "Ch21: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 21 else ('none' if bool(eval('norm_gain' + str(21))) else 'part')}"}, {"id": "ant21", "label": "Ch21: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX"], "option_labels": ["TX/RX"], "hide": "${ 'all' if not nchan > 21 else ('none' if eval('ant' + str(21)) else 'part')}"}, {"id": "bw21", "label": "Ch21: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 21 else ('none' if eval('bw' + str(21)) else 'part')}"}, {"id": "lo_source21", "label": "Ch21: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 21 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export21", "label": "Ch21: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 21 else ('none' if show_lo_controls else 'all')}"}, {"id": "center_freq22", "label": "Ch22: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 22) else 'all' }"}, {"id": "gain22", "label": "Ch22: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 22 else 'all' }"}, {"id": "norm_gain22", "label": "Ch22: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 22 else ('none' if bool(eval('norm_gain' + str(22))) else 'part')}"}, {"id": "ant22", "label": "Ch22: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX"], "option_labels": ["TX/RX"], "hide": "${ 'all' if not nchan > 22 else ('none' if eval('ant' + str(22)) else 'part')}"}, {"id": "bw22", "label": "Ch22: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 22 else ('none' if eval('bw' + str(22)) else 'part')}"}, {"id": "lo_source22", "label": "Ch22: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 22 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export22", "label": "Ch22: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 22 else ('none' if show_lo_controls else 'all')}"}, {"id": "center_freq23", "label": "Ch23: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 23) else 'all' }"}, {"id": "gain23", "label": "Ch23: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 23 else 'all' }"}, {"id": "norm_gain23", "label": "Ch23: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 23 else ('none' if bool(eval('norm_gain' + str(23))) else 'part')}"}, {"id": "ant23", "label": "Ch23: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX"], "option_labels": ["TX/RX"], "hide": "${ 'all' if not nchan > 23 else ('none' if eval('ant' + str(23)) else 'part')}"}, {"id": "bw23", "label": "Ch23: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 23 else ('none' if eval('bw' + str(23)) else 'part')}"}, {"id": "lo_source23", "label": "Ch23: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 23 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export23", "label": "Ch23: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 23 else ('none' if show_lo_controls else 'all')}"}, {"id": "center_freq24", "label": "Ch24: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 24) else 'all' }"}, {"id": "gain24", "label": "Ch24: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 24 else 'all' }"}, {"id": "norm_gain24", "label": "Ch24: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 24 else ('none' if bool(eval('norm_gain' + str(24))) else 'part')}"}, {"id": "ant24", "label": "Ch24: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX"], "option_labels": ["TX/RX"], "hide": "${ 'all' if not nchan > 24 else ('none' if eval('ant' + str(24)) else 'part')}"}, {"id": "bw24", "label": "Ch24: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 24 else ('none' if eval('bw' + str(24)) else 'part')}"}, {"id": "lo_source24", "label": "Ch24: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 24 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export24", "label": "Ch24: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 24 else ('none' if show_lo_controls else 'all')}"}, {"id": "center_freq25", "label": "Ch25: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 25) else 'all' }"}, {"id": "gain25", "label": "Ch25: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 25 else 'all' }"}, {"id": "norm_gain25", "label": "Ch25: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 25 else ('none' if bool(eval('norm_gain' + str(25))) else 'part')}"}, {"id": "ant25", "label": "Ch25: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX"], "option_labels": ["TX/RX"], "hide": "${ 'all' if not nchan > 25 else ('none' if eval('ant' + str(25)) else 'part')}"}, {"id": "bw25", "label": "Ch25: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 25 else ('none' if eval('bw' + str(25)) else 'part')}"}, {"id": "lo_source25", "label": "Ch25: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 25 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export25", "label": "Ch25: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 25 else ('none' if show_lo_controls else 'all')}"}, {"id": "center_freq26", "label": "Ch26: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 26) else 'all' }"}, {"id": "gain26", "label": "Ch26: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 26 else 'all' }"}, {"id": "norm_gain26", "label": "Ch26: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 26 else ('none' if bool(eval('norm_gain' + str(26))) else 'part')}"}, {"id": "ant26", "label": "Ch26: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX"], "option_labels": ["TX/RX"], "hide": "${ 'all' if not nchan > 26 else ('none' if eval('ant' + str(26)) else 'part')}"}, {"id": "bw26", "label": "Ch26: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 26 else ('none' if eval('bw' + str(26)) else 'part')}"}, {"id": "lo_source26", "label": "Ch26: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 26 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export26", "label": "Ch26: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 26 else ('none' if show_lo_controls else 'all')}"}, {"id": "center_freq27", "label": "Ch27: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 27) else 'all' }"}, {"id": "gain27", "label": "Ch27: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 27 else 'all' }"}, {"id": "norm_gain27", "label": "Ch27: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 27 else ('none' if bool(eval('norm_gain' + str(27))) else 'part')}"}, {"id": "ant27", "label": "Ch27: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX"], "option_labels": ["TX/RX"], "hide": "${ 'all' if not nchan > 27 else ('none' if eval('ant' + str(27)) else 'part')}"}, {"id": "bw27", "label": "Ch27: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 27 else ('none' if eval('bw' + str(27)) else 'part')}"}, {"id": "lo_source27", "label": "Ch27: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 27 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export27", "label": "Ch27: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 27 else ('none' if show_lo_controls else 'all')}"}, {"id": "center_freq28", "label": "Ch28: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 28) else 'all' }"}, {"id": "gain28", "label": "Ch28: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 28 else 'all' }"}, {"id": "norm_gain28", "label": "Ch28: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 28 else ('none' if bool(eval('norm_gain' + str(28))) else 'part')}"}, {"id": "ant28", "label": "Ch28: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX"], "option_labels": ["TX/RX"], "hide": "${ 'all' if not nchan > 28 else ('none' if eval('ant' + str(28)) else 'part')}"}, {"id": "bw28", "label": "Ch28: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 28 else ('none' if eval('bw' + str(28)) else 'part')}"}, {"id": "lo_source28", "label": "Ch28: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 28 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export28", "label": "Ch28: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 28 else ('none' if show_lo_controls else 'all')}"}, {"id": "center_freq29", "label": "Ch29: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 29) else 'all' }"}, {"id": "gain29", "label": "Ch29: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 29 else 'all' }"}, {"id": "norm_gain29", "label": "Ch29: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 29 else ('none' if bool(eval('norm_gain' + str(29))) else 'part')}"}, {"id": "ant29", "label": "Ch29: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX"], "option_labels": ["TX/RX"], "hide": "${ 'all' if not nchan > 29 else ('none' if eval('ant' + str(29)) else 'part')}"}, {"id": "bw29", "label": "Ch29: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 29 else ('none' if eval('bw' + str(29)) else 'part')}"}, {"id": "lo_source29", "label": "Ch29: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 29 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export29", "label": "Ch29: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 29 else ('none' if show_lo_controls else 'all')}"}, {"id": "center_freq30", "label": "Ch30: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 30) else 'all' }"}, {"id": "gain30", "label": "Ch30: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 30 else 'all' }"}, {"id": "norm_gain30", "label": "Ch30: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 30 else ('none' if bool(eval('norm_gain' + str(30))) else 'part')}"}, {"id": "ant30", "label": "Ch30: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX"], "option_labels": ["TX/RX"], "hide": "${ 'all' if not nchan > 30 else ('none' if eval('ant' + str(30)) else 'part')}"}, {"id": "bw30", "label": "Ch30: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 30 else ('none' if eval('bw' + str(30)) else 'part')}"}, {"id": "lo_source30", "label": "Ch30: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 30 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export30", "label": "Ch30: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 30 else ('none' if show_lo_controls else 'all')}"}, {"id": "center_freq31", "label": "Ch31: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 31) else 'all' }"}, {"id": "gain31", "label": "Ch31: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 31 else 'all' }"}, {"id": "norm_gain31", "label": "Ch31: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 31 else ('none' if bool(eval('norm_gain' + str(31))) else 'part')}"}, {"id": "ant31", "label": "Ch31: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX"], "option_labels": ["TX/RX"], "hide": "${ 'all' if not nchan > 31 else ('none' if eval('ant' + str(31)) else 'part')}"}, {"id": "bw31", "label": "Ch31: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 31 else ('none' if eval('bw' + str(31)) else 'part')}"}, {"id": "lo_source31", "label": "Ch31: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 31 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export31", "label": "Ch31: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 31 else ('none' if show_lo_controls else 'all')}"}, {"id": "show_lo_controls", "label": "Show LO Controls", "category": "Advanced", "dtype": "bool", "default": "False", "hide": "part"}, {"id": "len_tag_name", "label": "TSB tag name", "dtype": "string", "hide": "${ 'none' if len(str(len_tag_name)) else 'part'}"}], "inputs": [{"domain": "message", "id": "command", "optional": true}, {"domain": "stream", "dtype": "${type.type}", "multiplicity": "${nchan}"}], "outputs": [{"domain": "message", "id": "async_msgs", "optional": true}], "templates": {"imports": "from gnuradio import uhd\nimport time", "make": "uhd.usrp_sink(\n    \",\".join((${dev_addr}, ${dev_args})),\n    uhd.stream_args(\n        cpu_format=\"${type}\",\n        % if otw:\n        otw_format=\"${otw}\",\n        % endif\n        % if stream_args:\n        args=${stream_args},\n        % endif\n        % if eval(stream_chans):\n        channels=${stream_chans},\n        % else:\n        channels=list(range(0,${nchan})),\n        % endif\n    ),\n    % if len_tag_name:\n    ${len_tag_name},\n    % endif\n)\n% if context.get('num_mboards')() > 0:\n% if context.get('sd_spec0')():\nself.${id}.set_subdev_spec(${sd_spec0}, 0)\n% endif\n% if context.get('time_source0')():\nself.${id}.set_time_source(${time_source0}, 0)\n% endif\n% if context.get('clock_source0')():\nself.${id}.set_clock_source(${clock_source0}, 0)\n% endif\n% endif\n% if context.get('num_mboards')() > 1:\n% if context.get('sd_spec1')():\nself.${id}.set_subdev_spec(${sd_spec1}, 1)\n% endif\n% if context.get('time_source1')():\nself.${id}.set_time_source(${time_source1}, 1)\n% endif\n% if context.get('clock_source1')():\nself.${id}.set_clock_source(${clock_source1}, 1)\n% endif\n% endif\n% if context.get('num_mboards')() > 2:\n% if context.get('sd_spec2')():\nself.${id}.set_subdev_spec(${sd_spec2}, 2)\n% endif\n% if context.get('time_source2')():\nself.${id}.set_time_source(${time_source2}, 2)\n% endif\n% if context.get('clock_source2')():\nself.${id}.set_clock_source(${clock_source2}, 2)\n% endif\n% endif\n% if context.get('num_mboards')() > 3:\n% if context.get('sd_spec3')():\nself.${id}.set_subdev_spec(${sd_spec3}, 3)\n% endif\n% if context.get('time_source3')():\nself.${id}.set_time_source(${time_source3}, 3)\n% endif\n% if context.get('clock_source3')():\nself.${id}.set_clock_source(${clock_source3}, 3)\n% endif\n% endif\n% if context.get('num_mboards')() > 4:\n% if context.get('sd_spec4')():\nself.${id}.set_subdev_spec(${sd_spec4}, 4)\n% endif\n% if context.get('time_source4')():\nself.${id}.set_time_source(${time_source4}, 4)\n% endif\n% if context.get('clock_source4')():\nself.${id}.set_clock_source(${clock_source4}, 4)\n% endif\n% endif\n% if context.get('num_mboards')() > 5:\n% if context.get('sd_spec5')():\nself.${id}.set_subdev_spec(${sd_spec5}, 5)\n% endif\n% if context.get('time_source5')():\nself.${id}.set_time_source(${time_source5}, 5)\n% endif\n% if context.get('clock_source5')():\nself.${id}.set_clock_source(${clock_source5}, 5)\n% endif\n% endif\n% if context.get('num_mboards')() > 6:\n% if context.get('sd_spec6')():\nself.${id}.set_subdev_spec(${sd_spec6}, 6)\n% endif\n% if context.get('time_source6')():\nself.${id}.set_time_source(${time_source6}, 6)\n% endif\n% if context.get('clock_source6')():\nself.${id}.set_clock_source(${clock_source6}, 6)\n% endif\n% endif\n% if context.get('num_mboards')() > 7:\n% if context.get('sd_spec7')():\nself.${id}.set_subdev_spec(${sd_spec7}, 7)\n% endif\n% if context.get('time_source7')():\nself.${id}.set_time_source(${time_source7}, 7)\n% endif\n% if context.get('clock_source7')():\nself.${id}.set_clock_source(${clock_source7}, 7)\n% endif\n% endif\n% if context.get('nchan')() > 0:\nself.${id}.set_center_freq(${center_freq0}, 0)\n% if bool(eval(context.get('norm_gain' + '0')())):\nself.${id}.set_normalized_gain(${gain0}, 0)\n% else:\nself.${id}.set_gain(${gain0}, 0)\n% endif\n% if context.get('ant0')():\nself.${id}.set_antenna(${ant0}, 0)\n% endif\n% if context.get('bw0')():\nself.${id}.set_bandwidth(${bw0}, 0)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source0}, uhd.ALL_LOS, 0)\nself.${id}.set_lo_export_enabled(${lo_export0}, uhd.ALL_LOS, 0)\n% endif\n% endif\n% if context.get('nchan')() > 1:\nself.${id}.set_center_freq(${center_freq1}, 1)\n% if bool(eval(context.get('norm_gain' + '1')())):\nself.${id}.set_normalized_gain(${gain1}, 1)\n% else:\nself.${id}.set_gain(${gain1}, 1)\n% endif\n% if context.get('ant1')():\nself.${id}.set_antenna(${ant1}, 1)\n% endif\n% if context.get('bw1')():\nself.${id}.set_bandwidth(${bw1}, 1)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source1}, uhd.ALL_LOS, 1)\nself.${id}.set_lo_export_enabled(${lo_export1}, uhd.ALL_LOS, 1)\n% endif\n% endif\n% if context.get('nchan')() > 2:\nself.${id}.set_center_freq(${center_freq2}, 2)\n% if bool(eval(context.get('norm_gain' + '2')())):\nself.${id}.set_normalized_gain(${gain2}, 2)\n% else:\nself.${id}.set_gain(${gain2}, 2)\n% endif\n% if context.get('ant2')():\nself.${id}.set_antenna(${ant2}, 2)\n% endif\n% if context.get('bw2')():\nself.${id}.set_bandwidth(${bw2}, 2)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source2}, uhd.ALL_LOS, 2)\nself.${id}.set_lo_export_enabled(${lo_export2}, uhd.ALL_LOS, 2)\n% endif\n% endif\n% if context.get('nchan')() > 3:\nself.${id}.set_center_freq(${center_freq3}, 3)\n% if bool(eval(context.get('norm_gain' + '3')())):\nself.${id}.set_normalized_gain(${gain3}, 3)\n% else:\nself.${id}.set_gain(${gain3}, 3)\n% endif\n% if context.get('ant3')():\nself.${id}.set_antenna(${ant3}, 3)\n% endif\n% if context.get('bw3')():\nself.${id}.set_bandwidth(${bw3}, 3)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source3}, uhd.ALL_LOS, 3)\nself.${id}.set_lo_export_enabled(${lo_export3}, uhd.ALL_LOS, 3)\n% endif\n% endif\n% if context.get('nchan')() > 4:\nself.${id}.set_center_freq(${center_freq4}, 4)\n% if bool(eval(context.get('norm_gain' + '4')())):\nself.${id}.set_normalized_gain(${gain4}, 4)\n% else:\nself.${id}.set_gain(${gain4}, 4)\n% endif\n% if context.get('ant4')():\nself.${id}.set_antenna(${ant4}, 4)\n% endif\n% if context.get('bw4')():\nself.${id}.set_bandwidth(${bw4}, 4)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source4}, uhd.ALL_LOS, 4)\nself.${id}.set_lo_export_enabled(${lo_export4}, uhd.ALL_LOS, 4)\n% endif\n% endif\n% if context.get('nchan')() > 5:\nself.${id}.set_center_freq(${center_freq5}, 5)\n% if bool(eval(context.get('norm_gain' + '5')())):\nself.${id}.set_normalized_gain(${gain5}, 5)\n% else:\nself.${id}.set_gain(${gain5}, 5)\n% endif\n% if context.get('ant5')():\nself.${id}.set_antenna(${ant5}, 5)\n% endif\n% if context.get('bw5')():\nself.${id}.set_bandwidth(${bw5}, 5)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source5}, uhd.ALL_LOS, 5)\nself.${id}.set_lo_export_enabled(${lo_export5}, uhd.ALL_LOS, 5)\n% endif\n% endif\n% if context.get('nchan')() > 6:\nself.${id}.set_center_freq(${center_freq6}, 6)\n% if bool(eval(context.get('norm_gain' + '6')())):\nself.${id}.set_normalized_gain(${gain6}, 6)\n% else:\nself.${id}.set_gain(${gain6}, 6)\n% endif\n% if context.get('ant6')():\nself.${id}.set_antenna(${ant6}, 6)\n% endif\n% if context.get('bw6')():\nself.${id}.set_bandwidth(${bw6}, 6)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source6}, uhd.ALL_LOS, 6)\nself.${id}.set_lo_export_enabled(${lo_export6}, uhd.ALL_LOS, 6)\n% endif\n% endif\n% if context.get('nchan')() > 7:\nself.${id}.set_center_freq(${center_freq7}, 7)\n% if bool(eval(context.get('norm_gain' + '7')())):\nself.${id}.set_normalized_gain(${gain7}, 7)\n% else:\nself.${id}.set_gain(${gain7}, 7)\n% endif\n% if context.get('ant7')():\nself.${id}.set_antenna(${ant7}, 7)\n% endif\n% if context.get('bw7')():\nself.${id}.set_bandwidth(${bw7}, 7)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source7}, uhd.ALL_LOS, 7)\nself.${id}.set_lo_export_enabled(${lo_export7}, uhd.ALL_LOS, 7)\n% endif\n% endif\n% if context.get('nchan')() > 8:\nself.${id}.set_center_freq(${center_freq8}, 8)\n% if bool(eval(context.get('norm_gain' + '8')())):\nself.${id}.set_normalized_gain(${gain8}, 8)\n% else:\nself.${id}.set_gain(${gain8}, 8)\n% endif\n% if context.get('ant8')():\nself.${id}.set_antenna(${ant8}, 8)\n% endif\n% if context.get('bw8')():\nself.${id}.set_bandwidth(${bw8}, 8)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source8}, uhd.ALL_LOS, 8)\nself.${id}.set_lo_export_enabled(${lo_export8}, uhd.ALL_LOS, 8)\n% endif\n% endif\n% if context.get('nchan')() > 9:\nself.${id}.set_center_freq(${center_freq9}, 9)\n% if bool(eval(context.get('norm_gain' + '9')())):\nself.${id}.set_normalized_gain(${gain9}, 9)\n% else:\nself.${id}.set_gain(${gain9}, 9)\n% endif\n% if context.get('ant9')():\nself.${id}.set_antenna(${ant9}, 9)\n% endif\n% if context.get('bw9')():\nself.${id}.set_bandwidth(${bw9}, 9)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source9}, uhd.ALL_LOS, 9)\nself.${id}.set_lo_export_enabled(${lo_export9}, uhd.ALL_LOS, 9)\n% endif\n% endif\n% if context.get('nchan')() > 10:\nself.${id}.set_center_freq(${center_freq10}, 10)\n% if bool(eval(context.get('norm_gain' + '10')())):\nself.${id}.set_normalized_gain(${gain10}, 10)\n% else:\nself.${id}.set_gain(${gain10}, 10)\n% endif\n% if context.get('ant10')():\nself.${id}.set_antenna(${ant10}, 10)\n% endif\n% if context.get('bw10')():\nself.${id}.set_bandwidth(${bw10}, 10)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source10}, uhd.ALL_LOS, 10)\nself.${id}.set_lo_export_enabled(${lo_export10}, uhd.ALL_LOS, 10)\n% endif\n% endif\n% if context.get('nchan')() > 11:\nself.${id}.set_center_freq(${center_freq11}, 11)\n% if bool(eval(context.get('norm_gain' + '11')())):\nself.${id}.set_normalized_gain(${gain11}, 11)\n% else:\nself.${id}.set_gain(${gain11}, 11)\n% endif\n% if context.get('ant11')():\nself.${id}.set_antenna(${ant11}, 11)\n% endif\n% if context.get('bw11')():\nself.${id}.set_bandwidth(${bw11}, 11)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source11}, uhd.ALL_LOS, 11)\nself.${id}.set_lo_export_enabled(${lo_export11}, uhd.ALL_LOS, 11)\n% endif\n% endif\n% if context.get('nchan')() > 12:\nself.${id}.set_center_freq(${center_freq12}, 12)\n% if bool(eval(context.get('norm_gain' + '12')())):\nself.${id}.set_normalized_gain(${gain12}, 12)\n% else:\nself.${id}.set_gain(${gain12}, 12)\n% endif\n% if context.get('ant12')():\nself.${id}.set_antenna(${ant12}, 12)\n% endif\n% if context.get('bw12')():\nself.${id}.set_bandwidth(${bw12}, 12)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source12}, uhd.ALL_LOS, 12)\nself.${id}.set_lo_export_enabled(${lo_export12}, uhd.ALL_LOS, 12)\n% endif\n% endif\n% if context.get('nchan')() > 13:\nself.${id}.set_center_freq(${center_freq13}, 13)\n% if bool(eval(context.get('norm_gain' + '13')())):\nself.${id}.set_normalized_gain(${gain13}, 13)\n% else:\nself.${id}.set_gain(${gain13}, 13)\n% endif\n% if context.get('ant13')():\nself.${id}.set_antenna(${ant13}, 13)\n% endif\n% if context.get('bw13')():\nself.${id}.set_bandwidth(${bw13}, 13)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source13}, uhd.ALL_LOS, 13)\nself.${id}.set_lo_export_enabled(${lo_export13}, uhd.ALL_LOS, 13)\n% endif\n% endif\n% if context.get('nchan')() > 14:\nself.${id}.set_center_freq(${center_freq14}, 14)\n% if bool(eval(context.get('norm_gain' + '14')())):\nself.${id}.set_normalized_gain(${gain14}, 14)\n% else:\nself.${id}.set_gain(${gain14}, 14)\n% endif\n% if context.get('ant14')():\nself.${id}.set_antenna(${ant14}, 14)\n% endif\n% if context.get('bw14')():\nself.${id}.set_bandwidth(${bw14}, 14)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source14}, uhd.ALL_LOS, 14)\nself.${id}.set_lo_export_enabled(${lo_export14}, uhd.ALL_LOS, 14)\n% endif\n% endif\n% if context.get('nchan')() > 15:\nself.${id}.set_center_freq(${center_freq15}, 15)\n% if bool(eval(context.get('norm_gain' + '15')())):\nself.${id}.set_normalized_gain(${gain15}, 15)\n% else:\nself.${id}.set_gain(${gain15}, 15)\n% endif\n% if context.get('ant15')():\nself.${id}.set_antenna(${ant15}, 15)\n% endif\n% if context.get('bw15')():\nself.${id}.set_bandwidth(${bw15}, 15)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source15}, uhd.ALL_LOS, 15)\nself.${id}.set_lo_export_enabled(${lo_export15}, uhd.ALL_LOS, 15)\n% endif\n% endif\n% if context.get('nchan')() > 16:\nself.${id}.set_center_freq(${center_freq16}, 16)\n% if bool(eval(context.get('norm_gain' + '16')())):\nself.${id}.set_normalized_gain(${gain16}, 16)\n% else:\nself.${id}.set_gain(${gain16}, 16)\n% endif\n% if context.get('ant16')():\nself.${id}.set_antenna(${ant16}, 16)\n% endif\n% if context.get('bw16')():\nself.${id}.set_bandwidth(${bw16}, 16)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source16}, uhd.ALL_LOS, 16)\nself.${id}.set_lo_export_enabled(${lo_export16}, uhd.ALL_LOS, 16)\n% endif\n% endif\n% if context.get('nchan')() > 17:\nself.${id}.set_center_freq(${center_freq17}, 17)\n% if bool(eval(context.get('norm_gain' + '17')())):\nself.${id}.set_normalized_gain(${gain17}, 17)\n% else:\nself.${id}.set_gain(${gain17}, 17)\n% endif\n% if context.get('ant17')():\nself.${id}.set_antenna(${ant17}, 17)\n% endif\n% if context.get('bw17')():\nself.${id}.set_bandwidth(${bw17}, 17)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source17}, uhd.ALL_LOS, 17)\nself.${id}.set_lo_export_enabled(${lo_export17}, uhd.ALL_LOS, 17)\n% endif\n% endif\n% if context.get('nchan')() > 18:\nself.${id}.set_center_freq(${center_freq18}, 18)\n% if bool(eval(context.get('norm_gain' + '18')())):\nself.${id}.set_normalized_gain(${gain18}, 18)\n% else:\nself.${id}.set_gain(${gain18}, 18)\n% endif\n% if context.get('ant18')():\nself.${id}.set_antenna(${ant18}, 18)\n% endif\n% if context.get('bw18')():\nself.${id}.set_bandwidth(${bw18}, 18)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source18}, uhd.ALL_LOS, 18)\nself.${id}.set_lo_export_enabled(${lo_export18}, uhd.ALL_LOS, 18)\n% endif\n% endif\n% if context.get('nchan')() > 19:\nself.${id}.set_center_freq(${center_freq19}, 19)\n% if bool(eval(context.get('norm_gain' + '19')())):\nself.${id}.set_normalized_gain(${gain19}, 19)\n% else:\nself.${id}.set_gain(${gain19}, 19)\n% endif\n% if context.get('ant19')():\nself.${id}.set_antenna(${ant19}, 19)\n% endif\n% if context.get('bw19')():\nself.${id}.set_bandwidth(${bw19}, 19)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source19}, uhd.ALL_LOS, 19)\nself.${id}.set_lo_export_enabled(${lo_export19}, uhd.ALL_LOS, 19)\n% endif\n% endif\n% if context.get('nchan')() > 20:\nself.${id}.set_center_freq(${center_freq20}, 20)\n% if bool(eval(context.get('norm_gain' + '20')())):\nself.${id}.set_normalized_gain(${gain20}, 20)\n% else:\nself.${id}.set_gain(${gain20}, 20)\n% endif\n% if context.get('ant20')():\nself.${id}.set_antenna(${ant20}, 20)\n% endif\n% if context.get('bw20')():\nself.${id}.set_bandwidth(${bw20}, 20)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source20}, uhd.ALL_LOS, 20)\nself.${id}.set_lo_export_enabled(${lo_export20}, uhd.ALL_LOS, 20)\n% endif\n% endif\n% if context.get('nchan')() > 21:\nself.${id}.set_center_freq(${center_freq21}, 21)\n% if bool(eval(context.get('norm_gain' + '21')())):\nself.${id}.set_normalized_gain(${gain21}, 21)\n% else:\nself.${id}.set_gain(${gain21}, 21)\n% endif\n% if context.get('ant21')():\nself.${id}.set_antenna(${ant21}, 21)\n% endif\n% if context.get('bw21')():\nself.${id}.set_bandwidth(${bw21}, 21)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source21}, uhd.ALL_LOS, 21)\nself.${id}.set_lo_export_enabled(${lo_export21}, uhd.ALL_LOS, 21)\n% endif\n% endif\n% if context.get('nchan')() > 22:\nself.${id}.set_center_freq(${center_freq22}, 22)\n% if bool(eval(context.get('norm_gain' + '22')())):\nself.${id}.set_normalized_gain(${gain22}, 22)\n% else:\nself.${id}.set_gain(${gain22}, 22)\n% endif\n% if context.get('ant22')():\nself.${id}.set_antenna(${ant22}, 22)\n% endif\n% if context.get('bw22')():\nself.${id}.set_bandwidth(${bw22}, 22)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source22}, uhd.ALL_LOS, 22)\nself.${id}.set_lo_export_enabled(${lo_export22}, uhd.ALL_LOS, 22)\n% endif\n% endif\n% if context.get('nchan')() > 23:\nself.${id}.set_center_freq(${center_freq23}, 23)\n% if bool(eval(context.get('norm_gain' + '23')())):\nself.${id}.set_normalized_gain(${gain23}, 23)\n% else:\nself.${id}.set_gain(${gain23}, 23)\n% endif\n% if context.get('ant23')():\nself.${id}.set_antenna(${ant23}, 23)\n% endif\n% if context.get('bw23')():\nself.${id}.set_bandwidth(${bw23}, 23)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source23}, uhd.ALL_LOS, 23)\nself.${id}.set_lo_export_enabled(${lo_export23}, uhd.ALL_LOS, 23)\n% endif\n% endif\n% if context.get('nchan')() > 24:\nself.${id}.set_center_freq(${center_freq24}, 24)\n% if bool(eval(context.get('norm_gain' + '24')())):\nself.${id}.set_normalized_gain(${gain24}, 24)\n% else:\nself.${id}.set_gain(${gain24}, 24)\n% endif\n% if context.get('ant24')():\nself.${id}.set_antenna(${ant24}, 24)\n% endif\n% if context.get('bw24')():\nself.${id}.set_bandwidth(${bw24}, 24)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source24}, uhd.ALL_LOS, 24)\nself.${id}.set_lo_export_enabled(${lo_export24}, uhd.ALL_LOS, 24)\n% endif\n% endif\n% if context.get('nchan')() > 25:\nself.${id}.set_center_freq(${center_freq25}, 25)\n% if bool(eval(context.get('norm_gain' + '25')())):\nself.${id}.set_normalized_gain(${gain25}, 25)\n% else:\nself.${id}.set_gain(${gain25}, 25)\n% endif\n% if context.get('ant25')():\nself.${id}.set_antenna(${ant25}, 25)\n% endif\n% if context.get('bw25')():\nself.${id}.set_bandwidth(${bw25}, 25)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source25}, uhd.ALL_LOS, 25)\nself.${id}.set_lo_export_enabled(${lo_export25}, uhd.ALL_LOS, 25)\n% endif\n% endif\n% if context.get('nchan')() > 26:\nself.${id}.set_center_freq(${center_freq26}, 26)\n% if bool(eval(context.get('norm_gain' + '26')())):\nself.${id}.set_normalized_gain(${gain26}, 26)\n% else:\nself.${id}.set_gain(${gain26}, 26)\n% endif\n% if context.get('ant26')():\nself.${id}.set_antenna(${ant26}, 26)\n% endif\n% if context.get('bw26')():\nself.${id}.set_bandwidth(${bw26}, 26)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source26}, uhd.ALL_LOS, 26)\nself.${id}.set_lo_export_enabled(${lo_export26}, uhd.ALL_LOS, 26)\n% endif\n% endif\n% if context.get('nchan')() > 27:\nself.${id}.set_center_freq(${center_freq27}, 27)\n% if bool(eval(context.get('norm_gain' + '27')())):\nself.${id}.set_normalized_gain(${gain27}, 27)\n% else:\nself.${id}.set_gain(${gain27}, 27)\n% endif\n% if context.get('ant27')():\nself.${id}.set_antenna(${ant27}, 27)\n% endif\n% if context.get('bw27')():\nself.${id}.set_bandwidth(${bw27}, 27)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source27}, uhd.ALL_LOS, 27)\nself.${id}.set_lo_export_enabled(${lo_export27}, uhd.ALL_LOS, 27)\n% endif\n% endif\n% if context.get('nchan')() > 28:\nself.${id}.set_center_freq(${center_freq28}, 28)\n% if bool(eval(context.get('norm_gain' + '28')())):\nself.${id}.set_normalized_gain(${gain28}, 28)\n% else:\nself.${id}.set_gain(${gain28}, 28)\n% endif\n% if context.get('ant28')():\nself.${id}.set_antenna(${ant28}, 28)\n% endif\n% if context.get('bw28')():\nself.${id}.set_bandwidth(${bw28}, 28)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source28}, uhd.ALL_LOS, 28)\nself.${id}.set_lo_export_enabled(${lo_export28}, uhd.ALL_LOS, 28)\n% endif\n% endif\n% if context.get('nchan')() > 29:\nself.${id}.set_center_freq(${center_freq29}, 29)\n% if bool(eval(context.get('norm_gain' + '29')())):\nself.${id}.set_normalized_gain(${gain29}, 29)\n% else:\nself.${id}.set_gain(${gain29}, 29)\n% endif\n% if context.get('ant29')():\nself.${id}.set_antenna(${ant29}, 29)\n% endif\n% if context.get('bw29')():\nself.${id}.set_bandwidth(${bw29}, 29)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source29}, uhd.ALL_LOS, 29)\nself.${id}.set_lo_export_enabled(${lo_export29}, uhd.ALL_LOS, 29)\n% endif\n% endif\n% if context.get('nchan')() > 30:\nself.${id}.set_center_freq(${center_freq30}, 30)\n% if bool(eval(context.get('norm_gain' + '30')())):\nself.${id}.set_normalized_gain(${gain30}, 30)\n% else:\nself.${id}.set_gain(${gain30}, 30)\n% endif\n% if context.get('ant30')():\nself.${id}.set_antenna(${ant30}, 30)\n% endif\n% if context.get('bw30')():\nself.${id}.set_bandwidth(${bw30}, 30)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source30}, uhd.ALL_LOS, 30)\nself.${id}.set_lo_export_enabled(${lo_export30}, uhd.ALL_LOS, 30)\n% endif\n% endif\n% if context.get('nchan')() > 31:\nself.${id}.set_center_freq(${center_freq31}, 31)\n% if bool(eval(context.get('norm_gain' + '31')())):\nself.${id}.set_normalized_gain(${gain31}, 31)\n% else:\nself.${id}.set_gain(${gain31}, 31)\n% endif\n% if context.get('ant31')():\nself.${id}.set_antenna(${ant31}, 31)\n% endif\n% if context.get('bw31')():\nself.${id}.set_bandwidth(${bw31}, 31)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source31}, uhd.ALL_LOS, 31)\nself.${id}.set_lo_export_enabled(${lo_export31}, uhd.ALL_LOS, 31)\n% endif\n% endif\n% if clock_rate():\nself.${id}.set_clock_rate(${clock_rate}, uhd.ALL_MBOARDS)\n% endif\nself.${id}.set_samp_rate(${samp_rate})\n% if sync == 'sync':\nself.${id}.set_time_unknown_pps(uhd.time_spec())\n% elif sync == 'pc_clock':\nself.${id}.set_time_now(uhd.time_spec(time.time()), uhd.ALL_MBOARDS)\n% else:\n# No synchronization enforced.\n% endif\n", "callbacks": ["set_samp_rate(${samp_rate})", "set_center_freq(${center_freq0}, 0)", "self.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain0')())) else ''}gain(${gain0}, 0)", "${'set_lo_source(' + lo_source0 + ', uhd.ALL_LOS, 0)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export0 + ', uhd.ALL_LOS, 0)' if show_lo_controls else ''}", "set_antenna(${ant0}, 0)", "set_bandwidth(${bw0}, 0)", "set_center_freq(${center_freq1}, 1)", "self.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain1')())) else ''}gain(${gain1}, 1)", "${'set_lo_source(' + lo_source1 + ', uhd.ALL_LOS, 1)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export1 + ', uhd.ALL_LOS, 1)' if show_lo_controls else ''}", "set_antenna(${ant1}, 1)", "set_bandwidth(${bw1}, 1)", "set_center_freq(${center_freq2}, 2)", "self.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain2')())) else ''}gain(${gain2}, 2)", "${'set_lo_source(' + lo_source2 + ', uhd.ALL_LOS, 2)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export2 + ', uhd.ALL_LOS, 2)' if show_lo_controls else ''}", "set_antenna(${ant2}, 2)", "set_bandwidth(${bw2}, 2)", "set_center_freq(${center_freq3}, 3)", "self.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain3')())) else ''}gain(${gain3}, 3)", "${'set_lo_source(' + lo_source3 + ', uhd.ALL_LOS, 3)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export3 + ', uhd.ALL_LOS, 3)' if show_lo_controls else ''}", "set_antenna(${ant3}, 3)", "set_bandwidth(${bw3}, 3)", "set_center_freq(${center_freq4}, 4)", "self.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain4')())) else ''}gain(${gain4}, 4)", "${'set_lo_source(' + lo_source4 + ', uhd.ALL_LOS, 4)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export4 + ', uhd.ALL_LOS, 4)' if show_lo_controls else ''}", "set_antenna(${ant4}, 4)", "set_bandwidth(${bw4}, 4)", "set_center_freq(${center_freq5}, 5)", "self.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain5')())) else ''}gain(${gain5}, 5)", "${'set_lo_source(' + lo_source5 + ', uhd.ALL_LOS, 5)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export5 + ', uhd.ALL_LOS, 5)' if show_lo_controls else ''}", "set_antenna(${ant5}, 5)", "set_bandwidth(${bw5}, 5)", "set_center_freq(${center_freq6}, 6)", "self.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain6')())) else ''}gain(${gain6}, 6)", "${'set_lo_source(' + lo_source6 + ', uhd.ALL_LOS, 6)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export6 + ', uhd.ALL_LOS, 6)' if show_lo_controls else ''}", "set_antenna(${ant6}, 6)", "set_bandwidth(${bw6}, 6)", "set_center_freq(${center_freq7}, 7)", "self.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain7')())) else ''}gain(${gain7}, 7)", "${'set_lo_source(' + lo_source7 + ', uhd.ALL_LOS, 7)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export7 + ', uhd.ALL_LOS, 7)' if show_lo_controls else ''}", "set_antenna(${ant7}, 7)", "set_bandwidth(${bw7}, 7)", "set_center_freq(${center_freq8}, 8)", "self.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain8')())) else ''}gain(${gain8}, 8)", "${'set_lo_source(' + lo_source8 + ', uhd.ALL_LOS, 8)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export8 + ', uhd.ALL_LOS, 8)' if show_lo_controls else ''}", "set_antenna(${ant8}, 8)", "set_bandwidth(${bw8}, 8)", "set_center_freq(${center_freq9}, 9)", "self.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain9')())) else ''}gain(${gain9}, 9)", "${'set_lo_source(' + lo_source9 + ', uhd.ALL_LOS, 9)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export9 + ', uhd.ALL_LOS, 9)' if show_lo_controls else ''}", "set_antenna(${ant9}, 9)", "set_bandwidth(${bw9}, 9)", "set_center_freq(${center_freq10}, 10)", "self.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain10')())) else ''}gain(${gain10}, 10)", "${'set_lo_source(' + lo_source10 + ', uhd.ALL_LOS, 10)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export10 + ', uhd.ALL_LOS, 10)' if show_lo_controls else ''}", "set_antenna(${ant10}, 10)", "set_bandwidth(${bw10}, 10)", "set_center_freq(${center_freq11}, 11)", "self.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain11')())) else ''}gain(${gain11}, 11)", "${'set_lo_source(' + lo_source11 + ', uhd.ALL_LOS, 11)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export11 + ', uhd.ALL_LOS, 11)' if show_lo_controls else ''}", "set_antenna(${ant11}, 11)", "set_bandwidth(${bw11}, 11)", "set_center_freq(${center_freq12}, 12)", "self.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain12')())) else ''}gain(${gain12}, 12)", "${'set_lo_source(' + lo_source12 + ', uhd.ALL_LOS, 12)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export12 + ', uhd.ALL_LOS, 12)' if show_lo_controls else ''}", "set_antenna(${ant12}, 12)", "set_bandwidth(${bw12}, 12)", "set_center_freq(${center_freq13}, 13)", "self.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain13')())) else ''}gain(${gain13}, 13)", "${'set_lo_source(' + lo_source13 + ', uhd.ALL_LOS, 13)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export13 + ', uhd.ALL_LOS, 13)' if show_lo_controls else ''}", "set_antenna(${ant13}, 13)", "set_bandwidth(${bw13}, 13)", "set_center_freq(${center_freq14}, 14)", "self.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain14')())) else ''}gain(${gain14}, 14)", "${'set_lo_source(' + lo_source14 + ', uhd.ALL_LOS, 14)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export14 + ', uhd.ALL_LOS, 14)' if show_lo_controls else ''}", "set_antenna(${ant14}, 14)", "set_bandwidth(${bw14}, 14)", "set_center_freq(${center_freq15}, 15)", "self.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain15')())) else ''}gain(${gain15}, 15)", "${'set_lo_source(' + lo_source15 + ', uhd.ALL_LOS, 15)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export15 + ', uhd.ALL_LOS, 15)' if show_lo_controls else ''}", "set_antenna(${ant15}, 15)", "set_bandwidth(${bw15}, 15)", "set_center_freq(${center_freq16}, 16)", "self.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain16')())) else ''}gain(${gain16}, 16)", "${'set_lo_source(' + lo_source16 + ', uhd.ALL_LOS, 16)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export16 + ', uhd.ALL_LOS, 16)' if show_lo_controls else ''}", "set_antenna(${ant16}, 16)", "set_bandwidth(${bw16}, 16)", "set_center_freq(${center_freq17}, 17)", "self.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain17')())) else ''}gain(${gain17}, 17)", "${'set_lo_source(' + lo_source17 + ', uhd.ALL_LOS, 17)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export17 + ', uhd.ALL_LOS, 17)' if show_lo_controls else ''}", "set_antenna(${ant17}, 17)", "set_bandwidth(${bw17}, 17)", "set_center_freq(${center_freq18}, 18)", "self.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain18')())) else ''}gain(${gain18}, 18)", "${'set_lo_source(' + lo_source18 + ', uhd.ALL_LOS, 18)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export18 + ', uhd.ALL_LOS, 18)' if show_lo_controls else ''}", "set_antenna(${ant18}, 18)", "set_bandwidth(${bw18}, 18)", "set_center_freq(${center_freq19}, 19)", "self.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain19')())) else ''}gain(${gain19}, 19)", "${'set_lo_source(' + lo_source19 + ', uhd.ALL_LOS, 19)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export19 + ', uhd.ALL_LOS, 19)' if show_lo_controls else ''}", "set_antenna(${ant19}, 19)", "set_bandwidth(${bw19}, 19)", "set_center_freq(${center_freq20}, 20)", "self.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain20')())) else ''}gain(${gain20}, 20)", "${'set_lo_source(' + lo_source20 + ', uhd.ALL_LOS, 20)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export20 + ', uhd.ALL_LOS, 20)' if show_lo_controls else ''}", "set_antenna(${ant20}, 20)", "set_bandwidth(${bw20}, 20)", "set_center_freq(${center_freq21}, 21)", "self.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain21')())) else ''}gain(${gain21}, 21)", "${'set_lo_source(' + lo_source21 + ', uhd.ALL_LOS, 21)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export21 + ', uhd.ALL_LOS, 21)' if show_lo_controls else ''}", "set_antenna(${ant21}, 21)", "set_bandwidth(${bw21}, 21)", "set_center_freq(${center_freq22}, 22)", "self.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain22')())) else ''}gain(${gain22}, 22)", "${'set_lo_source(' + lo_source22 + ', uhd.ALL_LOS, 22)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export22 + ', uhd.ALL_LOS, 22)' if show_lo_controls else ''}", "set_antenna(${ant22}, 22)", "set_bandwidth(${bw22}, 22)", "set_center_freq(${center_freq23}, 23)", "self.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain23')())) else ''}gain(${gain23}, 23)", "${'set_lo_source(' + lo_source23 + ', uhd.ALL_LOS, 23)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export23 + ', uhd.ALL_LOS, 23)' if show_lo_controls else ''}", "set_antenna(${ant23}, 23)", "set_bandwidth(${bw23}, 23)", "set_center_freq(${center_freq24}, 24)", "self.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain24')())) else ''}gain(${gain24}, 24)", "${'set_lo_source(' + lo_source24 + ', uhd.ALL_LOS, 24)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export24 + ', uhd.ALL_LOS, 24)' if show_lo_controls else ''}", "set_antenna(${ant24}, 24)", "set_bandwidth(${bw24}, 24)", "set_center_freq(${center_freq25}, 25)", "self.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain25')())) else ''}gain(${gain25}, 25)", "${'set_lo_source(' + lo_source25 + ', uhd.ALL_LOS, 25)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export25 + ', uhd.ALL_LOS, 25)' if show_lo_controls else ''}", "set_antenna(${ant25}, 25)", "set_bandwidth(${bw25}, 25)", "set_center_freq(${center_freq26}, 26)", "self.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain26')())) else ''}gain(${gain26}, 26)", "${'set_lo_source(' + lo_source26 + ', uhd.ALL_LOS, 26)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export26 + ', uhd.ALL_LOS, 26)' if show_lo_controls else ''}", "set_antenna(${ant26}, 26)", "set_bandwidth(${bw26}, 26)", "set_center_freq(${center_freq27}, 27)", "self.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain27')())) else ''}gain(${gain27}, 27)", "${'set_lo_source(' + lo_source27 + ', uhd.ALL_LOS, 27)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export27 + ', uhd.ALL_LOS, 27)' if show_lo_controls else ''}", "set_antenna(${ant27}, 27)", "set_bandwidth(${bw27}, 27)", "set_center_freq(${center_freq28}, 28)", "self.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain28')())) else ''}gain(${gain28}, 28)", "${'set_lo_source(' + lo_source28 + ', uhd.ALL_LOS, 28)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export28 + ', uhd.ALL_LOS, 28)' if show_lo_controls else ''}", "set_antenna(${ant28}, 28)", "set_bandwidth(${bw28}, 28)", "set_center_freq(${center_freq29}, 29)", "self.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain29')())) else ''}gain(${gain29}, 29)", "${'set_lo_source(' + lo_source29 + ', uhd.ALL_LOS, 29)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export29 + ', uhd.ALL_LOS, 29)' if show_lo_controls else ''}", "set_antenna(${ant29}, 29)", "set_bandwidth(${bw29}, 29)", "set_center_freq(${center_freq30}, 30)", "self.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain30')())) else ''}gain(${gain30}, 30)", "${'set_lo_source(' + lo_source30 + ', uhd.ALL_LOS, 30)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export30 + ', uhd.ALL_LOS, 30)' if show_lo_controls else ''}", "set_antenna(${ant30}, 30)", "set_bandwidth(${bw30}, 30)", "set_center_freq(${center_freq31}, 31)", "self.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain31')())) else ''}gain(${gain31}, 31)", "${'set_lo_source(' + lo_source31 + ', uhd.ALL_LOS, 31)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export31 + ', uhd.ALL_LOS, 31)' if show_lo_controls else ''}", "set_antenna(${ant31}, 31)", "set_bandwidth(${bw31}, 31)"]}, "documentation": "The UHD USRP Sink Block:\n\nDevice Address:\nThe device address is a delimited string used to locate UHD devices on your system.     If left blank, the first UHD device found will be used.     Use the device address to specify a specific device or list of devices.\nUSRP1 Example: serial=12345678\nUSRP2 Example: addr=192.168.10.2\nUSRP2 Example: addr0=192.168.10.2, addr1=192.168.10.3\n\nIn Type:\nThis parameter controls the data type of the stream in gnuradio.\n\nWire Format:\nThis parameter controls the form of the data over the bus/network.     Complex bytes may be used to trade off precision for bandwidth.     Not all formats are supported on all devices.\n\nStream Args:\nOptional arguments to be passed in the UHD streamer object.     Streamer args is a list of key/value pairs; usage is determined by the implementation.\nEx: the scalar key affects the scaling between 16 and 8 bit integers in sc8 wire format.\n\nNum Motherboards:\nSelects the number of USRP motherboards in this device configuration.\n\nReference Source:\nWhere the motherboard should sync its time and clock references.\nIf source and sink blocks reference the same device,\nit is only necessary to set the reference source on one of the blocks.\n\nSubdevice specification:\nEach motherboard should have its own subdevice specification     and all subdevice specifications should be the same length.     Select the subdevice or subdevices for each channel using a markup string.     The markup string consists of a list of dboard_slot:subdev_name pairs (one pair per channel).     If left blank, the UHD will try to select the first subdevice on your system.     See the application notes for further details.\nSingle channel example: :AB\nDual channel example: :A :B\n\nNum Channels:\nSelects the total number of channels in this multi-USRP configuration.\nEx: 4 motherboards with 2 channels per board = 8 channels total\n\nSample rate:\nThe sample rate is the number of samples per second input by this  block.     The UHD device driver will try its best to match the requested sample rate.     If the requested rate is not possible, the UHD block will print an error at runtime.\n\nCenter frequency:\nThe center frequency is the overall frequency of the RF chain.     For greater control of how the UHD tunes elements in the RF chain,     pass a tune_request object rather than a simple target frequency.\nTuning with an LO offset example: uhd.tune_request(freq, lo_off)\nTuning without DSP: uhd.tune_request(target_freq, dsp_freq=0,     dsp_freq_policy=uhd.tune_request.POLICY_MANUAL)\n\nAntenna:\nFor subdevices with only one antenna, this may be left blank.     Otherwise, the user should specify one of the possible antenna choices.     See the daughterboard application notes for the possible antenna choices.\n\nBandwidth:\nTo use the default bandwidth filter setting, this should be zero.     Only certain subdevices have configurable bandwidth filters.     See the daughterboard application notes for possible configurations.\n\nLength tag key (Sink only):\nWhen a nonempty string is given, the USRP sink will look for length tags     to determine transmit burst lengths.\n\nSee the UHD manual for more detailed documentation:\nhttp://uhd.ettus.com", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/uhd_usrp_source.block.yml": {"id": "uhd_usrp_source", "label": "UHD: USRP Source", "flags": "throttle", "parameters": [{"id": "type", "label": "Output Type", "dtype": "enum", "options": ["fc32", "sc16", "item32"], "option_labels": ["Complex float32", "Complex int16", "VITA word32"], "option_attributes": {"type": ["fc32", "sc16", "s32"]}, "hide": "part"}, {"id": "otw", "label": "Wire Format", "dtype": "enum", "options": ["", "sc16", "sc12", "sc8"], "option_labels": ["Automatic", "Complex int16", "Complex int12", "Complex int8"], "hide": "${ 'none' if otw else 'part'}"}, {"id": "stream_args", "label": "Stream args", "dtype": "string", "options": ["", "peak=0.003906"], "option_labels": ["", "peak=0.003906"], "hide": "${ 'none' if stream_args else 'part'}"}, {"id": "stream_chans", "label": "Stream channels", "dtype": "int_vector", "default": "[]", "hide": "${ 'none' if stream_chans else 'part'}"}, {"id": "dev_addr", "label": "Device Address", "dtype": "string", "default": "\"\"", "hide": "${ 'none' if dev_addr else 'part'}"}, {"id": "dev_args", "label": "Device Arguments", "dtype": "string", "default": "\"\"", "hide": "${ 'none' if dev_args else 'part'}"}, {"id": "sync", "label": "Sync", "dtype": "enum", "options": ["sync", "pc_clock", "none"], "option_labels": ["Unknown PPS", "PC Clock", "No Sync"], "hide": "${ 'none' if sync else 'part'}"}, {"id": "clock_rate", "label": "Clock Rate (Hz)", "dtype": "real", "default": "0e0", "options": ["0e0", "200e6", "184.32e6", "120e6", "30.72e6"], "option_labels": ["Default", "200 MHz", "184.32 MHz", "120 MHz", "30.72 MHz"], "hide": "${ 'none' if clock_rate else 'part' }"}, {"id": "num_mboards", "label": "Num Mboards", "dtype": "int", "default": 1, "options": [1, 2, 3, 4, 5, 6, 7, 8], "hide": "part"}, {"id": "clock_source0", "label": "Mb0: Clock Source", "dtype": "string", "options": ["", "internal", "external", "mimo", "gpsdo"], "option_labels": ["Default", "Internal", "External", "MIMO Cable", "O/B GPSDO"], "hide": "${ 'all' if not (num_mboards > 0) else ( 'none' if clock_source0 else 'part')}"}, {"id": "time_source0", "label": "Mb0: Time Source", "dtype": "string", "options": ["", "external", "mimo", "gpsdo"], "option_labels": ["Default", "External", "MIMO Cable", "O/B GPSDO"], "hide": "${ 'all' if not (num_mboards > 0) else ('none' if time_source0 else 'part')}"}, {"id": "sd_spec0", "label": "Mb0: Subdev Spec", "dtype": "string", "hide": "${ 'all' if not (num_mboards > 0) else ('none' if sd_spec0 else 'part')}"}, {"id": "clock_source1", "label": "Mb1: Clock Source", "dtype": "string", "options": ["", "internal", "external", "mimo", "gpsdo"], "option_labels": ["Default", "Internal", "External", "MIMO Cable", "O/B GPSDO"], "hide": "${ 'all' if not (num_mboards > 1) else ( 'none' if clock_source1 else 'part')}"}, {"id": "time_source1", "label": "Mb1: Time Source", "dtype": "string", "options": ["", "external", "mimo", "gpsdo"], "option_labels": ["Default", "External", "MIMO Cable", "O/B GPSDO"], "hide": "${ 'all' if not (num_mboards > 1) else ('none' if time_source1 else 'part')}"}, {"id": "sd_spec1", "label": "Mb1: Subdev Spec", "dtype": "string", "hide": "${ 'all' if not (num_mboards > 1) else ('none' if sd_spec1 else 'part')}"}, {"id": "clock_source2", "label": "Mb2: Clock Source", "dtype": "string", "options": ["", "internal", "external", "mimo", "gpsdo"], "option_labels": ["Default", "Internal", "External", "MIMO Cable", "O/B GPSDO"], "hide": "${ 'all' if not (num_mboards > 2) else ( 'none' if clock_source2 else 'part')}"}, {"id": "time_source2", "label": "Mb2: Time Source", "dtype": "string", "options": ["", "external", "mimo", "gpsdo"], "option_labels": ["Default", "External", "MIMO Cable", "O/B GPSDO"], "hide": "${ 'all' if not (num_mboards > 2) else ('none' if time_source2 else 'part')}"}, {"id": "sd_spec2", "label": "Mb2: Subdev Spec", "dtype": "string", "hide": "${ 'all' if not (num_mboards > 2) else ('none' if sd_spec2 else 'part')}"}, {"id": "clock_source3", "label": "Mb3: Clock Source", "dtype": "string", "options": ["", "internal", "external", "mimo", "gpsdo"], "option_labels": ["Default", "Internal", "External", "MIMO Cable", "O/B GPSDO"], "hide": "${ 'all' if not (num_mboards > 3) else ( 'none' if clock_source3 else 'part')}"}, {"id": "time_source3", "label": "Mb3: Time Source", "dtype": "string", "options": ["", "external", "mimo", "gpsdo"], "option_labels": ["Default", "External", "MIMO Cable", "O/B GPSDO"], "hide": "${ 'all' if not (num_mboards > 3) else ('none' if time_source3 else 'part')}"}, {"id": "sd_spec3", "label": "Mb3: Subdev Spec", "dtype": "string", "hide": "${ 'all' if not (num_mboards > 3) else ('none' if sd_spec3 else 'part')}"}, {"id": "clock_source4", "label": "Mb4: Clock Source", "dtype": "string", "options": ["", "internal", "external", "mimo", "gpsdo"], "option_labels": ["Default", "Internal", "External", "MIMO Cable", "O/B GPSDO"], "hide": "${ 'all' if not (num_mboards > 4) else ( 'none' if clock_source4 else 'part')}"}, {"id": "time_source4", "label": "Mb4: Time Source", "dtype": "string", "options": ["", "external", "mimo", "gpsdo"], "option_labels": ["Default", "External", "MIMO Cable", "O/B GPSDO"], "hide": "${ 'all' if not (num_mboards > 4) else ('none' if time_source4 else 'part')}"}, {"id": "sd_spec4", "label": "Mb4: Subdev Spec", "dtype": "string", "hide": "${ 'all' if not (num_mboards > 4) else ('none' if sd_spec4 else 'part')}"}, {"id": "clock_source5", "label": "Mb5: Clock Source", "dtype": "string", "options": ["", "internal", "external", "mimo", "gpsdo"], "option_labels": ["Default", "Internal", "External", "MIMO Cable", "O/B GPSDO"], "hide": "${ 'all' if not (num_mboards > 5) else ( 'none' if clock_source5 else 'part')}"}, {"id": "time_source5", "label": "Mb5: Time Source", "dtype": "string", "options": ["", "external", "mimo", "gpsdo"], "option_labels": ["Default", "External", "MIMO Cable", "O/B GPSDO"], "hide": "${ 'all' if not (num_mboards > 5) else ('none' if time_source5 else 'part')}"}, {"id": "sd_spec5", "label": "Mb5: Subdev Spec", "dtype": "string", "hide": "${ 'all' if not (num_mboards > 5) else ('none' if sd_spec5 else 'part')}"}, {"id": "clock_source6", "label": "Mb6: Clock Source", "dtype": "string", "options": ["", "internal", "external", "mimo", "gpsdo"], "option_labels": ["Default", "Internal", "External", "MIMO Cable", "O/B GPSDO"], "hide": "${ 'all' if not (num_mboards > 6) else ( 'none' if clock_source6 else 'part')}"}, {"id": "time_source6", "label": "Mb6: Time Source", "dtype": "string", "options": ["", "external", "mimo", "gpsdo"], "option_labels": ["Default", "External", "MIMO Cable", "O/B GPSDO"], "hide": "${ 'all' if not (num_mboards > 6) else ('none' if time_source6 else 'part')}"}, {"id": "sd_spec6", "label": "Mb6: Subdev Spec", "dtype": "string", "hide": "${ 'all' if not (num_mboards > 6) else ('none' if sd_spec6 else 'part')}"}, {"id": "clock_source7", "label": "Mb7: Clock Source", "dtype": "string", "options": ["", "internal", "external", "mimo", "gpsdo"], "option_labels": ["Default", "Internal", "External", "MIMO Cable", "O/B GPSDO"], "hide": "${ 'all' if not (num_mboards > 7) else ( 'none' if clock_source7 else 'part')}"}, {"id": "time_source7", "label": "Mb7: Time Source", "dtype": "string", "options": ["", "external", "mimo", "gpsdo"], "option_labels": ["Default", "External", "MIMO Cable", "O/B GPSDO"], "hide": "${ 'all' if not (num_mboards > 7) else ('none' if time_source7 else 'part')}"}, {"id": "sd_spec7", "label": "Mb7: Subdev Spec", "dtype": "string", "hide": "${ 'all' if not (num_mboards > 7) else ('none' if sd_spec7 else 'part')}"}, {"id": "nchan", "label": "Num Channels", "dtype": "int", "default": 1, "options": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "hide": "part"}, {"id": "samp_rate", "label": "Samp rate (Sps)", "dtype": "real", "default": "samp_rate"}, {"id": "center_freq0", "label": "Ch0: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 0) else 'all' }"}, {"id": "rx_agc0", "label": "Ch0: AGC", "category": "RF Options", "dtype": "string", "default": "Default", "options": ["Default", "Disabled", "Enabled"], "option_labels": ["Default", "Disabled", "Enabled"], "hide": "${ 'none' if (nchan > 0) else 'all' }"}, {"id": "gain0", "label": "Ch0: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 0 and rx_agc0 != 'Enabled' else 'all' }"}, {"id": "norm_gain0", "label": "Ch0: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 0 or rx_agc0 == 'Enabled' else ('none' if bool(eval('norm_gain' + str(0))) else 'part')}"}, {"id": "ant0", "label": "Ch0: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX", "RX2", "RX1"], "option_labels": ["TX/RX", "RX2", "RX1"], "default": "RX2", "hide": "${ 'all' if not nchan > 0 else ('none' if eval('ant' + str(0)) else 'part')}"}, {"id": "bw0", "label": "Ch0: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 0 else ('none' if eval('bw' + str(0)) else 'part')}"}, {"id": "lo_source0", "label": "Ch0: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 0 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export0", "label": "Ch0: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 0 else ('none' if show_lo_controls else 'all')}"}, {"id": "dc_offs_enb0", "label": "Ch0: Enable DC Offset Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 0 else 'part'}"}, {"id": "iq_imbal_enb0", "label": "Ch0: Enable IQ Imbalance Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 0 else 'part'}"}, {"id": "center_freq1", "label": "Ch1: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 1) else 'all' }"}, {"id": "rx_agc1", "label": "Ch1: AGC", "category": "RF Options", "dtype": "string", "default": "Default", "options": ["Default", "Disabled", "Enabled"], "option_labels": ["Default", "Disabled", "Enabled"], "hide": "${ 'none' if (nchan > 1) else 'all' }"}, {"id": "gain1", "label": "Ch1: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 1 and rx_agc1 != 'Enabled' else 'all' }"}, {"id": "norm_gain1", "label": "Ch1: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 1 or rx_agc1 == 'Enabled' else ('none' if bool(eval('norm_gain' + str(1))) else 'part')}"}, {"id": "ant1", "label": "Ch1: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX", "RX2", "RX1"], "option_labels": ["TX/RX", "RX2", "RX1"], "default": "RX2", "hide": "${ 'all' if not nchan > 1 else ('none' if eval('ant' + str(1)) else 'part')}"}, {"id": "bw1", "label": "Ch1: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 1 else ('none' if eval('bw' + str(1)) else 'part')}"}, {"id": "lo_source1", "label": "Ch1: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 1 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export1", "label": "Ch1: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 1 else ('none' if show_lo_controls else 'all')}"}, {"id": "dc_offs_enb1", "label": "Ch1: Enable DC Offset Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 1 else 'part'}"}, {"id": "iq_imbal_enb1", "label": "Ch1: Enable IQ Imbalance Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 1 else 'part'}"}, {"id": "center_freq2", "label": "Ch2: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 2) else 'all' }"}, {"id": "rx_agc2", "label": "Ch2: AGC", "category": "RF Options", "dtype": "string", "default": "Default", "options": ["Default", "Disabled", "Enabled"], "option_labels": ["Default", "Disabled", "Enabled"], "hide": "${ 'none' if (nchan > 2) else 'all' }"}, {"id": "gain2", "label": "Ch2: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 2 and rx_agc2 != 'Enabled' else 'all' }"}, {"id": "norm_gain2", "label": "Ch2: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 2 or rx_agc2 == 'Enabled' else ('none' if bool(eval('norm_gain' + str(2))) else 'part')}"}, {"id": "ant2", "label": "Ch2: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX", "RX2", "RX1"], "option_labels": ["TX/RX", "RX2", "RX1"], "default": "RX2", "hide": "${ 'all' if not nchan > 2 else ('none' if eval('ant' + str(2)) else 'part')}"}, {"id": "bw2", "label": "Ch2: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 2 else ('none' if eval('bw' + str(2)) else 'part')}"}, {"id": "lo_source2", "label": "Ch2: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 2 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export2", "label": "Ch2: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 2 else ('none' if show_lo_controls else 'all')}"}, {"id": "dc_offs_enb2", "label": "Ch2: Enable DC Offset Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 2 else 'part'}"}, {"id": "iq_imbal_enb2", "label": "Ch2: Enable IQ Imbalance Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 2 else 'part'}"}, {"id": "center_freq3", "label": "Ch3: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 3) else 'all' }"}, {"id": "rx_agc3", "label": "Ch3: AGC", "category": "RF Options", "dtype": "string", "default": "Default", "options": ["Default", "Disabled", "Enabled"], "option_labels": ["Default", "Disabled", "Enabled"], "hide": "${ 'none' if (nchan > 3) else 'all' }"}, {"id": "gain3", "label": "Ch3: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 3 and rx_agc3 != 'Enabled' else 'all' }"}, {"id": "norm_gain3", "label": "Ch3: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 3 or rx_agc3 == 'Enabled' else ('none' if bool(eval('norm_gain' + str(3))) else 'part')}"}, {"id": "ant3", "label": "Ch3: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX", "RX2", "RX1"], "option_labels": ["TX/RX", "RX2", "RX1"], "default": "RX2", "hide": "${ 'all' if not nchan > 3 else ('none' if eval('ant' + str(3)) else 'part')}"}, {"id": "bw3", "label": "Ch3: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 3 else ('none' if eval('bw' + str(3)) else 'part')}"}, {"id": "lo_source3", "label": "Ch3: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 3 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export3", "label": "Ch3: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 3 else ('none' if show_lo_controls else 'all')}"}, {"id": "dc_offs_enb3", "label": "Ch3: Enable DC Offset Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 3 else 'part'}"}, {"id": "iq_imbal_enb3", "label": "Ch3: Enable IQ Imbalance Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 3 else 'part'}"}, {"id": "center_freq4", "label": "Ch4: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 4) else 'all' }"}, {"id": "rx_agc4", "label": "Ch4: AGC", "category": "RF Options", "dtype": "string", "default": "Default", "options": ["Default", "Disabled", "Enabled"], "option_labels": ["Default", "Disabled", "Enabled"], "hide": "${ 'none' if (nchan > 4) else 'all' }"}, {"id": "gain4", "label": "Ch4: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 4 and rx_agc4 != 'Enabled' else 'all' }"}, {"id": "norm_gain4", "label": "Ch4: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 4 or rx_agc4 == 'Enabled' else ('none' if bool(eval('norm_gain' + str(4))) else 'part')}"}, {"id": "ant4", "label": "Ch4: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX", "RX2", "RX1"], "option_labels": ["TX/RX", "RX2", "RX1"], "default": "RX2", "hide": "${ 'all' if not nchan > 4 else ('none' if eval('ant' + str(4)) else 'part')}"}, {"id": "bw4", "label": "Ch4: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 4 else ('none' if eval('bw' + str(4)) else 'part')}"}, {"id": "lo_source4", "label": "Ch4: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 4 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export4", "label": "Ch4: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 4 else ('none' if show_lo_controls else 'all')}"}, {"id": "dc_offs_enb4", "label": "Ch4: Enable DC Offset Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 4 else 'part'}"}, {"id": "iq_imbal_enb4", "label": "Ch4: Enable IQ Imbalance Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 4 else 'part'}"}, {"id": "center_freq5", "label": "Ch5: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 5) else 'all' }"}, {"id": "rx_agc5", "label": "Ch5: AGC", "category": "RF Options", "dtype": "string", "default": "Default", "options": ["Default", "Disabled", "Enabled"], "option_labels": ["Default", "Disabled", "Enabled"], "hide": "${ 'none' if (nchan > 5) else 'all' }"}, {"id": "gain5", "label": "Ch5: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 5 and rx_agc5 != 'Enabled' else 'all' }"}, {"id": "norm_gain5", "label": "Ch5: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 5 or rx_agc5 == 'Enabled' else ('none' if bool(eval('norm_gain' + str(5))) else 'part')}"}, {"id": "ant5", "label": "Ch5: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX", "RX2", "RX1"], "option_labels": ["TX/RX", "RX2", "RX1"], "default": "RX2", "hide": "${ 'all' if not nchan > 5 else ('none' if eval('ant' + str(5)) else 'part')}"}, {"id": "bw5", "label": "Ch5: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 5 else ('none' if eval('bw' + str(5)) else 'part')}"}, {"id": "lo_source5", "label": "Ch5: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 5 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export5", "label": "Ch5: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 5 else ('none' if show_lo_controls else 'all')}"}, {"id": "dc_offs_enb5", "label": "Ch5: Enable DC Offset Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 5 else 'part'}"}, {"id": "iq_imbal_enb5", "label": "Ch5: Enable IQ Imbalance Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 5 else 'part'}"}, {"id": "center_freq6", "label": "Ch6: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 6) else 'all' }"}, {"id": "rx_agc6", "label": "Ch6: AGC", "category": "RF Options", "dtype": "string", "default": "Default", "options": ["Default", "Disabled", "Enabled"], "option_labels": ["Default", "Disabled", "Enabled"], "hide": "${ 'none' if (nchan > 6) else 'all' }"}, {"id": "gain6", "label": "Ch6: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 6 and rx_agc6 != 'Enabled' else 'all' }"}, {"id": "norm_gain6", "label": "Ch6: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 6 or rx_agc6 == 'Enabled' else ('none' if bool(eval('norm_gain' + str(6))) else 'part')}"}, {"id": "ant6", "label": "Ch6: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX", "RX2", "RX1"], "option_labels": ["TX/RX", "RX2", "RX1"], "default": "RX2", "hide": "${ 'all' if not nchan > 6 else ('none' if eval('ant' + str(6)) else 'part')}"}, {"id": "bw6", "label": "Ch6: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 6 else ('none' if eval('bw' + str(6)) else 'part')}"}, {"id": "lo_source6", "label": "Ch6: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 6 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export6", "label": "Ch6: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 6 else ('none' if show_lo_controls else 'all')}"}, {"id": "dc_offs_enb6", "label": "Ch6: Enable DC Offset Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 6 else 'part'}"}, {"id": "iq_imbal_enb6", "label": "Ch6: Enable IQ Imbalance Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 6 else 'part'}"}, {"id": "center_freq7", "label": "Ch7: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 7) else 'all' }"}, {"id": "rx_agc7", "label": "Ch7: AGC", "category": "RF Options", "dtype": "string", "default": "Default", "options": ["Default", "Disabled", "Enabled"], "option_labels": ["Default", "Disabled", "Enabled"], "hide": "${ 'none' if (nchan > 7) else 'all' }"}, {"id": "gain7", "label": "Ch7: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 7 and rx_agc7 != 'Enabled' else 'all' }"}, {"id": "norm_gain7", "label": "Ch7: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 7 or rx_agc7 == 'Enabled' else ('none' if bool(eval('norm_gain' + str(7))) else 'part')}"}, {"id": "ant7", "label": "Ch7: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX", "RX2", "RX1"], "option_labels": ["TX/RX", "RX2", "RX1"], "default": "RX2", "hide": "${ 'all' if not nchan > 7 else ('none' if eval('ant' + str(7)) else 'part')}"}, {"id": "bw7", "label": "Ch7: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 7 else ('none' if eval('bw' + str(7)) else 'part')}"}, {"id": "lo_source7", "label": "Ch7: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 7 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export7", "label": "Ch7: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 7 else ('none' if show_lo_controls else 'all')}"}, {"id": "dc_offs_enb7", "label": "Ch7: Enable DC Offset Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 7 else 'part'}"}, {"id": "iq_imbal_enb7", "label": "Ch7: Enable IQ Imbalance Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 7 else 'part'}"}, {"id": "center_freq8", "label": "Ch8: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 8) else 'all' }"}, {"id": "rx_agc8", "label": "Ch8: AGC", "category": "RF Options", "dtype": "string", "default": "Default", "options": ["Default", "Disabled", "Enabled"], "option_labels": ["Default", "Disabled", "Enabled"], "hide": "${ 'none' if (nchan > 8) else 'all' }"}, {"id": "gain8", "label": "Ch8: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 8 and rx_agc8 != 'Enabled' else 'all' }"}, {"id": "norm_gain8", "label": "Ch8: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 8 or rx_agc8 == 'Enabled' else ('none' if bool(eval('norm_gain' + str(8))) else 'part')}"}, {"id": "ant8", "label": "Ch8: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX", "RX2", "RX1"], "option_labels": ["TX/RX", "RX2", "RX1"], "default": "RX2", "hide": "${ 'all' if not nchan > 8 else ('none' if eval('ant' + str(8)) else 'part')}"}, {"id": "bw8", "label": "Ch8: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 8 else ('none' if eval('bw' + str(8)) else 'part')}"}, {"id": "lo_source8", "label": "Ch8: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 8 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export8", "label": "Ch8: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 8 else ('none' if show_lo_controls else 'all')}"}, {"id": "dc_offs_enb8", "label": "Ch8: Enable DC Offset Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 8 else 'part'}"}, {"id": "iq_imbal_enb8", "label": "Ch8: Enable IQ Imbalance Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 8 else 'part'}"}, {"id": "center_freq9", "label": "Ch9: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 9) else 'all' }"}, {"id": "rx_agc9", "label": "Ch9: AGC", "category": "RF Options", "dtype": "string", "default": "Default", "options": ["Default", "Disabled", "Enabled"], "option_labels": ["Default", "Disabled", "Enabled"], "hide": "${ 'none' if (nchan > 9) else 'all' }"}, {"id": "gain9", "label": "Ch9: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 9 and rx_agc9 != 'Enabled' else 'all' }"}, {"id": "norm_gain9", "label": "Ch9: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 9 or rx_agc9 == 'Enabled' else ('none' if bool(eval('norm_gain' + str(9))) else 'part')}"}, {"id": "ant9", "label": "Ch9: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX", "RX2", "RX1"], "option_labels": ["TX/RX", "RX2", "RX1"], "default": "RX2", "hide": "${ 'all' if not nchan > 9 else ('none' if eval('ant' + str(9)) else 'part')}"}, {"id": "bw9", "label": "Ch9: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 9 else ('none' if eval('bw' + str(9)) else 'part')}"}, {"id": "lo_source9", "label": "Ch9: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 9 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export9", "label": "Ch9: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 9 else ('none' if show_lo_controls else 'all')}"}, {"id": "dc_offs_enb9", "label": "Ch9: Enable DC Offset Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 9 else 'part'}"}, {"id": "iq_imbal_enb9", "label": "Ch9: Enable IQ Imbalance Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 9 else 'part'}"}, {"id": "center_freq10", "label": "Ch10: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 10) else 'all' }"}, {"id": "rx_agc10", "label": "Ch10: AGC", "category": "RF Options", "dtype": "string", "default": "Default", "options": ["Default", "Disabled", "Enabled"], "option_labels": ["Default", "Disabled", "Enabled"], "hide": "${ 'none' if (nchan > 10) else 'all' }"}, {"id": "gain10", "label": "Ch10: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 10 and rx_agc10 != 'Enabled' else 'all' }"}, {"id": "norm_gain10", "label": "Ch10: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 10 or rx_agc10 == 'Enabled' else ('none' if bool(eval('norm_gain' + str(10))) else 'part')}"}, {"id": "ant10", "label": "Ch10: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX", "RX2", "RX1"], "option_labels": ["TX/RX", "RX2", "RX1"], "default": "RX2", "hide": "${ 'all' if not nchan > 10 else ('none' if eval('ant' + str(10)) else 'part')}"}, {"id": "bw10", "label": "Ch10: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 10 else ('none' if eval('bw' + str(10)) else 'part')}"}, {"id": "lo_source10", "label": "Ch10: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 10 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export10", "label": "Ch10: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 10 else ('none' if show_lo_controls else 'all')}"}, {"id": "dc_offs_enb10", "label": "Ch10: Enable DC Offset Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 10 else 'part'}"}, {"id": "iq_imbal_enb10", "label": "Ch10: Enable IQ Imbalance Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 10 else 'part'}"}, {"id": "center_freq11", "label": "Ch11: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 11) else 'all' }"}, {"id": "rx_agc11", "label": "Ch11: AGC", "category": "RF Options", "dtype": "string", "default": "Default", "options": ["Default", "Disabled", "Enabled"], "option_labels": ["Default", "Disabled", "Enabled"], "hide": "${ 'none' if (nchan > 11) else 'all' }"}, {"id": "gain11", "label": "Ch11: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 11 and rx_agc11 != 'Enabled' else 'all' }"}, {"id": "norm_gain11", "label": "Ch11: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 11 or rx_agc11 == 'Enabled' else ('none' if bool(eval('norm_gain' + str(11))) else 'part')}"}, {"id": "ant11", "label": "Ch11: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX", "RX2", "RX1"], "option_labels": ["TX/RX", "RX2", "RX1"], "default": "RX2", "hide": "${ 'all' if not nchan > 11 else ('none' if eval('ant' + str(11)) else 'part')}"}, {"id": "bw11", "label": "Ch11: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 11 else ('none' if eval('bw' + str(11)) else 'part')}"}, {"id": "lo_source11", "label": "Ch11: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 11 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export11", "label": "Ch11: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 11 else ('none' if show_lo_controls else 'all')}"}, {"id": "dc_offs_enb11", "label": "Ch11: Enable DC Offset Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 11 else 'part'}"}, {"id": "iq_imbal_enb11", "label": "Ch11: Enable IQ Imbalance Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 11 else 'part'}"}, {"id": "center_freq12", "label": "Ch12: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 12) else 'all' }"}, {"id": "rx_agc12", "label": "Ch12: AGC", "category": "RF Options", "dtype": "string", "default": "Default", "options": ["Default", "Disabled", "Enabled"], "option_labels": ["Default", "Disabled", "Enabled"], "hide": "${ 'none' if (nchan > 12) else 'all' }"}, {"id": "gain12", "label": "Ch12: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 12 and rx_agc12 != 'Enabled' else 'all' }"}, {"id": "norm_gain12", "label": "Ch12: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 12 or rx_agc12 == 'Enabled' else ('none' if bool(eval('norm_gain' + str(12))) else 'part')}"}, {"id": "ant12", "label": "Ch12: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX", "RX2", "RX1"], "option_labels": ["TX/RX", "RX2", "RX1"], "default": "RX2", "hide": "${ 'all' if not nchan > 12 else ('none' if eval('ant' + str(12)) else 'part')}"}, {"id": "bw12", "label": "Ch12: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 12 else ('none' if eval('bw' + str(12)) else 'part')}"}, {"id": "lo_source12", "label": "Ch12: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 12 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export12", "label": "Ch12: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 12 else ('none' if show_lo_controls else 'all')}"}, {"id": "dc_offs_enb12", "label": "Ch12: Enable DC Offset Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 12 else 'part'}"}, {"id": "iq_imbal_enb12", "label": "Ch12: Enable IQ Imbalance Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 12 else 'part'}"}, {"id": "center_freq13", "label": "Ch13: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 13) else 'all' }"}, {"id": "rx_agc13", "label": "Ch13: AGC", "category": "RF Options", "dtype": "string", "default": "Default", "options": ["Default", "Disabled", "Enabled"], "option_labels": ["Default", "Disabled", "Enabled"], "hide": "${ 'none' if (nchan > 13) else 'all' }"}, {"id": "gain13", "label": "Ch13: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 13 and rx_agc13 != 'Enabled' else 'all' }"}, {"id": "norm_gain13", "label": "Ch13: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 13 or rx_agc13 == 'Enabled' else ('none' if bool(eval('norm_gain' + str(13))) else 'part')}"}, {"id": "ant13", "label": "Ch13: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX", "RX2", "RX1"], "option_labels": ["TX/RX", "RX2", "RX1"], "default": "RX2", "hide": "${ 'all' if not nchan > 13 else ('none' if eval('ant' + str(13)) else 'part')}"}, {"id": "bw13", "label": "Ch13: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 13 else ('none' if eval('bw' + str(13)) else 'part')}"}, {"id": "lo_source13", "label": "Ch13: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 13 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export13", "label": "Ch13: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 13 else ('none' if show_lo_controls else 'all')}"}, {"id": "dc_offs_enb13", "label": "Ch13: Enable DC Offset Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 13 else 'part'}"}, {"id": "iq_imbal_enb13", "label": "Ch13: Enable IQ Imbalance Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 13 else 'part'}"}, {"id": "center_freq14", "label": "Ch14: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 14) else 'all' }"}, {"id": "rx_agc14", "label": "Ch14: AGC", "category": "RF Options", "dtype": "string", "default": "Default", "options": ["Default", "Disabled", "Enabled"], "option_labels": ["Default", "Disabled", "Enabled"], "hide": "${ 'none' if (nchan > 14) else 'all' }"}, {"id": "gain14", "label": "Ch14: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 14 and rx_agc14 != 'Enabled' else 'all' }"}, {"id": "norm_gain14", "label": "Ch14: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 14 or rx_agc14 == 'Enabled' else ('none' if bool(eval('norm_gain' + str(14))) else 'part')}"}, {"id": "ant14", "label": "Ch14: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX", "RX2", "RX1"], "option_labels": ["TX/RX", "RX2", "RX1"], "default": "RX2", "hide": "${ 'all' if not nchan > 14 else ('none' if eval('ant' + str(14)) else 'part')}"}, {"id": "bw14", "label": "Ch14: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 14 else ('none' if eval('bw' + str(14)) else 'part')}"}, {"id": "lo_source14", "label": "Ch14: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 14 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export14", "label": "Ch14: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 14 else ('none' if show_lo_controls else 'all')}"}, {"id": "dc_offs_enb14", "label": "Ch14: Enable DC Offset Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 14 else 'part'}"}, {"id": "iq_imbal_enb14", "label": "Ch14: Enable IQ Imbalance Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 14 else 'part'}"}, {"id": "center_freq15", "label": "Ch15: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 15) else 'all' }"}, {"id": "rx_agc15", "label": "Ch15: AGC", "category": "RF Options", "dtype": "string", "default": "Default", "options": ["Default", "Disabled", "Enabled"], "option_labels": ["Default", "Disabled", "Enabled"], "hide": "${ 'none' if (nchan > 15) else 'all' }"}, {"id": "gain15", "label": "Ch15: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 15 and rx_agc15 != 'Enabled' else 'all' }"}, {"id": "norm_gain15", "label": "Ch15: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 15 or rx_agc15 == 'Enabled' else ('none' if bool(eval('norm_gain' + str(15))) else 'part')}"}, {"id": "ant15", "label": "Ch15: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX", "RX2", "RX1"], "option_labels": ["TX/RX", "RX2", "RX1"], "default": "RX2", "hide": "${ 'all' if not nchan > 15 else ('none' if eval('ant' + str(15)) else 'part')}"}, {"id": "bw15", "label": "Ch15: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 15 else ('none' if eval('bw' + str(15)) else 'part')}"}, {"id": "lo_source15", "label": "Ch15: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 15 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export15", "label": "Ch15: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 15 else ('none' if show_lo_controls else 'all')}"}, {"id": "dc_offs_enb15", "label": "Ch15: Enable DC Offset Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 15 else 'part'}"}, {"id": "iq_imbal_enb15", "label": "Ch15: Enable IQ Imbalance Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 15 else 'part'}"}, {"id": "center_freq16", "label": "Ch16: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 16) else 'all' }"}, {"id": "rx_agc16", "label": "Ch16: AGC", "category": "RF Options", "dtype": "string", "default": "Default", "options": ["Default", "Disabled", "Enabled"], "option_labels": ["Default", "Disabled", "Enabled"], "hide": "${ 'none' if (nchan > 16) else 'all' }"}, {"id": "gain16", "label": "Ch16: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 16 and rx_agc16 != 'Enabled' else 'all' }"}, {"id": "norm_gain16", "label": "Ch16: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 16 or rx_agc16 == 'Enabled' else ('none' if bool(eval('norm_gain' + str(16))) else 'part')}"}, {"id": "ant16", "label": "Ch16: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX", "RX2", "RX1"], "option_labels": ["TX/RX", "RX2", "RX1"], "default": "RX2", "hide": "${ 'all' if not nchan > 16 else ('none' if eval('ant' + str(16)) else 'part')}"}, {"id": "bw16", "label": "Ch16: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 16 else ('none' if eval('bw' + str(16)) else 'part')}"}, {"id": "lo_source16", "label": "Ch16: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 16 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export16", "label": "Ch16: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 16 else ('none' if show_lo_controls else 'all')}"}, {"id": "dc_offs_enb16", "label": "Ch16: Enable DC Offset Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 16 else 'part'}"}, {"id": "iq_imbal_enb16", "label": "Ch16: Enable IQ Imbalance Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 16 else 'part'}"}, {"id": "center_freq17", "label": "Ch17: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 17) else 'all' }"}, {"id": "rx_agc17", "label": "Ch17: AGC", "category": "RF Options", "dtype": "string", "default": "Default", "options": ["Default", "Disabled", "Enabled"], "option_labels": ["Default", "Disabled", "Enabled"], "hide": "${ 'none' if (nchan > 17) else 'all' }"}, {"id": "gain17", "label": "Ch17: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 17 and rx_agc17 != 'Enabled' else 'all' }"}, {"id": "norm_gain17", "label": "Ch17: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 17 or rx_agc17 == 'Enabled' else ('none' if bool(eval('norm_gain' + str(17))) else 'part')}"}, {"id": "ant17", "label": "Ch17: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX", "RX2", "RX1"], "option_labels": ["TX/RX", "RX2", "RX1"], "default": "RX2", "hide": "${ 'all' if not nchan > 17 else ('none' if eval('ant' + str(17)) else 'part')}"}, {"id": "bw17", "label": "Ch17: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 17 else ('none' if eval('bw' + str(17)) else 'part')}"}, {"id": "lo_source17", "label": "Ch17: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 17 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export17", "label": "Ch17: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 17 else ('none' if show_lo_controls else 'all')}"}, {"id": "dc_offs_enb17", "label": "Ch17: Enable DC Offset Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 17 else 'part'}"}, {"id": "iq_imbal_enb17", "label": "Ch17: Enable IQ Imbalance Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 17 else 'part'}"}, {"id": "center_freq18", "label": "Ch18: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 18) else 'all' }"}, {"id": "rx_agc18", "label": "Ch18: AGC", "category": "RF Options", "dtype": "string", "default": "Default", "options": ["Default", "Disabled", "Enabled"], "option_labels": ["Default", "Disabled", "Enabled"], "hide": "${ 'none' if (nchan > 18) else 'all' }"}, {"id": "gain18", "label": "Ch18: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 18 and rx_agc18 != 'Enabled' else 'all' }"}, {"id": "norm_gain18", "label": "Ch18: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 18 or rx_agc18 == 'Enabled' else ('none' if bool(eval('norm_gain' + str(18))) else 'part')}"}, {"id": "ant18", "label": "Ch18: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX", "RX2", "RX1"], "option_labels": ["TX/RX", "RX2", "RX1"], "default": "RX2", "hide": "${ 'all' if not nchan > 18 else ('none' if eval('ant' + str(18)) else 'part')}"}, {"id": "bw18", "label": "Ch18: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 18 else ('none' if eval('bw' + str(18)) else 'part')}"}, {"id": "lo_source18", "label": "Ch18: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 18 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export18", "label": "Ch18: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 18 else ('none' if show_lo_controls else 'all')}"}, {"id": "dc_offs_enb18", "label": "Ch18: Enable DC Offset Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 18 else 'part'}"}, {"id": "iq_imbal_enb18", "label": "Ch18: Enable IQ Imbalance Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 18 else 'part'}"}, {"id": "center_freq19", "label": "Ch19: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 19) else 'all' }"}, {"id": "rx_agc19", "label": "Ch19: AGC", "category": "RF Options", "dtype": "string", "default": "Default", "options": ["Default", "Disabled", "Enabled"], "option_labels": ["Default", "Disabled", "Enabled"], "hide": "${ 'none' if (nchan > 19) else 'all' }"}, {"id": "gain19", "label": "Ch19: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 19 and rx_agc19 != 'Enabled' else 'all' }"}, {"id": "norm_gain19", "label": "Ch19: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 19 or rx_agc19 == 'Enabled' else ('none' if bool(eval('norm_gain' + str(19))) else 'part')}"}, {"id": "ant19", "label": "Ch19: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX", "RX2", "RX1"], "option_labels": ["TX/RX", "RX2", "RX1"], "default": "RX2", "hide": "${ 'all' if not nchan > 19 else ('none' if eval('ant' + str(19)) else 'part')}"}, {"id": "bw19", "label": "Ch19: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 19 else ('none' if eval('bw' + str(19)) else 'part')}"}, {"id": "lo_source19", "label": "Ch19: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 19 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export19", "label": "Ch19: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 19 else ('none' if show_lo_controls else 'all')}"}, {"id": "dc_offs_enb19", "label": "Ch19: Enable DC Offset Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 19 else 'part'}"}, {"id": "iq_imbal_enb19", "label": "Ch19: Enable IQ Imbalance Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 19 else 'part'}"}, {"id": "center_freq20", "label": "Ch20: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 20) else 'all' }"}, {"id": "rx_agc20", "label": "Ch20: AGC", "category": "RF Options", "dtype": "string", "default": "Default", "options": ["Default", "Disabled", "Enabled"], "option_labels": ["Default", "Disabled", "Enabled"], "hide": "${ 'none' if (nchan > 20) else 'all' }"}, {"id": "gain20", "label": "Ch20: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 20 and rx_agc20 != 'Enabled' else 'all' }"}, {"id": "norm_gain20", "label": "Ch20: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 20 or rx_agc20 == 'Enabled' else ('none' if bool(eval('norm_gain' + str(20))) else 'part')}"}, {"id": "ant20", "label": "Ch20: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX", "RX2", "RX1"], "option_labels": ["TX/RX", "RX2", "RX1"], "default": "RX2", "hide": "${ 'all' if not nchan > 20 else ('none' if eval('ant' + str(20)) else 'part')}"}, {"id": "bw20", "label": "Ch20: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 20 else ('none' if eval('bw' + str(20)) else 'part')}"}, {"id": "lo_source20", "label": "Ch20: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 20 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export20", "label": "Ch20: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 20 else ('none' if show_lo_controls else 'all')}"}, {"id": "dc_offs_enb20", "label": "Ch20: Enable DC Offset Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 20 else 'part'}"}, {"id": "iq_imbal_enb20", "label": "Ch20: Enable IQ Imbalance Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 20 else 'part'}"}, {"id": "center_freq21", "label": "Ch21: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 21) else 'all' }"}, {"id": "rx_agc21", "label": "Ch21: AGC", "category": "RF Options", "dtype": "string", "default": "Default", "options": ["Default", "Disabled", "Enabled"], "option_labels": ["Default", "Disabled", "Enabled"], "hide": "${ 'none' if (nchan > 21) else 'all' }"}, {"id": "gain21", "label": "Ch21: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 21 and rx_agc21 != 'Enabled' else 'all' }"}, {"id": "norm_gain21", "label": "Ch21: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 21 or rx_agc21 == 'Enabled' else ('none' if bool(eval('norm_gain' + str(21))) else 'part')}"}, {"id": "ant21", "label": "Ch21: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX", "RX2", "RX1"], "option_labels": ["TX/RX", "RX2", "RX1"], "default": "RX2", "hide": "${ 'all' if not nchan > 21 else ('none' if eval('ant' + str(21)) else 'part')}"}, {"id": "bw21", "label": "Ch21: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 21 else ('none' if eval('bw' + str(21)) else 'part')}"}, {"id": "lo_source21", "label": "Ch21: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 21 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export21", "label": "Ch21: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 21 else ('none' if show_lo_controls else 'all')}"}, {"id": "dc_offs_enb21", "label": "Ch21: Enable DC Offset Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 21 else 'part'}"}, {"id": "iq_imbal_enb21", "label": "Ch21: Enable IQ Imbalance Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 21 else 'part'}"}, {"id": "center_freq22", "label": "Ch22: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 22) else 'all' }"}, {"id": "rx_agc22", "label": "Ch22: AGC", "category": "RF Options", "dtype": "string", "default": "Default", "options": ["Default", "Disabled", "Enabled"], "option_labels": ["Default", "Disabled", "Enabled"], "hide": "${ 'none' if (nchan > 22) else 'all' }"}, {"id": "gain22", "label": "Ch22: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 22 and rx_agc22 != 'Enabled' else 'all' }"}, {"id": "norm_gain22", "label": "Ch22: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 22 or rx_agc22 == 'Enabled' else ('none' if bool(eval('norm_gain' + str(22))) else 'part')}"}, {"id": "ant22", "label": "Ch22: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX", "RX2", "RX1"], "option_labels": ["TX/RX", "RX2", "RX1"], "default": "RX2", "hide": "${ 'all' if not nchan > 22 else ('none' if eval('ant' + str(22)) else 'part')}"}, {"id": "bw22", "label": "Ch22: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 22 else ('none' if eval('bw' + str(22)) else 'part')}"}, {"id": "lo_source22", "label": "Ch22: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 22 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export22", "label": "Ch22: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 22 else ('none' if show_lo_controls else 'all')}"}, {"id": "dc_offs_enb22", "label": "Ch22: Enable DC Offset Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 22 else 'part'}"}, {"id": "iq_imbal_enb22", "label": "Ch22: Enable IQ Imbalance Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 22 else 'part'}"}, {"id": "center_freq23", "label": "Ch23: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 23) else 'all' }"}, {"id": "rx_agc23", "label": "Ch23: AGC", "category": "RF Options", "dtype": "string", "default": "Default", "options": ["Default", "Disabled", "Enabled"], "option_labels": ["Default", "Disabled", "Enabled"], "hide": "${ 'none' if (nchan > 23) else 'all' }"}, {"id": "gain23", "label": "Ch23: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 23 and rx_agc23 != 'Enabled' else 'all' }"}, {"id": "norm_gain23", "label": "Ch23: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 23 or rx_agc23 == 'Enabled' else ('none' if bool(eval('norm_gain' + str(23))) else 'part')}"}, {"id": "ant23", "label": "Ch23: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX", "RX2", "RX1"], "option_labels": ["TX/RX", "RX2", "RX1"], "default": "RX2", "hide": "${ 'all' if not nchan > 23 else ('none' if eval('ant' + str(23)) else 'part')}"}, {"id": "bw23", "label": "Ch23: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 23 else ('none' if eval('bw' + str(23)) else 'part')}"}, {"id": "lo_source23", "label": "Ch23: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 23 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export23", "label": "Ch23: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 23 else ('none' if show_lo_controls else 'all')}"}, {"id": "dc_offs_enb23", "label": "Ch23: Enable DC Offset Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 23 else 'part'}"}, {"id": "iq_imbal_enb23", "label": "Ch23: Enable IQ Imbalance Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 23 else 'part'}"}, {"id": "center_freq24", "label": "Ch24: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 24) else 'all' }"}, {"id": "rx_agc24", "label": "Ch24: AGC", "category": "RF Options", "dtype": "string", "default": "Default", "options": ["Default", "Disabled", "Enabled"], "option_labels": ["Default", "Disabled", "Enabled"], "hide": "${ 'none' if (nchan > 24) else 'all' }"}, {"id": "gain24", "label": "Ch24: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 24 and rx_agc24 != 'Enabled' else 'all' }"}, {"id": "norm_gain24", "label": "Ch24: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 24 or rx_agc24 == 'Enabled' else ('none' if bool(eval('norm_gain' + str(24))) else 'part')}"}, {"id": "ant24", "label": "Ch24: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX", "RX2", "RX1"], "option_labels": ["TX/RX", "RX2", "RX1"], "default": "RX2", "hide": "${ 'all' if not nchan > 24 else ('none' if eval('ant' + str(24)) else 'part')}"}, {"id": "bw24", "label": "Ch24: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 24 else ('none' if eval('bw' + str(24)) else 'part')}"}, {"id": "lo_source24", "label": "Ch24: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 24 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export24", "label": "Ch24: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 24 else ('none' if show_lo_controls else 'all')}"}, {"id": "dc_offs_enb24", "label": "Ch24: Enable DC Offset Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 24 else 'part'}"}, {"id": "iq_imbal_enb24", "label": "Ch24: Enable IQ Imbalance Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 24 else 'part'}"}, {"id": "center_freq25", "label": "Ch25: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 25) else 'all' }"}, {"id": "rx_agc25", "label": "Ch25: AGC", "category": "RF Options", "dtype": "string", "default": "Default", "options": ["Default", "Disabled", "Enabled"], "option_labels": ["Default", "Disabled", "Enabled"], "hide": "${ 'none' if (nchan > 25) else 'all' }"}, {"id": "gain25", "label": "Ch25: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 25 and rx_agc25 != 'Enabled' else 'all' }"}, {"id": "norm_gain25", "label": "Ch25: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 25 or rx_agc25 == 'Enabled' else ('none' if bool(eval('norm_gain' + str(25))) else 'part')}"}, {"id": "ant25", "label": "Ch25: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX", "RX2", "RX1"], "option_labels": ["TX/RX", "RX2", "RX1"], "default": "RX2", "hide": "${ 'all' if not nchan > 25 else ('none' if eval('ant' + str(25)) else 'part')}"}, {"id": "bw25", "label": "Ch25: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 25 else ('none' if eval('bw' + str(25)) else 'part')}"}, {"id": "lo_source25", "label": "Ch25: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 25 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export25", "label": "Ch25: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 25 else ('none' if show_lo_controls else 'all')}"}, {"id": "dc_offs_enb25", "label": "Ch25: Enable DC Offset Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 25 else 'part'}"}, {"id": "iq_imbal_enb25", "label": "Ch25: Enable IQ Imbalance Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 25 else 'part'}"}, {"id": "center_freq26", "label": "Ch26: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 26) else 'all' }"}, {"id": "rx_agc26", "label": "Ch26: AGC", "category": "RF Options", "dtype": "string", "default": "Default", "options": ["Default", "Disabled", "Enabled"], "option_labels": ["Default", "Disabled", "Enabled"], "hide": "${ 'none' if (nchan > 26) else 'all' }"}, {"id": "gain26", "label": "Ch26: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 26 and rx_agc26 != 'Enabled' else 'all' }"}, {"id": "norm_gain26", "label": "Ch26: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 26 or rx_agc26 == 'Enabled' else ('none' if bool(eval('norm_gain' + str(26))) else 'part')}"}, {"id": "ant26", "label": "Ch26: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX", "RX2", "RX1"], "option_labels": ["TX/RX", "RX2", "RX1"], "default": "RX2", "hide": "${ 'all' if not nchan > 26 else ('none' if eval('ant' + str(26)) else 'part')}"}, {"id": "bw26", "label": "Ch26: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 26 else ('none' if eval('bw' + str(26)) else 'part')}"}, {"id": "lo_source26", "label": "Ch26: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 26 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export26", "label": "Ch26: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 26 else ('none' if show_lo_controls else 'all')}"}, {"id": "dc_offs_enb26", "label": "Ch26: Enable DC Offset Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 26 else 'part'}"}, {"id": "iq_imbal_enb26", "label": "Ch26: Enable IQ Imbalance Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 26 else 'part'}"}, {"id": "center_freq27", "label": "Ch27: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 27) else 'all' }"}, {"id": "rx_agc27", "label": "Ch27: AGC", "category": "RF Options", "dtype": "string", "default": "Default", "options": ["Default", "Disabled", "Enabled"], "option_labels": ["Default", "Disabled", "Enabled"], "hide": "${ 'none' if (nchan > 27) else 'all' }"}, {"id": "gain27", "label": "Ch27: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 27 and rx_agc27 != 'Enabled' else 'all' }"}, {"id": "norm_gain27", "label": "Ch27: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 27 or rx_agc27 == 'Enabled' else ('none' if bool(eval('norm_gain' + str(27))) else 'part')}"}, {"id": "ant27", "label": "Ch27: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX", "RX2", "RX1"], "option_labels": ["TX/RX", "RX2", "RX1"], "default": "RX2", "hide": "${ 'all' if not nchan > 27 else ('none' if eval('ant' + str(27)) else 'part')}"}, {"id": "bw27", "label": "Ch27: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 27 else ('none' if eval('bw' + str(27)) else 'part')}"}, {"id": "lo_source27", "label": "Ch27: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 27 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export27", "label": "Ch27: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 27 else ('none' if show_lo_controls else 'all')}"}, {"id": "dc_offs_enb27", "label": "Ch27: Enable DC Offset Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 27 else 'part'}"}, {"id": "iq_imbal_enb27", "label": "Ch27: Enable IQ Imbalance Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 27 else 'part'}"}, {"id": "center_freq28", "label": "Ch28: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 28) else 'all' }"}, {"id": "rx_agc28", "label": "Ch28: AGC", "category": "RF Options", "dtype": "string", "default": "Default", "options": ["Default", "Disabled", "Enabled"], "option_labels": ["Default", "Disabled", "Enabled"], "hide": "${ 'none' if (nchan > 28) else 'all' }"}, {"id": "gain28", "label": "Ch28: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 28 and rx_agc28 != 'Enabled' else 'all' }"}, {"id": "norm_gain28", "label": "Ch28: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 28 or rx_agc28 == 'Enabled' else ('none' if bool(eval('norm_gain' + str(28))) else 'part')}"}, {"id": "ant28", "label": "Ch28: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX", "RX2", "RX1"], "option_labels": ["TX/RX", "RX2", "RX1"], "default": "RX2", "hide": "${ 'all' if not nchan > 28 else ('none' if eval('ant' + str(28)) else 'part')}"}, {"id": "bw28", "label": "Ch28: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 28 else ('none' if eval('bw' + str(28)) else 'part')}"}, {"id": "lo_source28", "label": "Ch28: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 28 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export28", "label": "Ch28: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 28 else ('none' if show_lo_controls else 'all')}"}, {"id": "dc_offs_enb28", "label": "Ch28: Enable DC Offset Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 28 else 'part'}"}, {"id": "iq_imbal_enb28", "label": "Ch28: Enable IQ Imbalance Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 28 else 'part'}"}, {"id": "center_freq29", "label": "Ch29: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 29) else 'all' }"}, {"id": "rx_agc29", "label": "Ch29: AGC", "category": "RF Options", "dtype": "string", "default": "Default", "options": ["Default", "Disabled", "Enabled"], "option_labels": ["Default", "Disabled", "Enabled"], "hide": "${ 'none' if (nchan > 29) else 'all' }"}, {"id": "gain29", "label": "Ch29: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 29 and rx_agc29 != 'Enabled' else 'all' }"}, {"id": "norm_gain29", "label": "Ch29: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 29 or rx_agc29 == 'Enabled' else ('none' if bool(eval('norm_gain' + str(29))) else 'part')}"}, {"id": "ant29", "label": "Ch29: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX", "RX2", "RX1"], "option_labels": ["TX/RX", "RX2", "RX1"], "default": "RX2", "hide": "${ 'all' if not nchan > 29 else ('none' if eval('ant' + str(29)) else 'part')}"}, {"id": "bw29", "label": "Ch29: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 29 else ('none' if eval('bw' + str(29)) else 'part')}"}, {"id": "lo_source29", "label": "Ch29: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 29 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export29", "label": "Ch29: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 29 else ('none' if show_lo_controls else 'all')}"}, {"id": "dc_offs_enb29", "label": "Ch29: Enable DC Offset Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 29 else 'part'}"}, {"id": "iq_imbal_enb29", "label": "Ch29: Enable IQ Imbalance Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 29 else 'part'}"}, {"id": "center_freq30", "label": "Ch30: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 30) else 'all' }"}, {"id": "rx_agc30", "label": "Ch30: AGC", "category": "RF Options", "dtype": "string", "default": "Default", "options": ["Default", "Disabled", "Enabled"], "option_labels": ["Default", "Disabled", "Enabled"], "hide": "${ 'none' if (nchan > 30) else 'all' }"}, {"id": "gain30", "label": "Ch30: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 30 and rx_agc30 != 'Enabled' else 'all' }"}, {"id": "norm_gain30", "label": "Ch30: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 30 or rx_agc30 == 'Enabled' else ('none' if bool(eval('norm_gain' + str(30))) else 'part')}"}, {"id": "ant30", "label": "Ch30: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX", "RX2", "RX1"], "option_labels": ["TX/RX", "RX2", "RX1"], "default": "RX2", "hide": "${ 'all' if not nchan > 30 else ('none' if eval('ant' + str(30)) else 'part')}"}, {"id": "bw30", "label": "Ch30: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 30 else ('none' if eval('bw' + str(30)) else 'part')}"}, {"id": "lo_source30", "label": "Ch30: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 30 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export30", "label": "Ch30: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 30 else ('none' if show_lo_controls else 'all')}"}, {"id": "dc_offs_enb30", "label": "Ch30: Enable DC Offset Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 30 else 'part'}"}, {"id": "iq_imbal_enb30", "label": "Ch30: Enable IQ Imbalance Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 30 else 'part'}"}, {"id": "center_freq31", "label": "Ch31: Center Freq (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'none' if (nchan > 31) else 'all' }"}, {"id": "rx_agc31", "label": "Ch31: AGC", "category": "RF Options", "dtype": "string", "default": "Default", "options": ["Default", "Disabled", "Enabled"], "option_labels": ["Default", "Disabled", "Enabled"], "hide": "${ 'none' if (nchan > 31) else 'all' }"}, {"id": "gain31", "label": "Ch31: Gain Value", "category": "RF Options", "dtype": "float", "default": "0", "hide": "${ 'none' if nchan > 31 and rx_agc31 != 'Enabled' else 'all' }"}, {"id": "norm_gain31", "label": "Ch31: Gain Type", "category": "RF Options", "dtype": "string", "default": "False", "options": ["False", "True"], "option_labels": ["Absolute (dB)", "Normalized"], "hide": "${ 'all' if nchan <= 31 or rx_agc31 == 'Enabled' else ('none' if bool(eval('norm_gain' + str(31))) else 'part')}"}, {"id": "ant31", "label": "Ch31: Antenna", "category": "RF Options", "dtype": "string", "options": ["TX/RX", "RX2", "RX1"], "option_labels": ["TX/RX", "RX2", "RX1"], "default": "RX2", "hide": "${ 'all' if not nchan > 31 else ('none' if eval('ant' + str(31)) else 'part')}"}, {"id": "bw31", "label": "Ch31: Bandwidth (Hz)", "category": "RF Options", "dtype": "real", "default": "0", "hide": "${ 'all' if not nchan > 31 else ('none' if eval('bw' + str(31)) else 'part')}"}, {"id": "lo_source31", "label": "Ch31: LO Source", "category": "RF Options", "dtype": "string", "default": "internal", "options": ["internal", "external", "companion"], "hide": "${ 'all' if not nchan > 31 else ('none' if show_lo_controls else 'all')}"}, {"id": "lo_export31", "label": "Ch31: LO Export", "category": "RF Options", "dtype": "bool", "default": "False", "options": ["True", "False"], "hide": "${ 'all' if not nchan > 31 else ('none' if show_lo_controls else 'all')}"}, {"id": "dc_offs_enb31", "label": "Ch31: Enable DC Offset Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 31 else 'part'}"}, {"id": "iq_imbal_enb31", "label": "Ch31: Enable IQ Imbalance Correction", "category": "FE Corrections", "dtype": "raw", "default": "\"\"", "hide": "${ 'all' if not nchan > 31 else 'part'}"}, {"id": "show_lo_controls", "label": "Show LO Controls", "category": "Advanced", "dtype": "bool", "default": "False", "hide": "part"}], "inputs": [{"domain": "message", "id": "command", "optional": true}], "outputs": [{"domain": "stream", "dtype": "${type.type}", "multiplicity": "${nchan}"}], "templates": {"imports": "from gnuradio import uhd\nimport time", "make": "uhd.usrp_source(\n    \",\".join((${dev_addr}, ${dev_args})),\n    uhd.stream_args(\n        cpu_format=\"${type}\",\n        % if otw:\n        otw_format=\"${otw}\",\n        % endif\n        % if stream_args:\n        args=${stream_args},\n        % endif\n        % if eval(stream_chans):\n        channels=${stream_chans},\n        % else:\n        channels=list(range(0,${nchan})),\n        % endif\n    ),\n    % if len_tag_name:\n    ${len_tag_name},\n    % endif\n)\n% if context.get('num_mboards')() > 0:\n% if context.get('sd_spec0')():\nself.${id}.set_subdev_spec(${sd_spec0}, 0)\n% endif\n% if context.get('time_source0')():\nself.${id}.set_time_source(${time_source0}, 0)\n% endif\n% if context.get('clock_source0')():\nself.${id}.set_clock_source(${clock_source0}, 0)\n% endif\n% endif\n% if context.get('num_mboards')() > 1:\n% if context.get('sd_spec1')():\nself.${id}.set_subdev_spec(${sd_spec1}, 1)\n% endif\n% if context.get('time_source1')():\nself.${id}.set_time_source(${time_source1}, 1)\n% endif\n% if context.get('clock_source1')():\nself.${id}.set_clock_source(${clock_source1}, 1)\n% endif\n% endif\n% if context.get('num_mboards')() > 2:\n% if context.get('sd_spec2')():\nself.${id}.set_subdev_spec(${sd_spec2}, 2)\n% endif\n% if context.get('time_source2')():\nself.${id}.set_time_source(${time_source2}, 2)\n% endif\n% if context.get('clock_source2')():\nself.${id}.set_clock_source(${clock_source2}, 2)\n% endif\n% endif\n% if context.get('num_mboards')() > 3:\n% if context.get('sd_spec3')():\nself.${id}.set_subdev_spec(${sd_spec3}, 3)\n% endif\n% if context.get('time_source3')():\nself.${id}.set_time_source(${time_source3}, 3)\n% endif\n% if context.get('clock_source3')():\nself.${id}.set_clock_source(${clock_source3}, 3)\n% endif\n% endif\n% if context.get('num_mboards')() > 4:\n% if context.get('sd_spec4')():\nself.${id}.set_subdev_spec(${sd_spec4}, 4)\n% endif\n% if context.get('time_source4')():\nself.${id}.set_time_source(${time_source4}, 4)\n% endif\n% if context.get('clock_source4')():\nself.${id}.set_clock_source(${clock_source4}, 4)\n% endif\n% endif\n% if context.get('num_mboards')() > 5:\n% if context.get('sd_spec5')():\nself.${id}.set_subdev_spec(${sd_spec5}, 5)\n% endif\n% if context.get('time_source5')():\nself.${id}.set_time_source(${time_source5}, 5)\n% endif\n% if context.get('clock_source5')():\nself.${id}.set_clock_source(${clock_source5}, 5)\n% endif\n% endif\n% if context.get('num_mboards')() > 6:\n% if context.get('sd_spec6')():\nself.${id}.set_subdev_spec(${sd_spec6}, 6)\n% endif\n% if context.get('time_source6')():\nself.${id}.set_time_source(${time_source6}, 6)\n% endif\n% if context.get('clock_source6')():\nself.${id}.set_clock_source(${clock_source6}, 6)\n% endif\n% endif\n% if context.get('num_mboards')() > 7:\n% if context.get('sd_spec7')():\nself.${id}.set_subdev_spec(${sd_spec7}, 7)\n% endif\n% if context.get('time_source7')():\nself.${id}.set_time_source(${time_source7}, 7)\n% endif\n% if context.get('clock_source7')():\nself.${id}.set_clock_source(${clock_source7}, 7)\n% endif\n% endif\n% if context.get('nchan')() > 0:\nself.${id}.set_center_freq(${center_freq0}, 0)\n% if context.get('rx_agc0')() == 'Enabled':\nself.${id}.set_rx_agc(True, 0)\n% elif context.get('rx_agc0')() == 'Disabled':\nself.${id}.set_rx_agc(False, 0)\n% endif\n% if context.get('rx_agc0')() != 'Enabled':\n% if bool(eval(context.get('norm_gain' + '0')())):\nself.${id}.set_normalized_gain(${gain0}, 0)\n% else:\nself.${id}.set_gain(${gain0}, 0)\n% endif\n% endif\n% if context.get('ant0')():\nself.${id}.set_antenna(${ant0}, 0)\n% endif\n% if context.get('bw0')():\nself.${id}.set_bandwidth(${bw0}, 0)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source0}, uhd.ALL_LOS, 0)\nself.${id}.set_lo_export_enabled(${lo_export0}, uhd.ALL_LOS, 0)\n% endif\n% endif\n% if context.get('nchan')() > 1:\nself.${id}.set_center_freq(${center_freq1}, 1)\n% if context.get('rx_agc1')() == 'Enabled':\nself.${id}.set_rx_agc(True, 1)\n% elif context.get('rx_agc1')() == 'Disabled':\nself.${id}.set_rx_agc(False, 1)\n% endif\n% if context.get('rx_agc1')() != 'Enabled':\n% if bool(eval(context.get('norm_gain' + '1')())):\nself.${id}.set_normalized_gain(${gain1}, 1)\n% else:\nself.${id}.set_gain(${gain1}, 1)\n% endif\n% endif\n% if context.get('ant1')():\nself.${id}.set_antenna(${ant1}, 1)\n% endif\n% if context.get('bw1')():\nself.${id}.set_bandwidth(${bw1}, 1)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source1}, uhd.ALL_LOS, 1)\nself.${id}.set_lo_export_enabled(${lo_export1}, uhd.ALL_LOS, 1)\n% endif\n% endif\n% if context.get('nchan')() > 2:\nself.${id}.set_center_freq(${center_freq2}, 2)\n% if context.get('rx_agc2')() == 'Enabled':\nself.${id}.set_rx_agc(True, 2)\n% elif context.get('rx_agc2')() == 'Disabled':\nself.${id}.set_rx_agc(False, 2)\n% endif\n% if context.get('rx_agc2')() != 'Enabled':\n% if bool(eval(context.get('norm_gain' + '2')())):\nself.${id}.set_normalized_gain(${gain2}, 2)\n% else:\nself.${id}.set_gain(${gain2}, 2)\n% endif\n% endif\n% if context.get('ant2')():\nself.${id}.set_antenna(${ant2}, 2)\n% endif\n% if context.get('bw2')():\nself.${id}.set_bandwidth(${bw2}, 2)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source2}, uhd.ALL_LOS, 2)\nself.${id}.set_lo_export_enabled(${lo_export2}, uhd.ALL_LOS, 2)\n% endif\n% endif\n% if context.get('nchan')() > 3:\nself.${id}.set_center_freq(${center_freq3}, 3)\n% if context.get('rx_agc3')() == 'Enabled':\nself.${id}.set_rx_agc(True, 3)\n% elif context.get('rx_agc3')() == 'Disabled':\nself.${id}.set_rx_agc(False, 3)\n% endif\n% if context.get('rx_agc3')() != 'Enabled':\n% if bool(eval(context.get('norm_gain' + '3')())):\nself.${id}.set_normalized_gain(${gain3}, 3)\n% else:\nself.${id}.set_gain(${gain3}, 3)\n% endif\n% endif\n% if context.get('ant3')():\nself.${id}.set_antenna(${ant3}, 3)\n% endif\n% if context.get('bw3')():\nself.${id}.set_bandwidth(${bw3}, 3)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source3}, uhd.ALL_LOS, 3)\nself.${id}.set_lo_export_enabled(${lo_export3}, uhd.ALL_LOS, 3)\n% endif\n% endif\n% if context.get('nchan')() > 4:\nself.${id}.set_center_freq(${center_freq4}, 4)\n% if context.get('rx_agc4')() == 'Enabled':\nself.${id}.set_rx_agc(True, 4)\n% elif context.get('rx_agc4')() == 'Disabled':\nself.${id}.set_rx_agc(False, 4)\n% endif\n% if context.get('rx_agc4')() != 'Enabled':\n% if bool(eval(context.get('norm_gain' + '4')())):\nself.${id}.set_normalized_gain(${gain4}, 4)\n% else:\nself.${id}.set_gain(${gain4}, 4)\n% endif\n% endif\n% if context.get('ant4')():\nself.${id}.set_antenna(${ant4}, 4)\n% endif\n% if context.get('bw4')():\nself.${id}.set_bandwidth(${bw4}, 4)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source4}, uhd.ALL_LOS, 4)\nself.${id}.set_lo_export_enabled(${lo_export4}, uhd.ALL_LOS, 4)\n% endif\n% endif\n% if context.get('nchan')() > 5:\nself.${id}.set_center_freq(${center_freq5}, 5)\n% if context.get('rx_agc5')() == 'Enabled':\nself.${id}.set_rx_agc(True, 5)\n% elif context.get('rx_agc5')() == 'Disabled':\nself.${id}.set_rx_agc(False, 5)\n% endif\n% if context.get('rx_agc5')() != 'Enabled':\n% if bool(eval(context.get('norm_gain' + '5')())):\nself.${id}.set_normalized_gain(${gain5}, 5)\n% else:\nself.${id}.set_gain(${gain5}, 5)\n% endif\n% endif\n% if context.get('ant5')():\nself.${id}.set_antenna(${ant5}, 5)\n% endif\n% if context.get('bw5')():\nself.${id}.set_bandwidth(${bw5}, 5)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source5}, uhd.ALL_LOS, 5)\nself.${id}.set_lo_export_enabled(${lo_export5}, uhd.ALL_LOS, 5)\n% endif\n% endif\n% if context.get('nchan')() > 6:\nself.${id}.set_center_freq(${center_freq6}, 6)\n% if context.get('rx_agc6')() == 'Enabled':\nself.${id}.set_rx_agc(True, 6)\n% elif context.get('rx_agc6')() == 'Disabled':\nself.${id}.set_rx_agc(False, 6)\n% endif\n% if context.get('rx_agc6')() != 'Enabled':\n% if bool(eval(context.get('norm_gain' + '6')())):\nself.${id}.set_normalized_gain(${gain6}, 6)\n% else:\nself.${id}.set_gain(${gain6}, 6)\n% endif\n% endif\n% if context.get('ant6')():\nself.${id}.set_antenna(${ant6}, 6)\n% endif\n% if context.get('bw6')():\nself.${id}.set_bandwidth(${bw6}, 6)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source6}, uhd.ALL_LOS, 6)\nself.${id}.set_lo_export_enabled(${lo_export6}, uhd.ALL_LOS, 6)\n% endif\n% endif\n% if context.get('nchan')() > 7:\nself.${id}.set_center_freq(${center_freq7}, 7)\n% if context.get('rx_agc7')() == 'Enabled':\nself.${id}.set_rx_agc(True, 7)\n% elif context.get('rx_agc7')() == 'Disabled':\nself.${id}.set_rx_agc(False, 7)\n% endif\n% if context.get('rx_agc7')() != 'Enabled':\n% if bool(eval(context.get('norm_gain' + '7')())):\nself.${id}.set_normalized_gain(${gain7}, 7)\n% else:\nself.${id}.set_gain(${gain7}, 7)\n% endif\n% endif\n% if context.get('ant7')():\nself.${id}.set_antenna(${ant7}, 7)\n% endif\n% if context.get('bw7')():\nself.${id}.set_bandwidth(${bw7}, 7)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source7}, uhd.ALL_LOS, 7)\nself.${id}.set_lo_export_enabled(${lo_export7}, uhd.ALL_LOS, 7)\n% endif\n% endif\n% if context.get('nchan')() > 8:\nself.${id}.set_center_freq(${center_freq8}, 8)\n% if context.get('rx_agc8')() == 'Enabled':\nself.${id}.set_rx_agc(True, 8)\n% elif context.get('rx_agc8')() == 'Disabled':\nself.${id}.set_rx_agc(False, 8)\n% endif\n% if context.get('rx_agc8')() != 'Enabled':\n% if bool(eval(context.get('norm_gain' + '8')())):\nself.${id}.set_normalized_gain(${gain8}, 8)\n% else:\nself.${id}.set_gain(${gain8}, 8)\n% endif\n% endif\n% if context.get('ant8')():\nself.${id}.set_antenna(${ant8}, 8)\n% endif\n% if context.get('bw8')():\nself.${id}.set_bandwidth(${bw8}, 8)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source8}, uhd.ALL_LOS, 8)\nself.${id}.set_lo_export_enabled(${lo_export8}, uhd.ALL_LOS, 8)\n% endif\n% endif\n% if context.get('nchan')() > 9:\nself.${id}.set_center_freq(${center_freq9}, 9)\n% if context.get('rx_agc9')() == 'Enabled':\nself.${id}.set_rx_agc(True, 9)\n% elif context.get('rx_agc9')() == 'Disabled':\nself.${id}.set_rx_agc(False, 9)\n% endif\n% if context.get('rx_agc9')() != 'Enabled':\n% if bool(eval(context.get('norm_gain' + '9')())):\nself.${id}.set_normalized_gain(${gain9}, 9)\n% else:\nself.${id}.set_gain(${gain9}, 9)\n% endif\n% endif\n% if context.get('ant9')():\nself.${id}.set_antenna(${ant9}, 9)\n% endif\n% if context.get('bw9')():\nself.${id}.set_bandwidth(${bw9}, 9)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source9}, uhd.ALL_LOS, 9)\nself.${id}.set_lo_export_enabled(${lo_export9}, uhd.ALL_LOS, 9)\n% endif\n% endif\n% if context.get('nchan')() > 10:\nself.${id}.set_center_freq(${center_freq10}, 10)\n% if context.get('rx_agc10')() == 'Enabled':\nself.${id}.set_rx_agc(True, 10)\n% elif context.get('rx_agc10')() == 'Disabled':\nself.${id}.set_rx_agc(False, 10)\n% endif\n% if context.get('rx_agc10')() != 'Enabled':\n% if bool(eval(context.get('norm_gain' + '10')())):\nself.${id}.set_normalized_gain(${gain10}, 10)\n% else:\nself.${id}.set_gain(${gain10}, 10)\n% endif\n% endif\n% if context.get('ant10')():\nself.${id}.set_antenna(${ant10}, 10)\n% endif\n% if context.get('bw10')():\nself.${id}.set_bandwidth(${bw10}, 10)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source10}, uhd.ALL_LOS, 10)\nself.${id}.set_lo_export_enabled(${lo_export10}, uhd.ALL_LOS, 10)\n% endif\n% endif\n% if context.get('nchan')() > 11:\nself.${id}.set_center_freq(${center_freq11}, 11)\n% if context.get('rx_agc11')() == 'Enabled':\nself.${id}.set_rx_agc(True, 11)\n% elif context.get('rx_agc11')() == 'Disabled':\nself.${id}.set_rx_agc(False, 11)\n% endif\n% if context.get('rx_agc11')() != 'Enabled':\n% if bool(eval(context.get('norm_gain' + '11')())):\nself.${id}.set_normalized_gain(${gain11}, 11)\n% else:\nself.${id}.set_gain(${gain11}, 11)\n% endif\n% endif\n% if context.get('ant11')():\nself.${id}.set_antenna(${ant11}, 11)\n% endif\n% if context.get('bw11')():\nself.${id}.set_bandwidth(${bw11}, 11)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source11}, uhd.ALL_LOS, 11)\nself.${id}.set_lo_export_enabled(${lo_export11}, uhd.ALL_LOS, 11)\n% endif\n% endif\n% if context.get('nchan')() > 12:\nself.${id}.set_center_freq(${center_freq12}, 12)\n% if context.get('rx_agc12')() == 'Enabled':\nself.${id}.set_rx_agc(True, 12)\n% elif context.get('rx_agc12')() == 'Disabled':\nself.${id}.set_rx_agc(False, 12)\n% endif\n% if context.get('rx_agc12')() != 'Enabled':\n% if bool(eval(context.get('norm_gain' + '12')())):\nself.${id}.set_normalized_gain(${gain12}, 12)\n% else:\nself.${id}.set_gain(${gain12}, 12)\n% endif\n% endif\n% if context.get('ant12')():\nself.${id}.set_antenna(${ant12}, 12)\n% endif\n% if context.get('bw12')():\nself.${id}.set_bandwidth(${bw12}, 12)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source12}, uhd.ALL_LOS, 12)\nself.${id}.set_lo_export_enabled(${lo_export12}, uhd.ALL_LOS, 12)\n% endif\n% endif\n% if context.get('nchan')() > 13:\nself.${id}.set_center_freq(${center_freq13}, 13)\n% if context.get('rx_agc13')() == 'Enabled':\nself.${id}.set_rx_agc(True, 13)\n% elif context.get('rx_agc13')() == 'Disabled':\nself.${id}.set_rx_agc(False, 13)\n% endif\n% if context.get('rx_agc13')() != 'Enabled':\n% if bool(eval(context.get('norm_gain' + '13')())):\nself.${id}.set_normalized_gain(${gain13}, 13)\n% else:\nself.${id}.set_gain(${gain13}, 13)\n% endif\n% endif\n% if context.get('ant13')():\nself.${id}.set_antenna(${ant13}, 13)\n% endif\n% if context.get('bw13')():\nself.${id}.set_bandwidth(${bw13}, 13)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source13}, uhd.ALL_LOS, 13)\nself.${id}.set_lo_export_enabled(${lo_export13}, uhd.ALL_LOS, 13)\n% endif\n% endif\n% if context.get('nchan')() > 14:\nself.${id}.set_center_freq(${center_freq14}, 14)\n% if context.get('rx_agc14')() == 'Enabled':\nself.${id}.set_rx_agc(True, 14)\n% elif context.get('rx_agc14')() == 'Disabled':\nself.${id}.set_rx_agc(False, 14)\n% endif\n% if context.get('rx_agc14')() != 'Enabled':\n% if bool(eval(context.get('norm_gain' + '14')())):\nself.${id}.set_normalized_gain(${gain14}, 14)\n% else:\nself.${id}.set_gain(${gain14}, 14)\n% endif\n% endif\n% if context.get('ant14')():\nself.${id}.set_antenna(${ant14}, 14)\n% endif\n% if context.get('bw14')():\nself.${id}.set_bandwidth(${bw14}, 14)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source14}, uhd.ALL_LOS, 14)\nself.${id}.set_lo_export_enabled(${lo_export14}, uhd.ALL_LOS, 14)\n% endif\n% endif\n% if context.get('nchan')() > 15:\nself.${id}.set_center_freq(${center_freq15}, 15)\n% if context.get('rx_agc15')() == 'Enabled':\nself.${id}.set_rx_agc(True, 15)\n% elif context.get('rx_agc15')() == 'Disabled':\nself.${id}.set_rx_agc(False, 15)\n% endif\n% if context.get('rx_agc15')() != 'Enabled':\n% if bool(eval(context.get('norm_gain' + '15')())):\nself.${id}.set_normalized_gain(${gain15}, 15)\n% else:\nself.${id}.set_gain(${gain15}, 15)\n% endif\n% endif\n% if context.get('ant15')():\nself.${id}.set_antenna(${ant15}, 15)\n% endif\n% if context.get('bw15')():\nself.${id}.set_bandwidth(${bw15}, 15)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source15}, uhd.ALL_LOS, 15)\nself.${id}.set_lo_export_enabled(${lo_export15}, uhd.ALL_LOS, 15)\n% endif\n% endif\n% if context.get('nchan')() > 16:\nself.${id}.set_center_freq(${center_freq16}, 16)\n% if context.get('rx_agc16')() == 'Enabled':\nself.${id}.set_rx_agc(True, 16)\n% elif context.get('rx_agc16')() == 'Disabled':\nself.${id}.set_rx_agc(False, 16)\n% endif\n% if context.get('rx_agc16')() != 'Enabled':\n% if bool(eval(context.get('norm_gain' + '16')())):\nself.${id}.set_normalized_gain(${gain16}, 16)\n% else:\nself.${id}.set_gain(${gain16}, 16)\n% endif\n% endif\n% if context.get('ant16')():\nself.${id}.set_antenna(${ant16}, 16)\n% endif\n% if context.get('bw16')():\nself.${id}.set_bandwidth(${bw16}, 16)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source16}, uhd.ALL_LOS, 16)\nself.${id}.set_lo_export_enabled(${lo_export16}, uhd.ALL_LOS, 16)\n% endif\n% endif\n% if context.get('nchan')() > 17:\nself.${id}.set_center_freq(${center_freq17}, 17)\n% if context.get('rx_agc17')() == 'Enabled':\nself.${id}.set_rx_agc(True, 17)\n% elif context.get('rx_agc17')() == 'Disabled':\nself.${id}.set_rx_agc(False, 17)\n% endif\n% if context.get('rx_agc17')() != 'Enabled':\n% if bool(eval(context.get('norm_gain' + '17')())):\nself.${id}.set_normalized_gain(${gain17}, 17)\n% else:\nself.${id}.set_gain(${gain17}, 17)\n% endif\n% endif\n% if context.get('ant17')():\nself.${id}.set_antenna(${ant17}, 17)\n% endif\n% if context.get('bw17')():\nself.${id}.set_bandwidth(${bw17}, 17)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source17}, uhd.ALL_LOS, 17)\nself.${id}.set_lo_export_enabled(${lo_export17}, uhd.ALL_LOS, 17)\n% endif\n% endif\n% if context.get('nchan')() > 18:\nself.${id}.set_center_freq(${center_freq18}, 18)\n% if context.get('rx_agc18')() == 'Enabled':\nself.${id}.set_rx_agc(True, 18)\n% elif context.get('rx_agc18')() == 'Disabled':\nself.${id}.set_rx_agc(False, 18)\n% endif\n% if context.get('rx_agc18')() != 'Enabled':\n% if bool(eval(context.get('norm_gain' + '18')())):\nself.${id}.set_normalized_gain(${gain18}, 18)\n% else:\nself.${id}.set_gain(${gain18}, 18)\n% endif\n% endif\n% if context.get('ant18')():\nself.${id}.set_antenna(${ant18}, 18)\n% endif\n% if context.get('bw18')():\nself.${id}.set_bandwidth(${bw18}, 18)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source18}, uhd.ALL_LOS, 18)\nself.${id}.set_lo_export_enabled(${lo_export18}, uhd.ALL_LOS, 18)\n% endif\n% endif\n% if context.get('nchan')() > 19:\nself.${id}.set_center_freq(${center_freq19}, 19)\n% if context.get('rx_agc19')() == 'Enabled':\nself.${id}.set_rx_agc(True, 19)\n% elif context.get('rx_agc19')() == 'Disabled':\nself.${id}.set_rx_agc(False, 19)\n% endif\n% if context.get('rx_agc19')() != 'Enabled':\n% if bool(eval(context.get('norm_gain' + '19')())):\nself.${id}.set_normalized_gain(${gain19}, 19)\n% else:\nself.${id}.set_gain(${gain19}, 19)\n% endif\n% endif\n% if context.get('ant19')():\nself.${id}.set_antenna(${ant19}, 19)\n% endif\n% if context.get('bw19')():\nself.${id}.set_bandwidth(${bw19}, 19)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source19}, uhd.ALL_LOS, 19)\nself.${id}.set_lo_export_enabled(${lo_export19}, uhd.ALL_LOS, 19)\n% endif\n% endif\n% if context.get('nchan')() > 20:\nself.${id}.set_center_freq(${center_freq20}, 20)\n% if context.get('rx_agc20')() == 'Enabled':\nself.${id}.set_rx_agc(True, 20)\n% elif context.get('rx_agc20')() == 'Disabled':\nself.${id}.set_rx_agc(False, 20)\n% endif\n% if context.get('rx_agc20')() != 'Enabled':\n% if bool(eval(context.get('norm_gain' + '20')())):\nself.${id}.set_normalized_gain(${gain20}, 20)\n% else:\nself.${id}.set_gain(${gain20}, 20)\n% endif\n% endif\n% if context.get('ant20')():\nself.${id}.set_antenna(${ant20}, 20)\n% endif\n% if context.get('bw20')():\nself.${id}.set_bandwidth(${bw20}, 20)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source20}, uhd.ALL_LOS, 20)\nself.${id}.set_lo_export_enabled(${lo_export20}, uhd.ALL_LOS, 20)\n% endif\n% endif\n% if context.get('nchan')() > 21:\nself.${id}.set_center_freq(${center_freq21}, 21)\n% if context.get('rx_agc21')() == 'Enabled':\nself.${id}.set_rx_agc(True, 21)\n% elif context.get('rx_agc21')() == 'Disabled':\nself.${id}.set_rx_agc(False, 21)\n% endif\n% if context.get('rx_agc21')() != 'Enabled':\n% if bool(eval(context.get('norm_gain' + '21')())):\nself.${id}.set_normalized_gain(${gain21}, 21)\n% else:\nself.${id}.set_gain(${gain21}, 21)\n% endif\n% endif\n% if context.get('ant21')():\nself.${id}.set_antenna(${ant21}, 21)\n% endif\n% if context.get('bw21')():\nself.${id}.set_bandwidth(${bw21}, 21)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source21}, uhd.ALL_LOS, 21)\nself.${id}.set_lo_export_enabled(${lo_export21}, uhd.ALL_LOS, 21)\n% endif\n% endif\n% if context.get('nchan')() > 22:\nself.${id}.set_center_freq(${center_freq22}, 22)\n% if context.get('rx_agc22')() == 'Enabled':\nself.${id}.set_rx_agc(True, 22)\n% elif context.get('rx_agc22')() == 'Disabled':\nself.${id}.set_rx_agc(False, 22)\n% endif\n% if context.get('rx_agc22')() != 'Enabled':\n% if bool(eval(context.get('norm_gain' + '22')())):\nself.${id}.set_normalized_gain(${gain22}, 22)\n% else:\nself.${id}.set_gain(${gain22}, 22)\n% endif\n% endif\n% if context.get('ant22')():\nself.${id}.set_antenna(${ant22}, 22)\n% endif\n% if context.get('bw22')():\nself.${id}.set_bandwidth(${bw22}, 22)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source22}, uhd.ALL_LOS, 22)\nself.${id}.set_lo_export_enabled(${lo_export22}, uhd.ALL_LOS, 22)\n% endif\n% endif\n% if context.get('nchan')() > 23:\nself.${id}.set_center_freq(${center_freq23}, 23)\n% if context.get('rx_agc23')() == 'Enabled':\nself.${id}.set_rx_agc(True, 23)\n% elif context.get('rx_agc23')() == 'Disabled':\nself.${id}.set_rx_agc(False, 23)\n% endif\n% if context.get('rx_agc23')() != 'Enabled':\n% if bool(eval(context.get('norm_gain' + '23')())):\nself.${id}.set_normalized_gain(${gain23}, 23)\n% else:\nself.${id}.set_gain(${gain23}, 23)\n% endif\n% endif\n% if context.get('ant23')():\nself.${id}.set_antenna(${ant23}, 23)\n% endif\n% if context.get('bw23')():\nself.${id}.set_bandwidth(${bw23}, 23)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source23}, uhd.ALL_LOS, 23)\nself.${id}.set_lo_export_enabled(${lo_export23}, uhd.ALL_LOS, 23)\n% endif\n% endif\n% if context.get('nchan')() > 24:\nself.${id}.set_center_freq(${center_freq24}, 24)\n% if context.get('rx_agc24')() == 'Enabled':\nself.${id}.set_rx_agc(True, 24)\n% elif context.get('rx_agc24')() == 'Disabled':\nself.${id}.set_rx_agc(False, 24)\n% endif\n% if context.get('rx_agc24')() != 'Enabled':\n% if bool(eval(context.get('norm_gain' + '24')())):\nself.${id}.set_normalized_gain(${gain24}, 24)\n% else:\nself.${id}.set_gain(${gain24}, 24)\n% endif\n% endif\n% if context.get('ant24')():\nself.${id}.set_antenna(${ant24}, 24)\n% endif\n% if context.get('bw24')():\nself.${id}.set_bandwidth(${bw24}, 24)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source24}, uhd.ALL_LOS, 24)\nself.${id}.set_lo_export_enabled(${lo_export24}, uhd.ALL_LOS, 24)\n% endif\n% endif\n% if context.get('nchan')() > 25:\nself.${id}.set_center_freq(${center_freq25}, 25)\n% if context.get('rx_agc25')() == 'Enabled':\nself.${id}.set_rx_agc(True, 25)\n% elif context.get('rx_agc25')() == 'Disabled':\nself.${id}.set_rx_agc(False, 25)\n% endif\n% if context.get('rx_agc25')() != 'Enabled':\n% if bool(eval(context.get('norm_gain' + '25')())):\nself.${id}.set_normalized_gain(${gain25}, 25)\n% else:\nself.${id}.set_gain(${gain25}, 25)\n% endif\n% endif\n% if context.get('ant25')():\nself.${id}.set_antenna(${ant25}, 25)\n% endif\n% if context.get('bw25')():\nself.${id}.set_bandwidth(${bw25}, 25)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source25}, uhd.ALL_LOS, 25)\nself.${id}.set_lo_export_enabled(${lo_export25}, uhd.ALL_LOS, 25)\n% endif\n% endif\n% if context.get('nchan')() > 26:\nself.${id}.set_center_freq(${center_freq26}, 26)\n% if context.get('rx_agc26')() == 'Enabled':\nself.${id}.set_rx_agc(True, 26)\n% elif context.get('rx_agc26')() == 'Disabled':\nself.${id}.set_rx_agc(False, 26)\n% endif\n% if context.get('rx_agc26')() != 'Enabled':\n% if bool(eval(context.get('norm_gain' + '26')())):\nself.${id}.set_normalized_gain(${gain26}, 26)\n% else:\nself.${id}.set_gain(${gain26}, 26)\n% endif\n% endif\n% if context.get('ant26')():\nself.${id}.set_antenna(${ant26}, 26)\n% endif\n% if context.get('bw26')():\nself.${id}.set_bandwidth(${bw26}, 26)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source26}, uhd.ALL_LOS, 26)\nself.${id}.set_lo_export_enabled(${lo_export26}, uhd.ALL_LOS, 26)\n% endif\n% endif\n% if context.get('nchan')() > 27:\nself.${id}.set_center_freq(${center_freq27}, 27)\n% if context.get('rx_agc27')() == 'Enabled':\nself.${id}.set_rx_agc(True, 27)\n% elif context.get('rx_agc27')() == 'Disabled':\nself.${id}.set_rx_agc(False, 27)\n% endif\n% if context.get('rx_agc27')() != 'Enabled':\n% if bool(eval(context.get('norm_gain' + '27')())):\nself.${id}.set_normalized_gain(${gain27}, 27)\n% else:\nself.${id}.set_gain(${gain27}, 27)\n% endif\n% endif\n% if context.get('ant27')():\nself.${id}.set_antenna(${ant27}, 27)\n% endif\n% if context.get('bw27')():\nself.${id}.set_bandwidth(${bw27}, 27)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source27}, uhd.ALL_LOS, 27)\nself.${id}.set_lo_export_enabled(${lo_export27}, uhd.ALL_LOS, 27)\n% endif\n% endif\n% if context.get('nchan')() > 28:\nself.${id}.set_center_freq(${center_freq28}, 28)\n% if context.get('rx_agc28')() == 'Enabled':\nself.${id}.set_rx_agc(True, 28)\n% elif context.get('rx_agc28')() == 'Disabled':\nself.${id}.set_rx_agc(False, 28)\n% endif\n% if context.get('rx_agc28')() != 'Enabled':\n% if bool(eval(context.get('norm_gain' + '28')())):\nself.${id}.set_normalized_gain(${gain28}, 28)\n% else:\nself.${id}.set_gain(${gain28}, 28)\n% endif\n% endif\n% if context.get('ant28')():\nself.${id}.set_antenna(${ant28}, 28)\n% endif\n% if context.get('bw28')():\nself.${id}.set_bandwidth(${bw28}, 28)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source28}, uhd.ALL_LOS, 28)\nself.${id}.set_lo_export_enabled(${lo_export28}, uhd.ALL_LOS, 28)\n% endif\n% endif\n% if context.get('nchan')() > 29:\nself.${id}.set_center_freq(${center_freq29}, 29)\n% if context.get('rx_agc29')() == 'Enabled':\nself.${id}.set_rx_agc(True, 29)\n% elif context.get('rx_agc29')() == 'Disabled':\nself.${id}.set_rx_agc(False, 29)\n% endif\n% if context.get('rx_agc29')() != 'Enabled':\n% if bool(eval(context.get('norm_gain' + '29')())):\nself.${id}.set_normalized_gain(${gain29}, 29)\n% else:\nself.${id}.set_gain(${gain29}, 29)\n% endif\n% endif\n% if context.get('ant29')():\nself.${id}.set_antenna(${ant29}, 29)\n% endif\n% if context.get('bw29')():\nself.${id}.set_bandwidth(${bw29}, 29)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source29}, uhd.ALL_LOS, 29)\nself.${id}.set_lo_export_enabled(${lo_export29}, uhd.ALL_LOS, 29)\n% endif\n% endif\n% if context.get('nchan')() > 30:\nself.${id}.set_center_freq(${center_freq30}, 30)\n% if context.get('rx_agc30')() == 'Enabled':\nself.${id}.set_rx_agc(True, 30)\n% elif context.get('rx_agc30')() == 'Disabled':\nself.${id}.set_rx_agc(False, 30)\n% endif\n% if context.get('rx_agc30')() != 'Enabled':\n% if bool(eval(context.get('norm_gain' + '30')())):\nself.${id}.set_normalized_gain(${gain30}, 30)\n% else:\nself.${id}.set_gain(${gain30}, 30)\n% endif\n% endif\n% if context.get('ant30')():\nself.${id}.set_antenna(${ant30}, 30)\n% endif\n% if context.get('bw30')():\nself.${id}.set_bandwidth(${bw30}, 30)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source30}, uhd.ALL_LOS, 30)\nself.${id}.set_lo_export_enabled(${lo_export30}, uhd.ALL_LOS, 30)\n% endif\n% endif\n% if context.get('nchan')() > 31:\nself.${id}.set_center_freq(${center_freq31}, 31)\n% if context.get('rx_agc31')() == 'Enabled':\nself.${id}.set_rx_agc(True, 31)\n% elif context.get('rx_agc31')() == 'Disabled':\nself.${id}.set_rx_agc(False, 31)\n% endif\n% if context.get('rx_agc31')() != 'Enabled':\n% if bool(eval(context.get('norm_gain' + '31')())):\nself.${id}.set_normalized_gain(${gain31}, 31)\n% else:\nself.${id}.set_gain(${gain31}, 31)\n% endif\n% endif\n% if context.get('ant31')():\nself.${id}.set_antenna(${ant31}, 31)\n% endif\n% if context.get('bw31')():\nself.${id}.set_bandwidth(${bw31}, 31)\n% endif\n% if context.get('show_lo_controls')():\nself.${id}.set_lo_source(${lo_source31}, uhd.ALL_LOS, 31)\nself.${id}.set_lo_export_enabled(${lo_export31}, uhd.ALL_LOS, 31)\n% endif\n% endif\n% if clock_rate():\nself.${id}.set_clock_rate(${clock_rate}, uhd.ALL_MBOARDS)\n% endif\nself.${id}.set_samp_rate(${samp_rate})\n% if sync == 'sync':\nself.${id}.set_time_unknown_pps(uhd.time_spec())\n% elif sync == 'pc_clock':\nself.${id}.set_time_now(uhd.time_spec(time.time()), uhd.ALL_MBOARDS)\n% else:\n# No synchronization enforced.\n% endif\n", "callbacks": ["set_samp_rate(${samp_rate})", "set_center_freq(${center_freq0}, 0)", "${'set_rx_agc(True, 0)' if context.get('rx_agc0')() == 'Enabled' else ''}", "${'set_rx_agc(False, 0)' if context.get('rx_agc0')() == 'Disabled' else ''}", "% if context.get('rx_agc0')() != 'Enabled':\nself.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain0')())) else ''}gain(${gain0}, 0)\n% endif\n", "${'set_lo_source(' + lo_source0 + ', uhd.ALL_LOS, 0)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export0 + ', uhd.ALL_LOS, 0)' if show_lo_controls else ''}", "set_antenna(${ant0}, 0)", "set_bandwidth(${bw0}, 0)", "set_center_freq(${center_freq1}, 1)", "${'set_rx_agc(True, 1)' if context.get('rx_agc1')() == 'Enabled' else ''}", "${'set_rx_agc(False, 1)' if context.get('rx_agc1')() == 'Disabled' else ''}", "% if context.get('rx_agc1')() != 'Enabled':\nself.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain1')())) else ''}gain(${gain1}, 1)\n% endif\n", "${'set_lo_source(' + lo_source1 + ', uhd.ALL_LOS, 1)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export1 + ', uhd.ALL_LOS, 1)' if show_lo_controls else ''}", "set_antenna(${ant1}, 1)", "set_bandwidth(${bw1}, 1)", "set_center_freq(${center_freq2}, 2)", "${'set_rx_agc(True, 2)' if context.get('rx_agc2')() == 'Enabled' else ''}", "${'set_rx_agc(False, 2)' if context.get('rx_agc2')() == 'Disabled' else ''}", "% if context.get('rx_agc2')() != 'Enabled':\nself.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain2')())) else ''}gain(${gain2}, 2)\n% endif\n", "${'set_lo_source(' + lo_source2 + ', uhd.ALL_LOS, 2)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export2 + ', uhd.ALL_LOS, 2)' if show_lo_controls else ''}", "set_antenna(${ant2}, 2)", "set_bandwidth(${bw2}, 2)", "set_center_freq(${center_freq3}, 3)", "${'set_rx_agc(True, 3)' if context.get('rx_agc3')() == 'Enabled' else ''}", "${'set_rx_agc(False, 3)' if context.get('rx_agc3')() == 'Disabled' else ''}", "% if context.get('rx_agc3')() != 'Enabled':\nself.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain3')())) else ''}gain(${gain3}, 3)\n% endif\n", "${'set_lo_source(' + lo_source3 + ', uhd.ALL_LOS, 3)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export3 + ', uhd.ALL_LOS, 3)' if show_lo_controls else ''}", "set_antenna(${ant3}, 3)", "set_bandwidth(${bw3}, 3)", "set_center_freq(${center_freq4}, 4)", "${'set_rx_agc(True, 4)' if context.get('rx_agc4')() == 'Enabled' else ''}", "${'set_rx_agc(False, 4)' if context.get('rx_agc4')() == 'Disabled' else ''}", "% if context.get('rx_agc4')() != 'Enabled':\nself.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain4')())) else ''}gain(${gain4}, 4)\n% endif\n", "${'set_lo_source(' + lo_source4 + ', uhd.ALL_LOS, 4)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export4 + ', uhd.ALL_LOS, 4)' if show_lo_controls else ''}", "set_antenna(${ant4}, 4)", "set_bandwidth(${bw4}, 4)", "set_center_freq(${center_freq5}, 5)", "${'set_rx_agc(True, 5)' if context.get('rx_agc5')() == 'Enabled' else ''}", "${'set_rx_agc(False, 5)' if context.get('rx_agc5')() == 'Disabled' else ''}", "% if context.get('rx_agc5')() != 'Enabled':\nself.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain5')())) else ''}gain(${gain5}, 5)\n% endif\n", "${'set_lo_source(' + lo_source5 + ', uhd.ALL_LOS, 5)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export5 + ', uhd.ALL_LOS, 5)' if show_lo_controls else ''}", "set_antenna(${ant5}, 5)", "set_bandwidth(${bw5}, 5)", "set_center_freq(${center_freq6}, 6)", "${'set_rx_agc(True, 6)' if context.get('rx_agc6')() == 'Enabled' else ''}", "${'set_rx_agc(False, 6)' if context.get('rx_agc6')() == 'Disabled' else ''}", "% if context.get('rx_agc6')() != 'Enabled':\nself.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain6')())) else ''}gain(${gain6}, 6)\n% endif\n", "${'set_lo_source(' + lo_source6 + ', uhd.ALL_LOS, 6)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export6 + ', uhd.ALL_LOS, 6)' if show_lo_controls else ''}", "set_antenna(${ant6}, 6)", "set_bandwidth(${bw6}, 6)", "set_center_freq(${center_freq7}, 7)", "${'set_rx_agc(True, 7)' if context.get('rx_agc7')() == 'Enabled' else ''}", "${'set_rx_agc(False, 7)' if context.get('rx_agc7')() == 'Disabled' else ''}", "% if context.get('rx_agc7')() != 'Enabled':\nself.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain7')())) else ''}gain(${gain7}, 7)\n% endif\n", "${'set_lo_source(' + lo_source7 + ', uhd.ALL_LOS, 7)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export7 + ', uhd.ALL_LOS, 7)' if show_lo_controls else ''}", "set_antenna(${ant7}, 7)", "set_bandwidth(${bw7}, 7)", "set_center_freq(${center_freq8}, 8)", "${'set_rx_agc(True, 8)' if context.get('rx_agc8')() == 'Enabled' else ''}", "${'set_rx_agc(False, 8)' if context.get('rx_agc8')() == 'Disabled' else ''}", "% if context.get('rx_agc8')() != 'Enabled':\nself.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain8')())) else ''}gain(${gain8}, 8)\n% endif\n", "${'set_lo_source(' + lo_source8 + ', uhd.ALL_LOS, 8)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export8 + ', uhd.ALL_LOS, 8)' if show_lo_controls else ''}", "set_antenna(${ant8}, 8)", "set_bandwidth(${bw8}, 8)", "set_center_freq(${center_freq9}, 9)", "${'set_rx_agc(True, 9)' if context.get('rx_agc9')() == 'Enabled' else ''}", "${'set_rx_agc(False, 9)' if context.get('rx_agc9')() == 'Disabled' else ''}", "% if context.get('rx_agc9')() != 'Enabled':\nself.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain9')())) else ''}gain(${gain9}, 9)\n% endif\n", "${'set_lo_source(' + lo_source9 + ', uhd.ALL_LOS, 9)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export9 + ', uhd.ALL_LOS, 9)' if show_lo_controls else ''}", "set_antenna(${ant9}, 9)", "set_bandwidth(${bw9}, 9)", "set_center_freq(${center_freq10}, 10)", "${'set_rx_agc(True, 10)' if context.get('rx_agc10')() == 'Enabled' else ''}", "${'set_rx_agc(False, 10)' if context.get('rx_agc10')() == 'Disabled' else ''}", "% if context.get('rx_agc10')() != 'Enabled':\nself.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain10')())) else ''}gain(${gain10}, 10)\n% endif\n", "${'set_lo_source(' + lo_source10 + ', uhd.ALL_LOS, 10)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export10 + ', uhd.ALL_LOS, 10)' if show_lo_controls else ''}", "set_antenna(${ant10}, 10)", "set_bandwidth(${bw10}, 10)", "set_center_freq(${center_freq11}, 11)", "${'set_rx_agc(True, 11)' if context.get('rx_agc11')() == 'Enabled' else ''}", "${'set_rx_agc(False, 11)' if context.get('rx_agc11')() == 'Disabled' else ''}", "% if context.get('rx_agc11')() != 'Enabled':\nself.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain11')())) else ''}gain(${gain11}, 11)\n% endif\n", "${'set_lo_source(' + lo_source11 + ', uhd.ALL_LOS, 11)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export11 + ', uhd.ALL_LOS, 11)' if show_lo_controls else ''}", "set_antenna(${ant11}, 11)", "set_bandwidth(${bw11}, 11)", "set_center_freq(${center_freq12}, 12)", "${'set_rx_agc(True, 12)' if context.get('rx_agc12')() == 'Enabled' else ''}", "${'set_rx_agc(False, 12)' if context.get('rx_agc12')() == 'Disabled' else ''}", "% if context.get('rx_agc12')() != 'Enabled':\nself.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain12')())) else ''}gain(${gain12}, 12)\n% endif\n", "${'set_lo_source(' + lo_source12 + ', uhd.ALL_LOS, 12)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export12 + ', uhd.ALL_LOS, 12)' if show_lo_controls else ''}", "set_antenna(${ant12}, 12)", "set_bandwidth(${bw12}, 12)", "set_center_freq(${center_freq13}, 13)", "${'set_rx_agc(True, 13)' if context.get('rx_agc13')() == 'Enabled' else ''}", "${'set_rx_agc(False, 13)' if context.get('rx_agc13')() == 'Disabled' else ''}", "% if context.get('rx_agc13')() != 'Enabled':\nself.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain13')())) else ''}gain(${gain13}, 13)\n% endif\n", "${'set_lo_source(' + lo_source13 + ', uhd.ALL_LOS, 13)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export13 + ', uhd.ALL_LOS, 13)' if show_lo_controls else ''}", "set_antenna(${ant13}, 13)", "set_bandwidth(${bw13}, 13)", "set_center_freq(${center_freq14}, 14)", "${'set_rx_agc(True, 14)' if context.get('rx_agc14')() == 'Enabled' else ''}", "${'set_rx_agc(False, 14)' if context.get('rx_agc14')() == 'Disabled' else ''}", "% if context.get('rx_agc14')() != 'Enabled':\nself.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain14')())) else ''}gain(${gain14}, 14)\n% endif\n", "${'set_lo_source(' + lo_source14 + ', uhd.ALL_LOS, 14)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export14 + ', uhd.ALL_LOS, 14)' if show_lo_controls else ''}", "set_antenna(${ant14}, 14)", "set_bandwidth(${bw14}, 14)", "set_center_freq(${center_freq15}, 15)", "${'set_rx_agc(True, 15)' if context.get('rx_agc15')() == 'Enabled' else ''}", "${'set_rx_agc(False, 15)' if context.get('rx_agc15')() == 'Disabled' else ''}", "% if context.get('rx_agc15')() != 'Enabled':\nself.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain15')())) else ''}gain(${gain15}, 15)\n% endif\n", "${'set_lo_source(' + lo_source15 + ', uhd.ALL_LOS, 15)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export15 + ', uhd.ALL_LOS, 15)' if show_lo_controls else ''}", "set_antenna(${ant15}, 15)", "set_bandwidth(${bw15}, 15)", "set_center_freq(${center_freq16}, 16)", "${'set_rx_agc(True, 16)' if context.get('rx_agc16')() == 'Enabled' else ''}", "${'set_rx_agc(False, 16)' if context.get('rx_agc16')() == 'Disabled' else ''}", "% if context.get('rx_agc16')() != 'Enabled':\nself.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain16')())) else ''}gain(${gain16}, 16)\n% endif\n", "${'set_lo_source(' + lo_source16 + ', uhd.ALL_LOS, 16)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export16 + ', uhd.ALL_LOS, 16)' if show_lo_controls else ''}", "set_antenna(${ant16}, 16)", "set_bandwidth(${bw16}, 16)", "set_center_freq(${center_freq17}, 17)", "${'set_rx_agc(True, 17)' if context.get('rx_agc17')() == 'Enabled' else ''}", "${'set_rx_agc(False, 17)' if context.get('rx_agc17')() == 'Disabled' else ''}", "% if context.get('rx_agc17')() != 'Enabled':\nself.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain17')())) else ''}gain(${gain17}, 17)\n% endif\n", "${'set_lo_source(' + lo_source17 + ', uhd.ALL_LOS, 17)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export17 + ', uhd.ALL_LOS, 17)' if show_lo_controls else ''}", "set_antenna(${ant17}, 17)", "set_bandwidth(${bw17}, 17)", "set_center_freq(${center_freq18}, 18)", "${'set_rx_agc(True, 18)' if context.get('rx_agc18')() == 'Enabled' else ''}", "${'set_rx_agc(False, 18)' if context.get('rx_agc18')() == 'Disabled' else ''}", "% if context.get('rx_agc18')() != 'Enabled':\nself.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain18')())) else ''}gain(${gain18}, 18)\n% endif\n", "${'set_lo_source(' + lo_source18 + ', uhd.ALL_LOS, 18)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export18 + ', uhd.ALL_LOS, 18)' if show_lo_controls else ''}", "set_antenna(${ant18}, 18)", "set_bandwidth(${bw18}, 18)", "set_center_freq(${center_freq19}, 19)", "${'set_rx_agc(True, 19)' if context.get('rx_agc19')() == 'Enabled' else ''}", "${'set_rx_agc(False, 19)' if context.get('rx_agc19')() == 'Disabled' else ''}", "% if context.get('rx_agc19')() != 'Enabled':\nself.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain19')())) else ''}gain(${gain19}, 19)\n% endif\n", "${'set_lo_source(' + lo_source19 + ', uhd.ALL_LOS, 19)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export19 + ', uhd.ALL_LOS, 19)' if show_lo_controls else ''}", "set_antenna(${ant19}, 19)", "set_bandwidth(${bw19}, 19)", "set_center_freq(${center_freq20}, 20)", "${'set_rx_agc(True, 20)' if context.get('rx_agc20')() == 'Enabled' else ''}", "${'set_rx_agc(False, 20)' if context.get('rx_agc20')() == 'Disabled' else ''}", "% if context.get('rx_agc20')() != 'Enabled':\nself.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain20')())) else ''}gain(${gain20}, 20)\n% endif\n", "${'set_lo_source(' + lo_source20 + ', uhd.ALL_LOS, 20)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export20 + ', uhd.ALL_LOS, 20)' if show_lo_controls else ''}", "set_antenna(${ant20}, 20)", "set_bandwidth(${bw20}, 20)", "set_center_freq(${center_freq21}, 21)", "${'set_rx_agc(True, 21)' if context.get('rx_agc21')() == 'Enabled' else ''}", "${'set_rx_agc(False, 21)' if context.get('rx_agc21')() == 'Disabled' else ''}", "% if context.get('rx_agc21')() != 'Enabled':\nself.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain21')())) else ''}gain(${gain21}, 21)\n% endif\n", "${'set_lo_source(' + lo_source21 + ', uhd.ALL_LOS, 21)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export21 + ', uhd.ALL_LOS, 21)' if show_lo_controls else ''}", "set_antenna(${ant21}, 21)", "set_bandwidth(${bw21}, 21)", "set_center_freq(${center_freq22}, 22)", "${'set_rx_agc(True, 22)' if context.get('rx_agc22')() == 'Enabled' else ''}", "${'set_rx_agc(False, 22)' if context.get('rx_agc22')() == 'Disabled' else ''}", "% if context.get('rx_agc22')() != 'Enabled':\nself.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain22')())) else ''}gain(${gain22}, 22)\n% endif\n", "${'set_lo_source(' + lo_source22 + ', uhd.ALL_LOS, 22)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export22 + ', uhd.ALL_LOS, 22)' if show_lo_controls else ''}", "set_antenna(${ant22}, 22)", "set_bandwidth(${bw22}, 22)", "set_center_freq(${center_freq23}, 23)", "${'set_rx_agc(True, 23)' if context.get('rx_agc23')() == 'Enabled' else ''}", "${'set_rx_agc(False, 23)' if context.get('rx_agc23')() == 'Disabled' else ''}", "% if context.get('rx_agc23')() != 'Enabled':\nself.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain23')())) else ''}gain(${gain23}, 23)\n% endif\n", "${'set_lo_source(' + lo_source23 + ', uhd.ALL_LOS, 23)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export23 + ', uhd.ALL_LOS, 23)' if show_lo_controls else ''}", "set_antenna(${ant23}, 23)", "set_bandwidth(${bw23}, 23)", "set_center_freq(${center_freq24}, 24)", "${'set_rx_agc(True, 24)' if context.get('rx_agc24')() == 'Enabled' else ''}", "${'set_rx_agc(False, 24)' if context.get('rx_agc24')() == 'Disabled' else ''}", "% if context.get('rx_agc24')() != 'Enabled':\nself.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain24')())) else ''}gain(${gain24}, 24)\n% endif\n", "${'set_lo_source(' + lo_source24 + ', uhd.ALL_LOS, 24)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export24 + ', uhd.ALL_LOS, 24)' if show_lo_controls else ''}", "set_antenna(${ant24}, 24)", "set_bandwidth(${bw24}, 24)", "set_center_freq(${center_freq25}, 25)", "${'set_rx_agc(True, 25)' if context.get('rx_agc25')() == 'Enabled' else ''}", "${'set_rx_agc(False, 25)' if context.get('rx_agc25')() == 'Disabled' else ''}", "% if context.get('rx_agc25')() != 'Enabled':\nself.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain25')())) else ''}gain(${gain25}, 25)\n% endif\n", "${'set_lo_source(' + lo_source25 + ', uhd.ALL_LOS, 25)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export25 + ', uhd.ALL_LOS, 25)' if show_lo_controls else ''}", "set_antenna(${ant25}, 25)", "set_bandwidth(${bw25}, 25)", "set_center_freq(${center_freq26}, 26)", "${'set_rx_agc(True, 26)' if context.get('rx_agc26')() == 'Enabled' else ''}", "${'set_rx_agc(False, 26)' if context.get('rx_agc26')() == 'Disabled' else ''}", "% if context.get('rx_agc26')() != 'Enabled':\nself.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain26')())) else ''}gain(${gain26}, 26)\n% endif\n", "${'set_lo_source(' + lo_source26 + ', uhd.ALL_LOS, 26)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export26 + ', uhd.ALL_LOS, 26)' if show_lo_controls else ''}", "set_antenna(${ant26}, 26)", "set_bandwidth(${bw26}, 26)", "set_center_freq(${center_freq27}, 27)", "${'set_rx_agc(True, 27)' if context.get('rx_agc27')() == 'Enabled' else ''}", "${'set_rx_agc(False, 27)' if context.get('rx_agc27')() == 'Disabled' else ''}", "% if context.get('rx_agc27')() != 'Enabled':\nself.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain27')())) else ''}gain(${gain27}, 27)\n% endif\n", "${'set_lo_source(' + lo_source27 + ', uhd.ALL_LOS, 27)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export27 + ', uhd.ALL_LOS, 27)' if show_lo_controls else ''}", "set_antenna(${ant27}, 27)", "set_bandwidth(${bw27}, 27)", "set_center_freq(${center_freq28}, 28)", "${'set_rx_agc(True, 28)' if context.get('rx_agc28')() == 'Enabled' else ''}", "${'set_rx_agc(False, 28)' if context.get('rx_agc28')() == 'Disabled' else ''}", "% if context.get('rx_agc28')() != 'Enabled':\nself.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain28')())) else ''}gain(${gain28}, 28)\n% endif\n", "${'set_lo_source(' + lo_source28 + ', uhd.ALL_LOS, 28)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export28 + ', uhd.ALL_LOS, 28)' if show_lo_controls else ''}", "set_antenna(${ant28}, 28)", "set_bandwidth(${bw28}, 28)", "set_center_freq(${center_freq29}, 29)", "${'set_rx_agc(True, 29)' if context.get('rx_agc29')() == 'Enabled' else ''}", "${'set_rx_agc(False, 29)' if context.get('rx_agc29')() == 'Disabled' else ''}", "% if context.get('rx_agc29')() != 'Enabled':\nself.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain29')())) else ''}gain(${gain29}, 29)\n% endif\n", "${'set_lo_source(' + lo_source29 + ', uhd.ALL_LOS, 29)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export29 + ', uhd.ALL_LOS, 29)' if show_lo_controls else ''}", "set_antenna(${ant29}, 29)", "set_bandwidth(${bw29}, 29)", "set_center_freq(${center_freq30}, 30)", "${'set_rx_agc(True, 30)' if context.get('rx_agc30')() == 'Enabled' else ''}", "${'set_rx_agc(False, 30)' if context.get('rx_agc30')() == 'Disabled' else ''}", "% if context.get('rx_agc30')() != 'Enabled':\nself.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain30')())) else ''}gain(${gain30}, 30)\n% endif\n", "${'set_lo_source(' + lo_source30 + ', uhd.ALL_LOS, 30)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export30 + ', uhd.ALL_LOS, 30)' if show_lo_controls else ''}", "set_antenna(${ant30}, 30)", "set_bandwidth(${bw30}, 30)", "set_center_freq(${center_freq31}, 31)", "${'set_rx_agc(True, 31)' if context.get('rx_agc31')() == 'Enabled' else ''}", "${'set_rx_agc(False, 31)' if context.get('rx_agc31')() == 'Disabled' else ''}", "% if context.get('rx_agc31')() != 'Enabled':\nself.${id}.set_${'normalized_' if bool(eval(context.get('norm_gain31')())) else ''}gain(${gain31}, 31)\n% endif\n", "${'set_lo_source(' + lo_source31 + ', uhd.ALL_LOS, 31)' if show_lo_controls else ''}", "${'set_lo_export_enabled(' + lo_export31 + ', uhd.ALL_LOS, 31)' if show_lo_controls else ''}", "set_antenna(${ant31}, 31)", "set_bandwidth(${bw31}, 31)"]}, "documentation": "The UHD USRP Source Block:\n\nDevice Address:\nThe device address is a delimited string used to locate UHD devices on your system.     If left blank, the first UHD device found will be used.     Use the device address to specify a specific device or list of devices.\nUSRP1 Example: serial=12345678\nUSRP2 Example: addr=192.168.10.2\nUSRP2 Example: addr0=192.168.10.2, addr1=192.168.10.3\n\nOut Type:\nThis parameter controls the data type of the stream in gnuradio.\n\nWire Format:\nThis parameter controls the form of the data over the bus/network.     Complex bytes may be used to trade off precision for bandwidth.     Not all formats are supported on all devices.\n\nStream Args:\nOptional arguments to be passed in the UHD streamer object.     Streamer args is a list of key/value pairs; usage is determined by the implementation.\nEx: the scalar key affects the scaling between 16 and 8 bit integers in sc8 wire format.\n\nNum Motherboards:\nSelects the number of USRP motherboards in this device configuration.\n\nReference Source:\nWhere the motherboard should sync its time and clock references.\nIf source and sink blocks reference the same device,\nit is only necessary to set the reference source on one of the blocks.\n\nSubdevice specification:\nEach motherboard should have its own subdevice specification     and all subdevice specifications should be the same length.     Select the subdevice or subdevices for each channel using a markup string.     The markup string consists of a list of dboard_slot:subdev_name pairs (one pair per channel).     If left blank, the UHD will try to select the first subdevice on your system.     See the application notes for further details.\nSingle channel example: :AB\nDual channel example: :A :B\n\nNum Channels:\nSelects the total number of channels in this multi-USRP configuration.\nEx: 4 motherboards with 2 channels per board = 8 channels total\n\nSample rate:\nThe sample rate is the number of samples per second input by this  block.     The UHD device driver will try its best to match the requested sample rate.     If the requested rate is not possible, the UHD block will print an error at runtime.\n\nCenter frequency:\nThe center frequency is the overall frequency of the RF chain.     For greater control of how the UHD tunes elements in the RF chain,     pass a tune_request object rather than a simple target frequency.\nTuning with an LO offset example: uhd.tune_request(freq, lo_off)\nTuning without DSP: uhd.tune_request(target_freq, dsp_freq=0,     dsp_freq_policy=uhd.tune_request.POLICY_MANUAL)\n\nAntenna:\nFor subdevices with only one antenna, this may be left blank.     Otherwise, the user should specify one of the possible antenna choices.     See the daughterboard application notes for the possible antenna choices.\n\nBandwidth:\nTo use the default bandwidth filter setting, this should be zero.     Only certain subdevices have configurable bandwidth filters.     See the daughterboard application notes for possible configurations.\n\nLength tag key (Sink only):\nWhen a nonempty string is given, the USRP sink will look for length tags     to determine transmit burst lengths.\n\nSee the UHD manual for more detailed documentation:\nhttp://uhd.ettus.com", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/variable.block.yml": {"id": "variable", "label": "Variable", "flags": ["show_id", "python", "cpp"], "parameters": [{"id": "value", "label": "Value", "dtype": "raw", "default": "0"}], "value": "${ value }", "templates": {"var_make": "self.${id} = ${id} = ${value}", "callbacks": ["self.set_${id}(${value})"]}, "cpp_templates": {"var_make": "${id} = ${value};", "callbacks": ["this->set_${id}(${value})"]}, "documentation": "This block maps a value to a unique variable. This variable block has no graphical representation.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/variable_band_pass_filter_taps.block.yml": {"id": "variable_band_pass_filter_taps", "label": "Band-pass Filter Taps", "flags": ["show_id", "python", "cpp"], "parameters": [{"id": "type", "label": "Tap Type", "dtype": "enum", "options": ["band_pass", "complex_band_pass"], "option_labels": ["Real", "Complex"]}, {"id": "gain", "label": "Gain", "dtype": "float", "default": "1.0"}, {"id": "samp_rate", "label": "Sample Rate (Hz)", "dtype": "float", "default": "samp_rate"}, {"id": "low_cutoff_freq", "label": "Low Cutoff Freq (Hz)", "dtype": "float"}, {"id": "high_cutoff_freq", "label": "High Cutoff Freq (Hz)", "dtype": "float"}, {"id": "width", "label": "Transition Width (Hz)", "dtype": "float"}, {"id": "win", "label": "Window", "dtype": "int", "default": "firdes.WIN_HAMMING", "options": ["firdes.WIN_HAMMING", "firdes.WIN_HANN", "firdes.WIN_BLACKMAN", "firdes.WIN_RECTANGULAR", "firdes.WIN_KAISER"], "option_labels": ["Hamming", "Hann", "Blackman", "Rectangular", "Kaiser"]}, {"id": "beta", "label": "Beta", "dtype": "float", "default": "6.76"}], "value": "${ firdes.band_pass(gain, samp_rate, low_cutoff_freq, high_cutoff_freq, width,win, beta) }", "templates": {"imports": "from gnuradio.filter import firdes", "var_make": "self.${id} = ${id} = firdes.${type}(${gain}, ${samp_rate}, ${low_cutoff_freq}, \\\n${high_cutoff_freq}, ${width}, ${win}, ${beta})"}, "cpp_templates": {"includes": ["#include <gnuradio/filter/firdes.h>"], "declarations": "filter::firdes::sptr ${id};", "var_make": "this->${id} = ${id} = firdes.${type}(${gain}, ${samp_rate}, ${low_cutoff_freq}, \\\n${high_cutoff_freq}, ${width}, ${win}, ${beta});", "link": ["gnuradio-filter"]}, "documentation": "This is a convenience wrapper for calling firdes.band_pass() or firdes.complex_band_pass()\n\n    The beta parameter only applies to the Kaiser window.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/variable_band_reject_filter_taps.block.yml": {"id": "variable_band_reject_filter_taps", "label": "Band-reject Filter Taps", "flags": ["show_id", "python", "cpp"], "parameters": [{"id": "gain", "label": "Gain", "dtype": "float", "default": "1.0"}, {"id": "samp_rate", "label": "Sample Rate (Hz)", "dtype": "float", "default": "samp_rate"}, {"id": "low_cutoff_freq", "label": "Low Cutoff Freq (Hz)", "dtype": "float"}, {"id": "high_cutoff_freq", "label": "High Cutoff Freq (Hz)", "dtype": "float"}, {"id": "width", "label": "Transition Width (Hz)", "dtype": "float"}, {"id": "win", "label": "Window", "dtype": "int", "default": "firdes.WIN_HAMMING", "options": ["firdes.WIN_HAMMING", "firdes.WIN_HANN", "firdes.WIN_BLACKMAN", "firdes.WIN_RECTANGULAR", "firdes.WIN_KAISER"], "option_labels": ["Hamming", "Hann", "Blackman", "Rectangular", "Kaiser"]}, {"id": "beta", "label": "Beta", "dtype": "float", "default": "6.76"}], "value": "${ firdes.band_reject(gain, samp_rate, low_cutoff_freq, high_cutoff_freq, width, win, beta) }", "templates": {"imports": "from gnuradio.filter import firdes", "var_make": "self.${id} = ${id} = firdes.band_reject(${gain}, ${samp_rate}, ${low_cutoff_freq},\\\n${high_cutoff_freq}, ${width}, ${win}, ${beta})"}, "cpp_templates": {"includes": ["#include <gnuradio/filter/firdes.h>"], "declarations": "filter::firdes::sptr ${id};", "var_make": "this->${id} = ${id} = firdes.band_reject(${gain}, ${samp_rate}, ${low_cutoff_freq},\\\n${high_cutoff_freq}, ${width}, ${win}, ${beta});", "link": ["gnuradio-filter"]}, "documentation": "This is a convenience wrapper for calling firdes.band_reject().\n\n    The beta parameter only applies to the Kaiser window.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/variable_cc_decoder_def_list.block.yml": {"id": "variable_cc_decoder_def", "label": "CC Decoder Definition", "flags": ["show_id"], "parameters": [{"id": "value", "label": "Ignore Me", "dtype": "raw", "default": "\"ok\"", "hide": "all"}, {"id": "ndim", "label": "Parallelism", "dtype": "enum", "default": "0", "options": ["0", "1", "2"]}, {"id": "dim1", "label": "Dimension 1", "dtype": "int", "default": "1", "hide": "${ ('none' if (int(ndim) >= 1) else 'all') }"}, {"id": "dim2", "label": "Dimension 2", "dtype": "int", "default": "1", "hide": "${ ('none' if (int(ndim) >= 2) else 'all') }"}, {"id": "framebits", "label": "Frame Bits", "dtype": "int", "default": "2048"}, {"id": "k", "label": "Constraint Length (K)", "dtype": "int", "default": "7"}, {"id": "rate", "label": "Rate Inverse (1/R) (1/2) --> 2", "dtype": "int", "default": "2"}, {"id": "polys", "label": "Polynomials", "dtype": "int_vector", "default": "[79,109]"}, {"id": "state_start", "label": "Start State", "dtype": "int", "default": "0"}, {"id": "state_end", "label": "End State", "dtype": "int", "default": "-1"}, {"id": "mode", "label": "Streaming Behavior", "dtype": "raw", "options": ["fec.CC_STREAMING", "fec.CC_TERMINATED", "fec.CC_TAILBITING", "fec.CC_TRUNCATED"], "option_labels": ["Streaming", "Terminated", "Tailbiting", "Truncated"]}, {"id": "padding", "label": "Byte Padding", "dtype": "bool", "default": "False"}], "value": "${ fec.cc_decoder.make(framebits, k, rate, polys, state_start, state_end, mode, padding) }", "templates": {"imports": "from gnuradio import fec", "var_make": "% if int(ndim)==0:\nself.${id} = ${id} = fec.cc_decoder.make(${framebits},\\\n${k}, ${rate}, ${polys}, ${state_start}, ${state_end}, ${mode}, ${padding})\\\n% elif int(ndim)==1:\nself.${id} = ${id} = list(map( (lambda a: fec.cc_decoder.make(${framebits},\\\n${k}, ${rate}, ${polys}, ${state_start}, ${state_end}, ${mode}, ${padding})),\\\nrange(0,${dim1})))\n% else:\nself.${id} = ${id} = list(map( (lambda b: list(map(\\\n( lambda a: fec.cc_decoder.make(${framebits}, ${k}, ${rate}, ${polys}, ${state_start},\\\n${state_end}, ${mode}, ${padding})), range(0,${dim2}) ) ) ), range(0,${dim1})))\\\n% endif"}, "documentation": "", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/variable_cc_encoder_def_list.block.yml": {"id": "variable_cc_encoder_def", "label": "CC Encoder Definition", "flags": ["show_id"], "parameters": [{"id": "ndim", "label": "Parallelism", "dtype": "enum", "default": "0", "options": ["0", "1", "2"]}, {"id": "dim1", "label": "Dimension 1", "dtype": "int", "default": "1", "hide": "${ ('none' if (int(ndim) >= 1) else 'all') }"}, {"id": "dim2", "label": "Dimension 2", "dtype": "int", "default": "1", "hide": "${ ('none' if (int(ndim) >= 2) else 'all') }"}, {"id": "framebits", "label": "Frame Bits", "dtype": "int", "default": "2048"}, {"id": "k", "label": "Constraint Length (K)", "dtype": "int", "default": "7"}, {"id": "rate", "label": "Rate Inverse (1/R) (1/2) --> 2", "dtype": "int", "default": "2"}, {"id": "polys", "label": "Polynomials", "dtype": "int_vector", "default": "[79,109]"}, {"id": "state_start", "label": "Start State", "dtype": "int", "default": "0"}, {"id": "mode", "label": "Streaming Behavior", "dtype": "raw", "options": ["fec.CC_STREAMING", "fec.CC_TERMINATED", "fec.CC_TAILBITING", "fec.CC_TRUNCATED"], "option_labels": ["Streaming", "Terminated", "Tailbiting", "Truncated"]}, {"id": "padding", "label": "Byte Padding", "dtype": "bool", "default": "False"}], "value": "${ fec.cc_encoder_make(framebits, k, rate, polys, state_start, mode, padding) }", "templates": {"imports": "from gnuradio import fec", "var_make": "% if int(ndim)==0:\nself.${id} = ${id} = fec.cc_encoder_make(${framebits},\\\n${k}, ${rate}, ${polys}, ${state_start}, ${mode}, ${padding})\n% elif int(ndim)==1:\nself.${id} = ${id} = list(map( (lambda a: fec.cc_encoder_make(${framebits},\\\n${k}, ${rate}, ${polys}, ${state_start}, ${mode}, ${padding})), range(0,${dim1})))\n% else:\nself.${id} = ${id} = list(map( (lambda b:list(map( ( lambda a:fec.cc_encoder_make(${framebits}, ${k}, ${rate}, ${polys}, \\\n${state_start}, ${mode}, ${padding})), range(0,${dim2})))), range(0,${dim1})))\n% endif"}, "documentation": "", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/variable_ccsds_encoder_def_list.block.yml": {"id": "variable_ccsds_encoder_def", "label": "CCSDS Encoder Definition", "flags": ["show_id"], "parameters": [{"id": "ndim", "label": "Parallelism", "dtype": "enum", "default": "0", "options": ["0", "1", "2"]}, {"id": "dim1", "label": "Dimension 1", "dtype": "int", "default": "1", "hide": "${ ('none' if (int(ndim) >= 1) else 'all') }"}, {"id": "dim2", "label": "Dimension 2", "dtype": "int", "default": "1", "hide": "${ ('none' if (int(ndim) >= 2) else 'all') }"}, {"id": "framebits", "label": "Frame Bits", "dtype": "int", "default": "2048"}, {"id": "state_start", "label": "Start State", "dtype": "int", "default": "0"}, {"id": "mode", "label": "Streaming Behavior", "dtype": "int", "options": ["fec.CC_STREAMING", "fec.CC_TERMINATED", "fec.CC_TAILBITING", "fec.CC_TRUNCATED"], "option_labels": ["Streaming", "Terminated", "Tailbiting", "Truncated"]}], "value": "${ fec.ccsds_encoder_make(framebits, state_start, mode) }", "templates": {"imports": "from gnuradio import fec", "var_make": "% if int(ndim)==0:\nself.${id} = ${id} = fec.ccsds_encoder_make(${framebits},\\\n${state_start}, ${mode})\n% elif int(ndim)==1:\nself.${id} = ${id} = list(map(\\\n(lambda a: fec.ccsds_encoder_make(${framebits}, ${state_start}, ${mode})),\\\nrange(0,${dim1}) ))\n% else:\nself.${id} = ${id} = list(map( (lambda b: list( map(\\\n( lambda a: fec.ccsds_encoder_make(${framebits}, ${state_start}, ${mode})),\\\nrange(0,${dim2}) ) ) ), range(0,${dim1})))\n% endif"}, "documentation": "", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/variable_config.block.yml": {"id": "variable_config", "label": "Variable Config", "flags": ["show_id", "python"], "parameters": [{"id": "value", "label": "Default Value", "dtype": "${ type }", "default": "0"}, {"id": "type", "label": "Type", "dtype": "enum", "default": "real", "options": ["real", "int", "bool", "string"], "option_labels": ["Float", "Int", "Bool", "String"], "option_attributes": {"get": ["getfloat", "getint", "getboolean", "get"]}}, {"id": "config_file", "label": "Config File", "dtype": "file_open", "default": "default"}, {"id": "section", "label": "Section", "dtype": "string", "default": "main"}, {"id": "option", "label": "Option", "dtype": "string", "default": "key"}, {"id": "writeback", "label": "WriteBack", "dtype": "raw", "default": "None"}], "value": "${ value }", "templates": {"imports": "import ConfigParser", "var_make": "self._${id}_config = ConfigParser.ConfigParser()\nself._${id}_config.read(${config_file})\ntry: ${id} = self._${id}_config.${type.get}(${section}, ${option})\nexcept: ${id} = ${value}\nself.${id} = ${id}", "callbacks": ["self.set_${id}(${value})", "self._${id}_config = ConfigParser.ConfigParser()\nself._${id}_config.read(${config_file})\nif not self._${id}_config.has_section(${section}):\n\tself._${id}_config.add_section(${section})\nself._${id}_config.set(${section}, ${option}, str(${writeback}))\nself._${id}_config.write(open(${config_file}, 'w'))"]}, "documentation": "This block represents a variable that can be read from a config file.\n\nTo save the value back into the config file: enter the name of another variable into the writeback param. When the other variable is changed at runtime, the config file will be re-written.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/variable_dummy_decoder_def_list.block.yml": {"id": "variable_dummy_decoder_def", "label": "Dummy Decoder Definition", "flags": ["show_id"], "parameters": [{"id": "value", "label": "Ignore Me", "dtype": "raw", "default": "\"ok\"", "hide": "all"}, {"id": "ndim", "label": "Parallelism", "dtype": "enum", "options": ["0", "1", "2"]}, {"id": "dim1", "label": "Dimension 1", "dtype": "int", "default": "1", "hide": "${ ('none' if (int(ndim) >= 1) else 'all') }"}, {"id": "dim2", "label": "Dimension 2", "dtype": "int", "default": "1", "hide": "${ ('none' if (int(ndim) >= 2) else 'all') }"}, {"id": "framebits", "label": "Frame Bits", "dtype": "int", "default": "2048"}], "value": "${ fec.dummy_decoder.make(framebits) }", "templates": {"imports": "from gnuradio import fec", "var_make": "% if int(ndim)==0:\nself.${id} = ${id} = fec.dummy_decoder.make(${framebits}) \\\n% elif int(ndim)==1:\nself.${id} = ${id} = list(map((lambda a: fec.dummy_decoder.make(${framebits})),\\\nrange(0,${dim1})))\n% else:\nself.${id} = ${id} = list(map((lambda b: list(map((lambda \\\na: fec.dummy_decoder.make(${framebits})), range(0,${dim2})))), range(0,${dim1})))\\\n% endif"}, "documentation": "", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/variable_dummy_encoder_def_list.block.yml": {"id": "variable_dummy_encoder_def", "label": "Dummy Encoder Definition", "flags": ["show_id"], "parameters": [{"id": "ndim", "label": "Parallelism", "dtype": "enum", "default": "0", "options": ["0", "1", "2"]}, {"id": "dim1", "label": "Dimension 1", "dtype": "int", "default": "1", "hide": "${ ('none' if (int(ndim) >= 1) else 'all') }"}, {"id": "dim2", "label": "Dimension 2", "dtype": "int", "default": "1", "hide": "${ ('none' if (int(ndim) >= 2) else 'all') }"}, {"id": "framebits", "label": "Frame Bits", "dtype": "int", "default": "2048"}], "value": "${ fec.dummy_encoder_make(framebits) }", "templates": {"imports": "from gnuradio import fec", "var_make": "% if int(ndim)==0:\nself.${id} = ${id} = fec.dummy_encoder_make(${framebits})\\\n% elif int(ndim)==1:\nself.${id} = ${id} = list(map((lambda a:fec.dummy_encoder_make(${framebits})),\\\nrange(0,${dim1})))\n% else:\nself.${id} = ${id} = list(map((lambda b:list(map((lambda a: \\\nfec.dummy_encoder_make(${framebits})),\\\nrange(0,${dim2})))), range(0,${dim1})))\n% endif"}, "documentation": "", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/variable_function_probe.block.yml": {"id": "variable_function_probe", "label": "Function Probe", "flags": ["show_id", "python"], "parameters": [{"id": "block_id", "label": "Block ID", "dtype": "id", "default": "my_block_0"}, {"id": "function_name", "label": "Function Name", "dtype": "name", "default": "get_number"}, {"id": "function_args", "label": "Function Args", "dtype": "raw", "hide": "${ ('none' if function_args else 'part') }"}, {"id": "poll_rate", "label": "Poll Rate (Hz)", "dtype": "real", "default": "10"}, {"id": "value", "label": "Initial Value", "dtype": "raw", "default": "0", "hide": "part"}], "value": "${ value }", "templates": {"imports": "import time\nimport threading", "var_make": "self.${id} = ${id} = ${value}", "make": "\ndef _${id}_probe():\n    while True:\n        <% obj = 'self' + ('.' + block_id if block_id else '') %>\n        val = ${obj}.${function_name}(${function_args})\n        try:\n            self.set_${id}(val)\n        except AttributeError:\n            pass\n        time.sleep(1.0 / (${poll_rate}))\n_${id}_thread = threading.Thread(target=_${id}_probe)\n_${id}_thread.daemon = True\n_${id}_thread.start()\n    ", "callbacks": ["self.set_${id}(${value})"]}, "documentation": "Periodically probe a function and set its value to this variable.\n\nSet the values for block ID, function name, and function args appropriately: Block ID should be the ID of another block in this flow graph. An empty Block ID references the flow graph itself. Function name should be the name of a class method on that block. Function args are the parameters passed into that function. For a function with no arguments, leave function args blank. When passing a string for the function arguments, quote the string literal: '\"arg\"'.\n\nThe values will used literally, and generated into the following form:\n    self.block_id.function_name(function_args)\nor, if the Block ID is empty,\n    self.function_name(function_args)\n\nTo poll a stream for a level, use this with the probe signal block.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/variable_header_format_default.block.yml": {"id": "variable_header_format_default", "label": "Default Header Format Obj.", "flags": ["show_id", "python", "cpp"], "parameters": [{"id": "access_code", "label": "Access Code", "dtype": "string", "default": "0"}, {"id": "threshold", "label": "Threshold", "dtype": "int", "default": 0}, {"id": "bps", "label": "Payload Bits per Symbol", "dtype": "int", "default": 1}], "value": "${ digital.header_format_default(access_code, threshold, bps) }", "templates": {"imports": "from gnuradio import digital", "var_make": "% if int(eval(access_code))==0:\nself.${id} = ${id} = digital.header_format_default(digital.packet_utils.default_access_code,\\\n${threshold}, ${bps})\n% else:\nself.${id} = ${id} = digital.header_format_default(${access_code},\\\n${threshold}, ${bps})\n% endif"}, "cpp_templates": {"includes": ["#include <gnuradio/digital/header_format_default.h>"], "declarations": "digital::header_format_default::sptr ${id};", "var_make": "% if int(eval(access_code))==0:\nthis->${id} = ${id} = digital::header_format_default(digital.packet_utils.default_access_code,\\\n${threshold}, ${bps});\n% else:\nthis->${id} = ${id} = digital::header_format_default(${access_code},\\\n${threshold}, ${bps});\n% endif", "link": ["gnuradio-digital"]}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/variable_high_pass_filter_taps.block.yml": {"id": "variable_high_pass_filter_taps", "label": "High-pass Filter Taps", "flags": ["show_id", "python"], "parameters": [{"id": "gain", "label": "Gain", "dtype": "float", "default": "1.0"}, {"id": "samp_rate", "label": "Sample Rate (Hz)", "dtype": "float", "default": "samp_rate"}, {"id": "cutoff_freq", "label": "Cutoff Freq (Hz)", "dtype": "float"}, {"id": "width", "label": "Transition Width (Hz)", "dtype": "float"}, {"id": "win", "label": "Window", "dtype": "int", "default": "firdes.WIN_HAMMING", "options": ["firdes.WIN_HAMMING", "firdes.WIN_HANN", "firdes.WIN_BLACKMAN", "firdes.WIN_RECTANGULAR", "firdes.WIN_KAISER"], "option_labels": ["Hamming", "Hann", "Blackman", "Rectangular", "Kaiser"]}, {"id": "beta", "label": "Beta", "dtype": "float", "default": "6.76"}], "value": "${ firdes.high_pass(gain, samp_rate, cutoff_freq, width, win, beta) }", "templates": {"imports": "from gnuradio.filter import firdes", "var_make": "self.${id} = ${id} = firdes.high_pass(${gain}, ${samp_rate}, ${cutoff_freq},\\\n${width}, ${win}, ${beta})"}, "cpp_templates": {"includes": ["#include <gnuradio/filter/firdes.h>"], "declarations": "filter::firdes::sptr ${id};", "var_make": "this->${id} = ${id} = firdes.high_pass(${gain}, ${samp_rate}, ${cutoff_freq},\\\n${width}, ${win}, ${beta});", "link": ["gnuradio-filter"]}, "documentation": "This variable is a convenience wrapper around a call to firdes.high_pass(...).\n\n    The beta parameter only applies to the Kaiser window.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/variable_ldpc_G_matrix_object.block.yml": {"id": "variable_ldpc_G_matrix_def", "label": "LDPC Generator Matrix", "flags": ["show_id"], "parameters": [{"id": "value", "label": "Ignore Me", "dtype": "raw", "default": "\"ok\"", "hide": "all"}, {"id": "filename", "label": "File", "dtype": "file_open"}], "value": "${ value }", "templates": {"imports": "from gnuradio import fec", "var_make": "self.${id} = ${id} = fec.ldpc_G_matrix(${filename})"}, "documentation": "This block creates a LDPC Generator Matrix variable.\n\nThis variable can be used by:\n  1) LDPC Encoder Definition (via Generator) block\n  2) LDPC Bit Flip Decoder Definition block\n\nProvide an alist file, which contains a Generator matrix, G, in the standard format G = [I P], where I is an identity matrix and P is the parity submatrix.\n\nThe format of alist files is described at:\nhttp://www.inference.phy.cam.ac.uk/mackay/codes/alist.html", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/variable_ldpc_H_matrix_object.block.yml": {"id": "variable_ldpc_H_matrix_def", "label": "LDPC Parity Check Matrix", "flags": ["show_id"], "parameters": [{"id": "value", "label": "Ignore Me", "dtype": "raw", "default": "\"ok\"", "hide": "all"}, {"id": "filename", "label": "File", "dtype": "file_open"}, {"id": "gap", "label": "Gap", "dtype": "int"}], "value": "${ value }", "templates": {"imports": "from gnuradio import fec", "var_make": "self.${id} = ${id} = fec.ldpc_H_matrix(${filename}, ${gap})"}, "documentation": "This block creates a FEC LDPC Parity Check Matrix variable.\n\nThis variable can be used by:\n  1) LDPC Encoder Definition (via Parity Check) block\n  2) LDPC Bit Flip Decoder Definition block\n\nThe format of alist files is described at:\nhttp://www.inference.phy.cam.ac.uk/mackay/codes/alist.html\n\nThe specific format of this parity check matrix is described by Richardson and Urbanke in Appendix A of their book: Modern Coding Theory (ISBN 978-0-521-85229-6).\n\nAs an example, see the file {$target}/share/gnuradio/fec/ldpc/n_1800_k_0902_gap_28.alist, which is used by the FEC example flowgraph ber_curve_gen_ldpc.grc.\n\nThere is a small library of encoding-ready alist files at {$target}/share/gnuradio/fec/ldpc.\n\nTo convert a parity check matrix to the appropriate format required for this encoder, use the python functions in {$target}/lib/python2.7/dist-packages/gnuradio/fec/LDPC/Generate_LDPC_matrix.py.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/variable_ldpc_bit_flip_decoder.block.yml": {"id": "variable_ldpc_bit_flip_decoder_def", "label": "LDPC Bit Flip Decoder Definition", "flags": ["show_id"], "parameters": [{"id": "value", "label": "Ignore Me", "dtype": "raw", "default": "\"ok\"", "hide": "all"}, {"id": "ndim", "label": "Parallelism", "dtype": "enum", "options": ["0", "1", "2"]}, {"id": "dim1", "label": "Dimension 1", "dtype": "int", "default": "1", "hide": "${ ('none' if (int(ndim) >= 1) else 'all') }"}, {"id": "dim2", "label": "Dimension 2", "dtype": "int", "default": "1", "hide": "${ ('none' if (int(ndim) >= 2) else 'all') }"}, {"id": "max_iterations", "label": "Max Iterations", "dtype": "int", "default": "100"}, {"id": "matrix_object", "label": "LDPC FEC Matrix ID", "dtype": "raw"}], "value": "${ value }", "templates": {"imports": "from gnuradio import fec", "var_make": "% if int(ndim)==0:\nself.${id} = ${id} = fec.ldpc_bit_flip_decoder.make(${matrix_object}.get_base_sptr(),\\\n${max_iterations})\n% elif int(ndim)==1:\nself.${id} = ${id} = list(map((lambda \\\na: fec.ldpc_bit_flip_decoder.make(${matrix_object}.get_base_sptr(), ${max_iterations})),\\\nrange(0,${dim1})))\n% else:\nself.${id} = ${id} = list(map((lambda b: list(map((lambda \\\na: fec.ldpc_bit_flip_decoder.make(${matrix_object}.get_base_sptr(), ${max_iterations})),\\\nrange(0,${dim2})))), range(0,${dim1})))\n% endif"}, "documentation": "This block creates a LDPC Bit Flip Decoder Definition variable.\n\nThe decoder requires knowledge of the matrix used to create (encode) the codewords. In the LDPC FEC Matrix ID field, input the ID of either a:\n  1) LDPC Generator Matrix variable, or\n  2) LDPC Parity Check Matrix variable\n\nMax iterations may be increased from 100 for possibly better performance, but significantly higher number of iterations may slow things down.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/variable_ldpc_encoder_G.block.yml": {"id": "variable_ldpc_encoder_G_def", "label": "LDPC Encoder Definition (via Generator)", "flags": ["show_id"], "parameters": [{"id": "value", "label": "Ignore Me", "dtype": "raw", "default": "\"ok\"", "hide": "all"}, {"id": "ndim", "label": "Parallelism", "dtype": "enum", "options": ["0", "1", "2"]}, {"id": "dim1", "label": "Dimension 1", "dtype": "int", "default": "1", "hide": "${ ('none' if (int(ndim) >= 1) else 'all') }"}, {"id": "dim2", "label": "Dimension 2", "dtype": "int", "default": "1", "hide": "${ ('none' if (int(ndim) >= 2) else 'all') }"}, {"id": "G", "label": "LDPC Generator Matrix", "dtype": "raw"}], "value": "${ value }", "templates": {"imports": "from gnuradio import fec", "var_make": "% if int(ndim)==0:\nself.${id} = ${id} = fec.ldpc_gen_mtrx_encoder_make(${G})\\\n% elif int(ndim)==1:\nself.${id} = ${id} = list(map((lambda a: fec.ldpc_gen_mtrx_encoder_make(${G})),\\\nrange(0,${dim1})))\n% else:\nself.${id} = ${id} = list(map((lambda b: list( map((lambda \\\na: fec.ldpc_gen_mtrx_encoder_make(${G})), range(0,${dim2})))), range(0,${dim1})))\\\n% endif"}, "documentation": "Given a generator matrix in systematic form, G = [I|P], where I is the identity matrix and P is the parity submatrix, the information word s is encoded into a codeword x via:\n\nx = G'*s", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/variable_ldpc_encoder_H.block.yml": {"id": "variable_ldpc_encoder_H_def", "label": "LDPC Encoder Definition (via Parity Check)", "flags": ["show_id"], "parameters": [{"id": "value", "label": "Ignore Me", "dtype": "raw", "default": "\"ok\"", "hide": "all"}, {"id": "ndim", "label": "Parallelism", "dtype": "enum", "options": ["0", "1", "2"]}, {"id": "dim1", "label": "Dimension 1", "dtype": "int", "default": "1", "hide": "${ ('none' if (int(ndim) >= 1) else 'all') }"}, {"id": "dim2", "label": "Dimension 2", "dtype": "int", "default": "1", "hide": "${ ('none' if (int(ndim) >= 2) else 'all') }"}, {"id": "H", "label": "Parity Check Matrix", "dtype": "raw"}], "value": "${ value }", "templates": {"imports": "from gnuradio import fec", "var_make": "% if int(ndim)==0:\nself.${id} = ${id} = fec.ldpc_par_mtrx_encoder_make_H(${H})\\\n% elif int(ndim)==1:\nself.${id} = ${id} = list(map((lambda a: fec.ldpc_par_mtrx_encoder_make_H(${H})),\\\nrange(0,${dim1})))\n% else:\nself.${id} = ${id} = list(map((lambda b: list( map((lambda \\\na: fec.ldpc_par_mtrx_encoder_make_H(${H})), range(0,${dim2})))), range(0,${dim1})))\\\n% endif"}, "documentation": "This block creates a LDPC Encoder Definition variable.\n\nThis encoder performs a reduced complexity algorithm described by Richardson and Urbanke in Appendix A of their book: Modern Coding Theory. Compared to the block \"LDPC Encoder Definition (via Generator),\" this encoder requires orders of magnitude fewer operations to create each codeword. This is accomplished by completing a significant amount of the complex matrix manipulation (including inverse, multiplication, and Gaussian elimination operations) during preprocessing. The disadvantage of this encoder is that it requires a specially formatted matrix. However, GNU Radio includes python scripts to format a standard parity check matrix appropriately for this encoder, as well as a small library of encoding-ready matrices for use.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/variable_low_pass_filter_taps.block.yml": {"id": "variable_low_pass_filter_taps", "label": "Low-pass Filter Taps", "flags": ["show_id", "python"], "parameters": [{"id": "gain", "label": "Gain", "dtype": "float", "default": "1.0"}, {"id": "samp_rate", "label": "Sample Rate (Hz)", "dtype": "float", "default": "samp_rate"}, {"id": "cutoff_freq", "label": "Cutoff Freq (Hz)", "dtype": "float"}, {"id": "width", "label": "Transition Width (Hz)", "dtype": "float"}, {"id": "win", "label": "Window", "dtype": "int", "default": "firdes.WIN_HAMMING", "options": ["firdes.WIN_HAMMING", "firdes.WIN_HANN", "firdes.WIN_BLACKMAN", "firdes.WIN_RECTANGULAR", "firdes.WIN_KAISER"], "option_labels": ["Hamming", "Hann", "Blackman", "Rectangular", "Kaiser"]}, {"id": "beta", "label": "Beta", "dtype": "float", "default": "6.76"}], "value": "${ firdes.low_pass(gain, samp_rate, cutoff_freq, width, win, beta) }", "templates": {"imports": "from gnuradio.filter import firdes", "var_make": "self.${id} = ${id} = firdes.low_pass(${gain}, ${samp_rate}, ${cutoff_freq},\\\n${width}, ${win}, ${beta})"}, "cpp_templates": {"includes": ["#include <gnuradio/filter/firdes.h>"], "declarations": "filter::firdes::sptr ${id};", "var_make": "this->${id} = ${id} = firdes.low_pass(${gain}, ${samp_rate}, ${cutoff_freq},\\\n${width}, ${win}, ${beta});", "link": ["gnuradio-filter"]}, "documentation": "This variable is a convenience wrapper around a call to firdes.low_pass(...).\n\n    The beta parameter only applies to the Kaiser window.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/variable_polar_code_configurator.block.yml": {"id": "variable_polar_code_configurator", "label": "POLAR code Configurator", "flags": ["show_id"], "parameters": [{"id": "channel", "label": "Channel", "dtype": "string", "default": "polar.CHANNEL_TYPE_BEC", "options": ["polar.CHANNEL_TYPE_BEC", "polar.CHANNEL_TYPE_AWGN"], "option_labels": ["BEC", "AWGN"]}, {"id": "block_size", "label": "Block size (N)", "dtype": "int", "default": "32"}, {"id": "num_info_bits", "label": "Info Bits (K)", "dtype": "int", "default": "16"}, {"id": "design_snr", "label": "design SNR", "dtype": "float", "default": "0.0"}, {"id": "mu", "label": "mu", "dtype": "int", "default": "16"}], "value": "${ polar.load_frozen_bits_info(True, channel, block_size, num_info_bits, design_snr, mu) }", "templates": {"imports": "from gnuradio.fec import polar", "var_make": "self.${id} = ${id} = polar.load_frozen_bits_info(False, ${channel}, ${block_size}, ${num_info_bits}, ${design_snr}, ${mu})"}, "documentation": "This block serves as an interface to the underlying Python functions for channel construction.\n  \n  Current channel types are: BEC/AWGN\n  Block size must be a power of 2!\n  Info Bits must be 0 smaller K  smaller N\n  Design SNR does affect the target transmission SNR and thus performance.\n  The parameter mu is only relevant for AWGN channels. It is passed on to the corresponding Channel construction algorithm.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/variable_polar_decoder_sc.block.yml": {"id": "variable_polar_decoder_sc_def", "label": "POLAR Decoder SC Definition", "flags": ["show_id"], "parameters": [{"id": "ndim", "label": "Parallelism", "dtype": "enum", "default": "0", "options": ["0", "1", "2"]}, {"id": "dim1", "label": "Dimension 1", "dtype": "int", "default": "1", "hide": "${ ('none' if (int(ndim) >= 1) else 'all') }"}, {"id": "dim2", "label": "Dimension 2", "dtype": "int", "default": "4", "hide": "${ ('none' if (int(ndim) >= 2) else 'all') }"}, {"id": "block_size", "label": "Block size (N)", "dtype": "int"}, {"id": "num_info_bits", "label": "#Info Bits (K)", "dtype": "int"}, {"id": "frozen_bit_positions", "label": "Frozen Bit Positions", "dtype": "int_vector"}, {"id": "frozen_bit_values", "label": "Frozen Bit Values", "dtype": "int_vector"}], "value": "${ fec.polar_decoder_sc.make(block_size, num_info_bits, frozen_bit_positions, frozen_bit_values) }", "templates": {"imports": "from gnuradio import fec", "var_make": "% if int(ndim)==0:\nself.${id} = ${id} = fec.polar_decoder_sc.make(${block_size},\\\n${num_info_bits}, ${frozen_bit_positions}, ${frozen_bit_values})\n% elif int(ndim)==1:\nself.${id} = ${id} = list(map((lambda a: fec.polar_decoder_sc.make(${block_size},\\\n${num_info_bits}, ${frozen_bit_positions}, ${frozen_bit_values})), range(0,\\\n${dim1})))\n% else:\nself.${id} = ${id} = list(map((lambda b: list(map((lambda a: \\\nfec.polar_decoder_sc.make(${block_size}, ${num_info_bits}, ${frozen_bit_positions},\\\n${frozen_bit_values})), range(0, ${dim2})))), range(0, ${dim1})))\n% endif"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/variable_polar_decoder_sc_list.block.yml": {"id": "variable_polar_decoder_sc_list_def", "label": "POLAR Decoder SC List Definition", "flags": ["show_id"], "parameters": [{"id": "ndim", "label": "Parallelism", "dtype": "enum", "default": "0", "options": ["0", "1", "2"]}, {"id": "dim1", "label": "Dimension 1", "dtype": "int", "default": "1", "hide": "${ ('none' if (int(ndim) >= 1) else 'all') }"}, {"id": "dim2", "label": "Dimension 2", "dtype": "int", "default": "4", "hide": "${ ('none' if (int(ndim) >= 2) else 'all') }"}, {"id": "max_list_size", "label": "Maximum List Size (L)", "dtype": "int"}, {"id": "block_size", "label": "Block size (N)", "dtype": "int"}, {"id": "num_info_bits", "label": "#Info Bits (K)", "dtype": "int"}, {"id": "frozen_bit_positions", "label": "Frozen Bit Positions", "dtype": "int_vector"}, {"id": "frozen_bit_values", "label": "Frozen Bit Values", "dtype": "int_vector"}], "value": "${ fec.polar_decoder_sc_list.make(max_list_size, block_size, num_info_bits, frozen_bit_positions, frozen_bit_values) }", "templates": {"imports": "from gnuradio import fec", "var_make": "% if int(ndim)==0:\nself.${id} = ${id} = fec.polar_decoder_sc_list.make(${max_list_size},\\\n${block_size}, ${num_info_bits}, ${frozen_bit_positions}, ${frozen_bit_values})\\\n% elif int(ndim)==1:\nself.${id} = ${id} = list(map((lambda a: fec.polar_decoder_sc_list.make(${max_list_size},\\\n${block_size}, ${num_info_bits}, ${frozen_bit_positions}, ${frozen_bit_values})),\\\nrange(0, ${dim1})))\n% else:\nself.${id} = ${id} = list(map((lambda b: list(map((lambda \\\na: fec.polar_decoder_sc_list.make(${max_list_size}, ${block_size}, ${num_info_bits},\\\n${frozen_bit_positions}, ${frozen_bit_values})), range(0, ${dim2})))), range(0,\\\n${dim1})))\n% endif"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/variable_polar_decoder_sc_systematic.block.yml": {"id": "variable_polar_decoder_sc_systematic_def", "label": "systematic POLAR Decoder SC Definition", "flags": ["show_id"], "parameters": [{"id": "ndim", "label": "Parallelism", "dtype": "enum", "default": "0", "options": ["0", "1", "2"]}, {"id": "dim1", "label": "Dimension 1", "dtype": "int", "default": "1", "hide": "${ ('none' if (int(ndim) >= 1) else 'all') }"}, {"id": "dim2", "label": "Dimension 2", "dtype": "int", "default": "4", "hide": "${ ('none' if (int(ndim) >= 2) else 'all') }"}, {"id": "block_size", "label": "Block size (N)", "dtype": "int"}, {"id": "num_info_bits", "label": "#Info Bits (K)", "dtype": "int"}, {"id": "frozen_bit_positions", "label": "Frozen Bit Positions", "dtype": "int_vector"}], "value": "${ fec.polar_decoder_sc_systematic.make(block_size, num_info_bits, frozen_bit_positions) }", "templates": {"imports": "from gnuradio import fec", "var_make": "% if int(ndim)==0:\nself.${id} = ${id} = fec.polar_decoder_sc_systematic.make(${block_size},\\\n${num_info_bits}, ${frozen_bit_positions})\n% elif int(ndim)==1:\nself.${id} = ${id} = list(map((lambda a: fec.polar_decoder_sc_systematic.make(${block_size},\\\n\\ ${num_info_bits}, ${frozen_bit_positions})), range(0, ${dim1}) ))\n% else:\nself.${id} = ${id} = list(map((lambda b: list(map((lambda a: fec.polar_decoder_sc_systematic.make(${block_size},\\\n\\ ${num_info_bits}, ${frozen_bit_positions})), range(0, ${dim2})))), range(0, ${dim1})))\n% endif"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/variable_polar_encoder.block.yml": {"id": "variable_polar_encoder_def", "label": "POLAR Encoder Definition", "flags": ["show_id"], "parameters": [{"id": "is_packed", "label": "Packed Bits", "dtype": "bool", "default": "False"}, {"id": "ndim", "label": "Parallelism", "dtype": "enum", "default": "0", "options": ["0", "1", "2"]}, {"id": "dim1", "label": "Dimension 1", "dtype": "int", "default": "1", "hide": "${ ('none' if (int(ndim) >= 1) else 'all') }"}, {"id": "dim2", "label": "Dimension 2", "dtype": "int", "default": "4", "hide": "${ ('none' if (int(ndim) >= 2) else 'all') }"}, {"id": "block_size", "label": "Block size (N)", "dtype": "int"}, {"id": "num_info_bits", "label": "#Info Bits (K)", "dtype": "int"}, {"id": "frozen_bit_positions", "label": "Frozen Bit Positions", "dtype": "int_vector"}, {"id": "frozen_bit_values", "label": "Frozen Bit Values", "dtype": "int_vector"}], "value": "${ fec.polar_encoder.make(block_size, num_info_bits, frozen_bit_positions, frozen_bit_values, is_packed) }", "templates": {"imports": "from gnuradio import fec", "var_make": "% if int(ndim)==0:\nself.${id} = ${id} = fec.polar_encoder.make(${block_size},\\\n${num_info_bits}, ${frozen_bit_positions}, ${frozen_bit_values}, ${is_packed})\\\n% elif int(ndim)==1:\nself.${id} = ${id} = list(map((lambda a: fec.polar_encoder.make(${block_size},\\\n${num_info_bits}, ${frozen_bit_positions}, ${frozen_bit_values}, ${is_packed})),\\\nrange(0, ${dim1})))\n% else:\nself.${id} = ${id} = list(map((lambda b: list(map((lambda a: \\\nfec.polar_encoder.make(${block_size}, ${num_info_bits}, ${frozen_bit_positions},\\\n${frozen_bit_values}, ${is_packed})), range(0, ${dim2})))), range(0, ${dim1})))\n% endif"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/variable_polar_encoder_systematic.block.yml": {"id": "variable_polar_encoder_systematic_def", "label": "systematic POLAR Encoder Definition", "flags": ["show_id"], "parameters": [{"id": "ndim", "label": "Parallelism", "dtype": "enum", "default": "0", "options": ["0", "1", "2"]}, {"id": "dim1", "label": "Dimension 1", "dtype": "int", "default": "1", "hide": "${ ('none' if (int(ndim) >= 1) else 'all') }"}, {"id": "dim2", "label": "Dimension 2", "dtype": "int", "default": "4", "hide": "${ ('none' if (int(ndim) >= 2) else 'all') }"}, {"id": "block_size", "label": "Block size (N)", "dtype": "int"}, {"id": "num_info_bits", "label": "#Info Bits (K)", "dtype": "int"}, {"id": "frozen_bit_positions", "label": "Frozen Bit Positions", "dtype": "int_vector"}], "value": "${ fec.polar_encoder_systematic.make(block_size, num_info_bits, frozen_bit_positions) }", "templates": {"imports": "from gnuradio import fec", "var_make": "% if int(ndim)==0:\nself.${id} = ${id} = fec.polar_encoder_systematic.make(${block_size},\\\n${num_info_bits}, ${frozen_bit_positions})\n% elif int(ndim)==1:\nself.${id} = ${id} = list(map((lambda a: fec.polar_encoder_systematic.make(${block_size},\\\n${num_info_bits}, ${frozen_bit_positions})), range(0, ${dim1})))\n% else:\nself.${id} = ${id} = list(map((lambda b: list(map((lambda a: fec.polar_encoder_systematic.make(${block_size},\\\n${num_info_bits}, ${frozen_bit_positions})), range(0, ${dim2})))), range(0, ${dim1})))\n% endif"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/variable_repetition_decoder_def_list.block.yml": {"id": "variable_repetition_decoder_def", "label": "Repetition Decoder Definition", "flags": ["show_id"], "parameters": [{"id": "value", "label": "Ignore Me", "dtype": "raw", "default": "\"ok\"", "hide": "all"}, {"id": "ndim", "label": "Parallelism", "dtype": "enum", "options": ["0", "1", "2"]}, {"id": "dim1", "label": "Dimension 1", "dtype": "int", "default": "1", "hide": "${ ('none' if (int(ndim) >= 1) else 'all') }"}, {"id": "dim2", "label": "Dimension 2", "dtype": "int", "default": "1", "hide": "${ ('none' if (int(ndim) >= 2) else 'all') }"}, {"id": "framebits", "label": "Frame Bits", "dtype": "int", "default": "2048"}, {"id": "rep", "label": "Repetitions", "dtype": "int", "default": "3"}, {"id": "prob", "label": "a prior prob", "dtype": "float", "default": "0.5"}], "value": "${ fec.repetition_decoder.make(framebits, rep, prob) }", "templates": {"imports": "from gnuradio import fec", "var_make": "% if int(ndim)==0:\nself.${id} = ${id} = fec.repetition_decoder.make(${framebits},\\\n${rep}, ${prob})\n% elif int(ndim)==1:\nself.${id} = ${id} = list(map( (lambda \\\na: fec.repetition_decoder.make(${framebits}, ${rep}, ${prob})), range(0,${dim1})))\n% else:\nself.${id} = ${id} = list(map( (lambda b: list( map( ( lambda a: fec.repetition_decoder.make(${framebits},\\\n${rep}, ${prob})), range(0,${dim2}) ) ) ), range(0,${dim1})))\n% endif"}, "documentation": "", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/variable_repetition_encoder_def_list.block.yml": {"id": "variable_repetition_encoder_def", "label": "Repetition Encoder Definition", "flags": ["show_id"], "parameters": [{"id": "ndim", "label": "Parallelism", "dtype": "enum", "options": ["0", "1", "2"]}, {"id": "dim1", "label": "Dimension 1", "dtype": "int", "default": "1", "hide": "${ ('none' if (int(ndim) >= 1) else 'all') }"}, {"id": "dim2", "label": "Dimension 2", "dtype": "int", "default": "1", "hide": "${ ('none' if (int(ndim) >= 2) else 'all') }"}, {"id": "framebits", "label": "Frame Bits", "dtype": "int", "default": "2048"}, {"id": "rep", "label": "Repetitions", "dtype": "int", "default": "3"}], "value": "${ fec.repetition_encoder_make(framebits, rep) }", "templates": {"imports": "from gnuradio import fec", "var_make": "% if int(ndim)==0:\nself.${id} = ${id} = fec.repetition_encoder_make(${framebits}, ${rep})\n% elif int(ndim)==1:\nself.${id} = ${id} = list(map((lambda a: fec.repetition_encoder_make(${framebits},\\\n${rep})), range(0,${dim1})))\n% else:\nself.${id} = ${id} = list(map((lambda \\\nb: list(map((lambda a: fec.repetition_encoder_make(${framebits}, ${rep})), range(0,${dim2})))),\\\nrange(0,${dim1})))\n% endif"}, "documentation": "", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/variable_rrc_filter_taps.block.yml": {"id": "variable_rrc_filter_taps", "label": "RRC Filter Taps", "flags": ["show_id", "python", "cpp"], "parameters": [{"id": "gain", "label": "Gain", "dtype": "float", "default": "1.0"}, {"id": "samp_rate", "label": "Sample Rate (Hz)", "dtype": "float", "default": "samp_rate"}, {"id": "sym_rate", "label": "Symbol Rate (Hz)", "dtype": "float"}, {"id": "alpha", "label": "Excess BW", "dtype": "float", "default": "0.35"}, {"id": "ntaps", "label": "Num Taps", "dtype": "int", "default": "11*sps"}], "value": "${ firdes.root_raised_cosine(gain, samp_rate, sym_rate, alpha, ntaps) }", "templates": {"imports": "from gnuradio.filter import firdes", "var_make": "self.${id} = ${id} = firdes.root_raised_cosine(${gain}, ${samp_rate},\\\n${sym_rate}, ${alpha}, ${ntaps})"}, "cpp_templates": {"includes": ["#include <gnuradio/filter/firdes.h>"], "declarations": "filter::firdes::sptr ${id};", "var_make": "this->${id} = ${id} = firdes.root_raised_cosine(${gain}, ${samp_rate},\\\n${sym_rate}, ${alpha}, ${ntaps});", "link": ["gnuradio-filter"]}, "documentation": "This is a convenience wrapper for calling firdes.root_raised_cosine(...).", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/variable_struct.block.yml": {"id": "variable_struct", "label": "Struct Variable", "flags": ["show_id"], "parameters": [{"id": "field0", "label": "Field 0", "category": "Fields", "dtype": "string", "default": "field0", "hide": "part"}, {"id": "field1", "label": "Field 1", "category": "Fields", "dtype": "string", "hide": "part"}, {"id": "field2", "label": "Field 2", "category": "Fields", "dtype": "string", "hide": "part"}, {"id": "field3", "label": "Field 3", "category": "Fields", "dtype": "string", "hide": "part"}, {"id": "field4", "label": "Field 4", "category": "Fields", "dtype": "string", "hide": "part"}, {"id": "field5", "label": "Field 5", "category": "Fields", "dtype": "string", "hide": "part"}, {"id": "field6", "label": "Field 6", "category": "Fields", "dtype": "string", "hide": "part"}, {"id": "field7", "label": "Field 7", "category": "Fields", "dtype": "string", "hide": "part"}, {"id": "field8", "label": "Field 8", "category": "Fields", "dtype": "string", "hide": "part"}, {"id": "field9", "label": "Field 9", "category": "Fields", "dtype": "string", "hide": "part"}, {"id": "field10", "label": "Field 10", "category": "Fields", "dtype": "string", "hide": "part"}, {"id": "field11", "label": "Field 11", "category": "Fields", "dtype": "string", "hide": "part"}, {"id": "field12", "label": "Field 12", "category": "Fields", "dtype": "string", "hide": "part"}, {"id": "field13", "label": "Field 13", "category": "Fields", "dtype": "string", "hide": "part"}, {"id": "field14", "label": "Field 14", "category": "Fields", "dtype": "string", "hide": "part"}, {"id": "field15", "label": "Field 15", "category": "Fields", "dtype": "string", "hide": "part"}, {"id": "field16", "label": "Field 16", "category": "Fields", "dtype": "string", "hide": "part"}, {"id": "field17", "label": "Field 17", "category": "Fields", "dtype": "string", "hide": "part"}, {"id": "field18", "label": "Field 18", "category": "Fields", "dtype": "string", "hide": "part"}, {"id": "field19", "label": "Field 19", "category": "Fields", "dtype": "string", "hide": "part"}, {"id": "value0", "label": "${field0}", "dtype": "raw", "default": "0", "hide": "${ 'none' if field0 else 'all' }"}, {"id": "value1", "label": "${field1}", "dtype": "raw", "default": "0", "hide": "${ 'none' if field1 else 'all' }"}, {"id": "value2", "label": "${field2}", "dtype": "raw", "default": "0", "hide": "${ 'none' if field2 else 'all' }"}, {"id": "value3", "label": "${field3}", "dtype": "raw", "default": "0", "hide": "${ 'none' if field3 else 'all' }"}, {"id": "value4", "label": "${field4}", "dtype": "raw", "default": "0", "hide": "${ 'none' if field4 else 'all' }"}, {"id": "value5", "label": "${field5}", "dtype": "raw", "default": "0", "hide": "${ 'none' if field5 else 'all' }"}, {"id": "value6", "label": "${field6}", "dtype": "raw", "default": "0", "hide": "${ 'none' if field6 else 'all' }"}, {"id": "value7", "label": "${field7}", "dtype": "raw", "default": "0", "hide": "${ 'none' if field7 else 'all' }"}, {"id": "value8", "label": "${field8}", "dtype": "raw", "default": "0", "hide": "${ 'none' if field8 else 'all' }"}, {"id": "value9", "label": "${field9}", "dtype": "raw", "default": "0", "hide": "${ 'none' if field9 else 'all' }"}, {"id": "value10", "label": "${field10}", "dtype": "raw", "default": "0", "hide": "${ 'none' if field10 else 'all' }"}, {"id": "value11", "label": "${field11}", "dtype": "raw", "default": "0", "hide": "${ 'none' if field11 else 'all' }"}, {"id": "value12", "label": "${field12}", "dtype": "raw", "default": "0", "hide": "${ 'none' if field12 else 'all' }"}, {"id": "value13", "label": "${field13}", "dtype": "raw", "default": "0", "hide": "${ 'none' if field13 else 'all' }"}, {"id": "value14", "label": "${field14}", "dtype": "raw", "default": "0", "hide": "${ 'none' if field14 else 'all' }"}, {"id": "value15", "label": "${field15}", "dtype": "raw", "default": "0", "hide": "${ 'none' if field15 else 'all' }"}, {"id": "value16", "label": "${field16}", "dtype": "raw", "default": "0", "hide": "${ 'none' if field16 else 'all' }"}, {"id": "value17", "label": "${field17}", "dtype": "raw", "default": "0", "hide": "${ 'none' if field17 else 'all' }"}, {"id": "value18", "label": "${field18}", "dtype": "raw", "default": "0", "hide": "${ 'none' if field18 else 'all' }"}, {"id": "value19", "label": "${field19}", "dtype": "raw", "default": "0", "hide": "${ 'none' if field19 else 'all' }"}], "value": "${value}", "asserts": ["${ (str(field0) or \"a\")[0].isalpha() }", "${ (str(field0) or \"a\").isalnum() }", "${ (str(field1) or \"a\")[0].isalpha() }", "${ (str(field1) or \"a\").isalnum() }", "${ (str(field2) or \"a\")[0].isalpha() }", "${ (str(field2) or \"a\").isalnum() }", "${ (str(field3) or \"a\")[0].isalpha() }", "${ (str(field3) or \"a\").isalnum() }", "${ (str(field4) or \"a\")[0].isalpha() }", "${ (str(field4) or \"a\").isalnum() }", "${ (str(field5) or \"a\")[0].isalpha() }", "${ (str(field5) or \"a\").isalnum() }", "${ (str(field6) or \"a\")[0].isalpha() }", "${ (str(field6) or \"a\").isalnum() }", "${ (str(field7) or \"a\")[0].isalpha() }", "${ (str(field7) or \"a\").isalnum() }", "${ (str(field8) or \"a\")[0].isalpha() }", "${ (str(field8) or \"a\").isalnum() }", "${ (str(field9) or \"a\")[0].isalpha() }", "${ (str(field9) or \"a\").isalnum() }", "${ (str(field10) or \"a\")[0].isalpha() }", "${ (str(field10) or \"a\").isalnum() }", "${ (str(field11) or \"a\")[0].isalpha() }", "${ (str(field11) or \"a\").isalnum() }", "${ (str(field12) or \"a\")[0].isalpha() }", "${ (str(field12) or \"a\").isalnum() }", "${ (str(field13) or \"a\")[0].isalpha() }", "${ (str(field13) or \"a\").isalnum() }", "${ (str(field14) or \"a\")[0].isalpha() }", "${ (str(field14) or \"a\").isalnum() }", "${ (str(field15) or \"a\")[0].isalpha() }", "${ (str(field15) or \"a\").isalnum() }", "${ (str(field16) or \"a\")[0].isalpha() }", "${ (str(field16) or \"a\").isalnum() }", "${ (str(field17) or \"a\")[0].isalpha() }", "${ (str(field17) or \"a\").isalnum() }", "${ (str(field18) or \"a\")[0].isalpha() }", "${ (str(field18) or \"a\").isalnum() }", "${ (str(field19) or \"a\")[0].isalpha() }", "${ (str(field19) or \"a\").isalnum() }"], "templates": {"imports": "def struct(data): return type('Struct', (object,), data)()", "var_make": "self.${id} = ${id} = struct({\n    % for i in range(20):\n    <%\n        field = context.get('field' + str(i))\n        value = context.get('value' + str(i))\n    %>\n    % if len(str(field)) > 2:\n    ${field}: ${value},\n    % endif\n    % endfor\n})", "var_value": "struct({\n    % for i in range(20):\n    <%\n        field = context.get('field' + str(i))\n    %>\n    % if len(str(field)) > 2:\n    ${field}: ${field},\n    % endif\n    % endfor\n})"}, "documentation": "This is a simple struct/record like variable.\n\nAttribute/field names can be specified in the tab 'Fields'.\nFor each non-empty field a parameter with type raw is shown.\nValue access via the dot operator, e.g. \"variable_struct_0.field0\"", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/vocoder_alaw_decode_bs.block.yml": {"id": "vocoder_alaw_decode_bs", "label": "Alaw Audio Decoder", "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "short"}], "templates": {"imports": "from gnuradio import vocoder", "make": "vocoder.alaw_decode_bs()"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/vocoder_alaw_encode_sb.block.yml": {"id": "vocoder_alaw_encode_sb", "label": "g711 Alaw Audio Encoder", "inputs": [{"domain": "stream", "dtype": "short"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import vocoder", "make": "vocoder.alaw_encode_sb()"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/vocoder_cvsd_decode.block.yml": {"id": "vocoder_cvsd_decode_bf", "label": "CVSD Decoder", "parameters": [{"id": "resample", "label": "Resample", "dtype": "int", "default": "8"}, {"id": "bw", "label": "Frac. Bandwidth", "dtype": "real", "default": "0.5"}], "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "float"}], "templates": {"imports": "from gnuradio import vocoder", "make": "vocoder.cvsd_decode_bf(${resample},${bw})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/vocoder_cvsd_decode_bs.block.yml": {"id": "vocoder_cvsd_decode_bs", "label": "CVSD Audio Decoder (Raw Bit-Level)", "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "short"}], "templates": {"imports": "from gnuradio import vocoder", "make": "vocoder.cvsd_decode_bs()"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/vocoder_cvsd_encode.block.yml": {"id": "vocoder_cvsd_encode_fb", "label": "CVSD Encoder", "parameters": [{"id": "resample", "label": "Resample", "dtype": "int", "default": "8"}, {"id": "bw", "label": "Frac. Bandwidth", "dtype": "real", "default": "0.5"}], "inputs": [{"domain": "stream", "dtype": "float"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import vocoder", "make": "vocoder.cvsd_encode_fb(${resample},${bw})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/vocoder_cvsd_encode_sb.block.yml": {"id": "vocoder_cvsd_encode_sb", "label": "CVSD Audio Encoder (Raw Bit-Level)", "inputs": [{"domain": "stream", "dtype": "short"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import vocoder", "make": "vocoder.cvsd_encode_sb()"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/vocoder_g721_decode_bs.block.yml": {"id": "vocoder_g721_decode_bs", "label": "g721 Audio Decoder", "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "short"}], "templates": {"imports": "from gnuradio import vocoder", "make": "vocoder.g721_decode_bs()"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/vocoder_g721_encode_sb.block.yml": {"id": "vocoder_g721_encode_sb", "label": "g721 Audio Encoder", "inputs": [{"domain": "stream", "dtype": "short"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import vocoder", "make": "vocoder.g721_encode_sb()"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/vocoder_g723_24_decode_bs.block.yml": {"id": "vocoder_g723_24_decode_bs", "label": "g723_24 Audio Decoder", "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "short"}], "templates": {"imports": "from gnuradio import vocoder", "make": "vocoder.g723_24_decode_bs()"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/vocoder_g723_24_encode_sb.block.yml": {"id": "vocoder_g723_24_encode_sb", "label": "g723_24 Audio Encoder", "inputs": [{"domain": "stream", "dtype": "short"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import vocoder", "make": "vocoder.g723_24_encode_sb()"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/vocoder_g723_40_decode_bs.block.yml": {"id": "vocoder_g723_40_decode_bs", "label": "g723_40 Audio Decoder", "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "short"}], "templates": {"imports": "from gnuradio import vocoder", "make": "vocoder.g723_40_decode_bs()"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/vocoder_g723_40_encode_sb.block.yml": {"id": "vocoder_g723_40_encode_sb", "label": "g723_40 Audio Encoder", "inputs": [{"domain": "stream", "dtype": "short"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import vocoder", "make": "vocoder.g723_40_encode_sb()"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/vocoder_ulaw_decode_bs.block.yml": {"id": "vocoder_ulaw_decode_bs", "label": "ulaw Audio Decoder", "inputs": [{"domain": "stream", "dtype": "byte"}], "outputs": [{"domain": "stream", "dtype": "short"}], "templates": {"imports": "from gnuradio import vocoder", "make": "vocoder.ulaw_decode_bs()"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/vocoder_ulaw_encode_sb.block.yml": {"id": "vocoder_ulaw_encode_sb", "label": "ulaw Audio Encoder", "inputs": [{"domain": "stream", "dtype": "short"}], "outputs": [{"domain": "stream", "dtype": "byte"}], "templates": {"imports": "from gnuradio import vocoder", "make": "vocoder.ulaw_encode_sb()"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/xmlrpc_client.block.yml": {"id": "xmlrpc_client", "label": "XMLRPC Client", "flags": ["python"], "parameters": [{"id": "addr", "label": "Address", "dtype": "string", "default": "localhost"}, {"id": "port", "label": "Port", "dtype": "int", "default": "8080"}, {"id": "callback", "label": "Callback", "dtype": "string", "default": "set_"}, {"id": "variable", "label": "Variable", "dtype": "raw"}], "templates": {"imports": "import xmlrpclib", "make": "xmlrpclib.Server('http://${addr}:${port}')", "callbacks": ["${callback}(${variable})"]}, "documentation": "This block will create an XMLRPC client. The client will execute the callback on the server when the variable is changed. The callback should be a the name of a function registered on the server. The variable should be an expression containing a the name of a variable in flow graph.", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/xmlrpc_server.block.yml": {"id": "xmlrpc_server", "label": "XMLRPC Server", "flags": ["python"], "parameters": [{"id": "addr", "label": "Address", "dtype": "string", "default": "localhost"}, {"id": "port", "label": "Port", "dtype": "int", "default": "8080"}], "templates": {"imports": "import SimpleXMLRPCServer\nimport threading", "make": "SimpleXMLRPCServer.SimpleXMLRPCServer((${addr}, ${port}), allow_none=True)\nself.${id}.register_instance(self)\nself.${id}_thread = threading.Thread(target=self.${id}.serve_forever)\nself.${id}_thread.daemon = True\nself.${id}_thread.start()"}, "documentation": "This block will start an XMLRPC server. The server provides access to the run, start, stop, wait functions of the flow graph. The server also provides access to the variable callbacks in the flow graph. Ex: If the variable is called freq, the function provided by the server will be called set_freq(new_freq).\n\nExample client in python:\n\nimport xmlrpclib\ns = xmlrpclib.Server('http://localhost:8080')\ns.set_freq(5000)", "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/zeromq_pub_msg_sink.block.yml": {"id": "zeromq_pub_msg_sink", "label": "ZMQ PUB Message Sink", "category": "[Core]/ZeroMQ Interfaces", "parameters": [{"id": "address", "label": "Address", "dtype": "string"}, {"id": "timeout", "label": "Timeout (msec)", "dtype": "float", "default": "100"}], "inputs": [{"domain": "message", "id": "in", "optional": true}], "templates": {"imports": "from gnuradio import zeromq", "make": "zeromq.pub_msg_sink(${address}, ${timeout})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/zeromq_pub_sink.block.yml": {"id": "zeromq_pub_sink", "label": "ZMQ PUB Sink", "category": "[Core]/ZeroMQ Interfaces", "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"itemsize": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "address", "label": "Address", "dtype": "string"}, {"id": "timeout", "label": "Timeout (msec)", "dtype": "float", "default": "100"}, {"id": "pass_tags", "label": "Pass Tags", "dtype": "enum", "default": "False", "options": ["True", "False"], "option_labels": ["Yes", "No"]}, {"id": "hwm", "label": "High Watermark", "dtype": "int", "default": "-1", "hide": "${ ('part' if hwm == -1 else 'none') }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "templates": {"imports": "from gnuradio import zeromq", "make": "zeromq.pub_sink(${type.itemsize}, ${vlen}, ${address}, ${timeout}, ${pass_tags}, ${hwm})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/zeromq_pull_msg_source.block.yml": {"id": "zeromq_pull_msg_source", "label": "ZMQ PULL Message Source", "category": "[Core]/ZeroMQ Interfaces", "parameters": [{"id": "address", "label": "Address", "dtype": "string"}, {"id": "timeout", "label": "Timeout (msec)", "dtype": "float", "default": "100"}], "outputs": [{"domain": "message", "id": "out", "optional": true}], "templates": {"imports": "from gnuradio import zeromq", "make": "zeromq.pull_msg_source(${address}, ${timeout})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/zeromq_pull_source.block.yml": {"id": "zeromq_pull_source", "label": "ZMQ PULL Source", "category": "[Core]/ZeroMQ Interfaces", "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"itemsize": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "address", "label": "Address", "dtype": "string"}, {"id": "timeout", "label": "Timeout (msec)", "dtype": "float", "default": "100"}, {"id": "pass_tags", "label": "Pass Tags", "dtype": "enum", "default": "False", "options": ["True", "False"], "option_labels": ["Yes", "No"]}, {"id": "hwm", "label": "High Watermark", "dtype": "int", "default": "-1", "hide": "${ ('part' if hwm == -1 else 'none') }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "templates": {"imports": "from gnuradio import zeromq", "make": "zeromq.pull_source(${type.itemsize}, ${vlen}, ${address}, ${timeout}, ${pass_tags}, ${hwm})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/zeromq_push_msg_sink.block.yml": {"id": "zeromq_push_msg_sink", "label": "ZMQ PUSH Message Sink", "category": "[Core]/ZeroMQ Interfaces", "parameters": [{"id": "address", "label": "Address", "dtype": "string"}, {"id": "timeout", "label": "Timeout (msec)", "dtype": "float", "default": "100"}], "inputs": [{"domain": "message", "id": "in", "optional": true}], "templates": {"imports": "from gnuradio import zeromq", "make": "zeromq.push_msg_sink(${address}, ${timeout})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/zeromq_push_sink.block.yml": {"id": "zeromq_push_sink", "label": "ZMQ PUSH Sink", "category": "[Core]/ZeroMQ Interfaces", "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"itemsize": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "address", "label": "Address", "dtype": "string"}, {"id": "timeout", "label": "Timeout (msec)", "dtype": "float", "default": "100"}, {"id": "pass_tags", "label": "Pass Tags", "dtype": "enum", "default": "False", "options": ["True", "False"], "option_labels": ["Yes", "No"]}, {"id": "hwm", "label": "High Watermark", "dtype": "int", "default": "-1", "hide": "${ ('part' if hwm == -1 else 'none') }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "templates": {"imports": "from gnuradio import zeromq", "make": "zeromq.push_sink(${type.itemsize}, ${vlen}, ${address}, ${timeout}, ${pass_tags}, ${hwm})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/zeromq_rep_msg_sink.block.yml": {"id": "zeromq_rep_msg_sink", "label": "ZMQ REP Message Sink", "category": "[Core]/ZeroMQ Interfaces", "parameters": [{"id": "address", "label": "Address", "dtype": "string"}, {"id": "timeout", "label": "Timeout (msec)", "dtype": "float", "default": "100"}], "inputs": [{"domain": "message", "id": "in", "optional": true}], "templates": {"imports": "from gnuradio import zeromq", "make": "zeromq.rep_msg_sink(${address}, ${timeout})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/zeromq_rep_sink.block.yml": {"id": "zeromq_rep_sink", "label": "ZMQ REP Sink", "category": "[Core]/ZeroMQ Interfaces", "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"itemsize": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "address", "label": "Address", "dtype": "string"}, {"id": "timeout", "label": "Timeout (msec)", "dtype": "float", "default": "100"}, {"id": "pass_tags", "label": "Pass Tags", "dtype": "enum", "default": "False", "options": ["True", "False"], "option_labels": ["Yes", "No"]}, {"id": "hwm", "label": "High Watermark", "dtype": "int", "default": "-1", "hide": "${ ('part' if hwm == -1 else 'none') }"}], "inputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "templates": {"imports": "from gnuradio import zeromq", "make": "zeromq.rep_sink(${type.itemsize}, ${vlen}, ${address}, ${timeout}, ${pass_tags}, ${hwm})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/zeromq_req_msg_source.block.yml": {"id": "zeromq_req_msg_source", "label": "ZMQ REQ Message Source", "category": "[Core]/ZeroMQ Interfaces", "parameters": [{"id": "address", "label": "Address", "dtype": "string"}, {"id": "timeout", "label": "Timeout (msec)", "dtype": "float", "default": "100"}], "outputs": [{"domain": "message", "id": "out", "optional": true}], "templates": {"imports": "from gnuradio import zeromq", "make": "zeromq.req_msg_source(${address}, ${timeout})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/zeromq_req_source.block.yml": {"id": "zeromq_req_source", "label": "ZMQ REQ Source", "category": "[Core]/ZeroMQ Interfaces", "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"itemsize": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "address", "label": "Address", "dtype": "string"}, {"id": "timeout", "label": "Timeout (msec)", "dtype": "float", "default": "100"}, {"id": "pass_tags", "label": "Pass Tags", "dtype": "enum", "default": "False", "options": ["True", "False"], "option_labels": ["Yes", "No"]}, {"id": "hwm", "label": "High Watermark", "dtype": "int", "default": "-1", "hide": "${ ('part' if hwm == -1 else 'none') }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "templates": {"imports": "from gnuradio import zeromq", "make": "zeromq.req_source(${type.itemsize}, ${vlen}, ${address}, ${timeout}, ${pass_tags}, ${hwm})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/zeromq_sub_msg_source.block.yml": {"id": "zeromq_sub_msg_source", "label": "ZMQ SUB Message Source", "category": "[Core]/ZeroMQ Interfaces", "parameters": [{"id": "address", "label": "Address", "dtype": "string"}, {"id": "timeout", "label": "Timeout (msec)", "dtype": "float", "default": "100"}], "outputs": [{"domain": "message", "id": "out", "optional": true}], "templates": {"imports": "from gnuradio import zeromq", "make": "zeromq.sub_msg_source(${address}, ${timeout})"}, "file_format": 1}, "/usr/local/share/gnuradio/grc/blocks/zeromq_sub_source.block.yml": {"id": "zeromq_sub_source", "label": "ZMQ SUB Source", "category": "[Core]/ZeroMQ Interfaces", "parameters": [{"id": "type", "label": "IO Type", "dtype": "enum", "options": ["complex", "float", "int", "short", "byte"], "option_attributes": {"itemsize": ["gr.sizeof_gr_complex", "gr.sizeof_float", "gr.sizeof_int", "gr.sizeof_short", "gr.sizeof_char"]}, "hide": "part"}, {"id": "vlen", "label": "Vec Length", "dtype": "int", "default": "1", "hide": "${ 'part' if vlen == 1 else 'none' }"}, {"id": "address", "label": "Address", "dtype": "string"}, {"id": "timeout", "label": "Timeout (msec)", "dtype": "float", "default": "100"}, {"id": "pass_tags", "label": "Pass Tags", "dtype": "enum", "default": "False", "options": ["True", "False"], "option_labels": ["Yes", "No"]}, {"id": "hwm", "label": "High Watermark", "dtype": "int", "default": "-1", "hide": "${ ('part' if hwm == -1 else 'none') }"}], "outputs": [{"domain": "stream", "dtype": "${ type }", "vlen": "${ vlen }"}], "templates": {"imports": "from gnuradio import zeromq", "make": "zeromq.sub_source(${type.itemsize}, ${vlen}, ${address}, ${timeout}, ${pass_tags}, ${hwm})"}, "file_format": 1}}